
Service_Robot_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c96c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800ca80  0800ca80  0001ca80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfec  0800cfec  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cfec  0800cfec  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cfec  0800cfec  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfec  0800cfec  0001cfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cff0  0800cff0  0001cff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800cff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  200001f8  0800d1ec  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  0800d1ec  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013168  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003323  00000000  00000000  00033389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  000366b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  00037990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044af  00000000  00000000  00038b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017335  00000000  00000000  0003cfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f6e  00000000  00000000  00054304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8272  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d0  00000000  00000000  000e82c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ca64 	.word	0x0800ca64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800ca64 	.word	0x0800ca64

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <MPU6050_Init>:
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;
float GX_1,GY_2,GZ_2;

void MPU6050_Init (void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;
HAL_I2C_IsDeviceReady(&hi2c2, MPU6050_ADDR, 2, 100);
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2202      	movs	r2, #2
 800118a:	21d0      	movs	r1, #208	; 0xd0
 800118c:	4829      	ldr	r0, [pc, #164]	; (8001234 <MPU6050_Init+0xb4>)
 800118e:	f003 fe65 	bl	8004e5c <HAL_I2C_IsDeviceReady>
	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2301      	movs	r3, #1
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	2275      	movs	r2, #117	; 0x75
 80011a4:	21d0      	movs	r1, #208	; 0xd0
 80011a6:	4823      	ldr	r0, [pc, #140]	; (8001234 <MPU6050_Init+0xb4>)
 80011a8:	f003 fbf0 	bl	800498c <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b68      	cmp	r3, #104	; 0x68
 80011b0:	d13b      	bne.n	800122a <MPU6050_Init+0xaa>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2301      	movs	r3, #1
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	1dbb      	adds	r3, r7, #6
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	226b      	movs	r2, #107	; 0x6b
 80011c8:	21d0      	movs	r1, #208	; 0xd0
 80011ca:	481a      	ldr	r0, [pc, #104]	; (8001234 <MPU6050_Init+0xb4>)
 80011cc:	f003 fae4 	bl	8004798 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80011d0:	2307      	movs	r3, #7
 80011d2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	1dbb      	adds	r3, r7, #6
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	2219      	movs	r2, #25
 80011e6:	21d0      	movs	r1, #208	; 0xd0
 80011e8:	4812      	ldr	r0, [pc, #72]	; (8001234 <MPU6050_Init+0xb4>)
 80011ea:	f003 fad5 	bl	8004798 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80011ee:	2300      	movs	r3, #0
 80011f0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2301      	movs	r3, #1
 8001202:	221c      	movs	r2, #28
 8001204:	21d0      	movs	r1, #208	; 0xd0
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <MPU6050_Init+0xb4>)
 8001208:	f003 fac6 	bl	8004798 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	1dbb      	adds	r3, r7, #6
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	221b      	movs	r2, #27
 8001222:	21d0      	movs	r1, #208	; 0xd0
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <MPU6050_Init+0xb4>)
 8001226:	f003 fab7 	bl	8004798 <HAL_I2C_Mem_Write>
	}

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000244 	.word	0x20000244

08001238 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_ADC1_Init+0x74>)
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <MX_ADC1_Init+0x78>)
 800124c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_ADC1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_ADC1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_ADC1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_ADC1_Init+0x74>)
 8001262:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001266:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_ADC1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_ADC1_Init+0x74>)
 8001270:	2201      	movs	r2, #1
 8001272:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_ADC1_Init+0x74>)
 8001276:	f001 ffa7 	bl	80031c8 <HAL_ADC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001280:	f001 f870 	bl	8002364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001284:	2308      	movs	r3, #8
 8001286:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001288:	2301      	movs	r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_ADC1_Init+0x74>)
 8001296:	f002 fa2f 	bl	80036f8 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012a0:	f001 f860 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000214 	.word	0x20000214
 80012b0:	40012400 	.word	0x40012400

080012b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_ADC_MspInit+0x6c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d121      	bne.n	8001318 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_ADC_MspInit+0x70>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8001304:	2301      	movs	r3, #1
 8001306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_ADC_MspInit+0x74>)
 8001314:	f002 ff30 	bl	8004178 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40012400 	.word	0x40012400
 8001324:	40021000 	.word	0x40021000
 8001328:	40010c00 	.word	0x40010c00

0800132c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_DMA_Init+0x38>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <MX_DMA_Init+0x38>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6153      	str	r3, [r2, #20]
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_DMA_Init+0x38>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	200f      	movs	r0, #15
 8001350:	f002 fc3d 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001354:	200f      	movs	r0, #15
 8001356:	f002 fc56 	bl	8003c06 <HAL_NVIC_EnableIRQ>

}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b54      	ldr	r3, [pc, #336]	; (80014d0 <MX_GPIO_Init+0x168>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <MX_GPIO_Init+0x168>)
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <MX_GPIO_Init+0x168>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001394:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <MX_GPIO_Init+0x168>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a4d      	ldr	r2, [pc, #308]	; (80014d0 <MX_GPIO_Init+0x168>)
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <MX_GPIO_Init+0x168>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <MX_GPIO_Init+0x168>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a47      	ldr	r2, [pc, #284]	; (80014d0 <MX_GPIO_Init+0x168>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b45      	ldr	r3, [pc, #276]	; (80014d0 <MX_GPIO_Init+0x168>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <MX_GPIO_Init+0x168>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a41      	ldr	r2, [pc, #260]	; (80014d0 <MX_GPIO_Init+0x168>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <MX_GPIO_Init+0x168>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_DIR_R_Pin|MOTOR_DIR_L_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013e2:	483c      	ldr	r0, [pc, #240]	; (80014d4 <MX_GPIO_Init+0x16c>)
 80013e4:	f003 f863 	bl	80044ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BATTERY_RELAY_Pin|ULTRA_CENTER_TRIG_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 6108 	mov.w	r1, #2176	; 0x880
 80013ee:	483a      	ldr	r0, [pc, #232]	; (80014d8 <MX_GPIO_Init+0x170>)
 80013f0:	f003 f85d 	bl	80044ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RING_Pin|FAN_Pin|ULTRA_RIGHT_TRIG_Pin|ULTRA_LEFT_TRIG_Pin
 80013f4:	2200      	movs	r2, #0
 80013f6:	f243 0136 	movw	r1, #12342	; 0x3036
 80013fa:	4838      	ldr	r0, [pc, #224]	; (80014dc <MX_GPIO_Init+0x174>)
 80013fc:	f003 f857 	bl	80044ae <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_DIR_R_Pin|MOTOR_DIR_L_Pin;
 8001400:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2302      	movs	r3, #2
 8001410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	482e      	ldr	r0, [pc, #184]	; (80014d4 <MX_GPIO_Init+0x16c>)
 800141a:	f002 fead 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Left_WE_Pin_A_Pin|Left_WE_Pin_B_Pin|Right_WE_Pin_B_Pin|Right_WE_Pin_A_Pin;
 800141e:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <MX_GPIO_Init+0x178>)
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4619      	mov	r1, r3
 8001432:	4829      	ldr	r0, [pc, #164]	; (80014d8 <MX_GPIO_Init+0x170>)
 8001434:	f002 fea0 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MODE_SELECTION_Pin|ULTRA_CENTER_ECHO_Pin;
 8001438:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800143c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	4822      	ldr	r0, [pc, #136]	; (80014d8 <MX_GPIO_Init+0x170>)
 800144e:	f002 fe93 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BATTERY_RELAY_Pin|ULTRA_CENTER_TRIG_Pin;
 8001452:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	481b      	ldr	r0, [pc, #108]	; (80014d8 <MX_GPIO_Init+0x170>)
 800146c:	f002 fe84 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PB4 PBPin */
  GPIO_InitStruct.Pin = LED_RING_Pin|FAN_Pin|ULTRA_RIGHT_TRIG_Pin|ULTRA_LEFT_TRIG_Pin
 8001470:	f243 0336 	movw	r3, #12342	; 0x3036
 8001474:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2302      	movs	r3, #2
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_GPIO_Init+0x174>)
 800148a:	f002 fe75 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ULTRA_LEFT_ECHO_Pin|ULTRA_RIGHT_ECHO_Pin;
 800148e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4619      	mov	r1, r3
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <MX_GPIO_Init+0x174>)
 80014a4:	f002 fe68 	bl	8004178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	200a      	movs	r0, #10
 80014ae:	f002 fb8e 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014b2:	200a      	movs	r0, #10
 80014b4:	f002 fba7 	bl	8003c06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2102      	movs	r1, #2
 80014bc:	2017      	movs	r0, #23
 80014be:	f002 fb86 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014c2:	2017      	movs	r0, #23
 80014c4:	f002 fb9f 	bl	8003c06 <HAL_NVIC_EnableIRQ>

}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	10110000 	.word	0x10110000

080014e4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_I2C2_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <MX_I2C2_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_I2C2_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_I2C2_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_I2C2_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_I2C2_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_I2C2_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_I2C2_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_I2C2_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_I2C2_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_I2C2_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_I2C2_Init+0x50>)
 8001522:	f002 fff5 	bl	8004510 <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 ff1a 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000244 	.word	0x20000244
 8001538:	40005800 	.word	0x40005800
 800153c:	000186a0 	.word	0x000186a0

08001540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <HAL_I2C_MspInit+0x74>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d124      	bne.n	80015aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_I2C_MspInit+0x78>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_I2C_MspInit+0x78>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_I2C_MspInit+0x78>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001578:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800157c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157e:	2312      	movs	r3, #18
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4619      	mov	r1, r3
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <HAL_I2C_MspInit+0x7c>)
 800158e:	f002 fdf3 	bl	8004178 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_I2C_MspInit+0x78>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_I2C_MspInit+0x78>)
 8001598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_I2C_MspInit+0x78>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40005800 	.word	0x40005800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010c00 	.word	0x40010c00

080015c0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015c8:	1d39      	adds	r1, r7, #4
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	2201      	movs	r2, #1
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <__io_putchar+0x20>)
 80015d2:	f006 f9b0 	bl	8007936 <HAL_UART_Transmit>
  return ch;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200007ac 	.word	0x200007ac

080015e4 <microDelay>:

void microDelay (uint16_t delay)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <microDelay+0x2c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80015f6:	bf00      	nop
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <microDelay+0x2c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3f9      	bcc.n	80015f8 <microDelay+0x14>
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	20000604 	.word	0x20000604

08001614 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 800162a:	2310      	movs	r3, #16
 800162c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2302      	movs	r3, #2
 8001634:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	482a      	ldr	r0, [pc, #168]	; (80016e8 <DHT11_Start+0xd4>)
 8001640:	f002 fd9a 	bl	8004178 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001644:	2200      	movs	r2, #0
 8001646:	2110      	movs	r1, #16
 8001648:	4827      	ldr	r0, [pc, #156]	; (80016e8 <DHT11_Start+0xd4>)
 800164a:	f002 ff30 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 800164e:	2014      	movs	r0, #20
 8001650:	f001 fd96 	bl	8003180 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001654:	2201      	movs	r2, #1
 8001656:	2110      	movs	r1, #16
 8001658:	4823      	ldr	r0, [pc, #140]	; (80016e8 <DHT11_Start+0xd4>)
 800165a:	f002 ff28 	bl	80044ae <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 800165e:	201e      	movs	r0, #30
 8001660:	f7ff ffc0 	bl	80015e4 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001668:	2301      	movs	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4619      	mov	r1, r3
 8001670:	481d      	ldr	r0, [pc, #116]	; (80016e8 <DHT11_Start+0xd4>)
 8001672:	f002 fd81 	bl	8004178 <HAL_GPIO_Init>
  microDelay (40);
 8001676:	2028      	movs	r0, #40	; 0x28
 8001678:	f7ff ffb4 	bl	80015e4 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800167c:	2110      	movs	r1, #16
 800167e:	481a      	ldr	r0, [pc, #104]	; (80016e8 <DHT11_Start+0xd4>)
 8001680:	f002 fefe 	bl	8004480 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10b      	bne.n	80016a2 <DHT11_Start+0x8e>
  {
    microDelay (80);
 800168a:	2050      	movs	r0, #80	; 0x50
 800168c:	f7ff ffaa 	bl	80015e4 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001690:	2110      	movs	r1, #16
 8001692:	4815      	ldr	r0, [pc, #84]	; (80016e8 <DHT11_Start+0xd4>)
 8001694:	f002 fef4 	bl	8004480 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <DHT11_Start+0x8e>
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
  }
  pMill = HAL_GetTick();
 80016a2:	f001 fd63 	bl	800316c <HAL_GetTick>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <DHT11_Start+0xd8>)
 80016aa:	6013      	str	r3, [r2, #0]
  cMill = HAL_GetTick();
 80016ac:	f001 fd5e 	bl	800316c <HAL_GetTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <DHT11_Start+0xdc>)
 80016b4:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMill + 2 > cMill)
 80016b6:	e004      	b.n	80016c2 <DHT11_Start+0xae>
  {
    cMill = HAL_GetTick();
 80016b8:	f001 fd58 	bl	800316c <HAL_GetTick>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <DHT11_Start+0xdc>)
 80016c0:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMill + 2 > cMill)
 80016c2:	2110      	movs	r1, #16
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <DHT11_Start+0xd4>)
 80016c6:	f002 fedb 	bl	8004480 <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <DHT11_Start+0xca>
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <DHT11_Start+0xd8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1c9a      	adds	r2, r3, #2
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <DHT11_Start+0xdc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d8ec      	bhi.n	80016b8 <DHT11_Start+0xa4>
  }
  return Response;
 80016de:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40010c00 	.word	0x40010c00
 80016ec:	200002a4 	.word	0x200002a4
 80016f0:	200002a8 	.word	0x200002a8

080016f4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e063      	b.n	80017c8 <DHT11_Read+0xd4>
  {
    pMill = HAL_GetTick();
 8001700:	f001 fd34 	bl	800316c <HAL_GetTick>
 8001704:	4603      	mov	r3, r0
 8001706:	4a34      	ldr	r2, [pc, #208]	; (80017d8 <DHT11_Read+0xe4>)
 8001708:	6013      	str	r3, [r2, #0]
    cMill = HAL_GetTick();
 800170a:	f001 fd2f 	bl	800316c <HAL_GetTick>
 800170e:	4603      	mov	r3, r0
 8001710:	4a32      	ldr	r2, [pc, #200]	; (80017dc <DHT11_Read+0xe8>)
 8001712:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMill + 2 > cMill)
 8001714:	e004      	b.n	8001720 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMill = HAL_GetTick();
 8001716:	f001 fd29 	bl	800316c <HAL_GetTick>
 800171a:	4603      	mov	r3, r0
 800171c:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <DHT11_Read+0xe8>)
 800171e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMill + 2 > cMill)
 8001720:	2110      	movs	r1, #16
 8001722:	482f      	ldr	r0, [pc, #188]	; (80017e0 <DHT11_Read+0xec>)
 8001724:	f002 feac 	bl	8004480 <HAL_GPIO_ReadPin>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <DHT11_Read+0x48>
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <DHT11_Read+0xe4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	1c9a      	adds	r2, r3, #2
 8001734:	4b29      	ldr	r3, [pc, #164]	; (80017dc <DHT11_Read+0xe8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8ec      	bhi.n	8001716 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800173c:	2028      	movs	r0, #40	; 0x28
 800173e:	f7ff ff51 	bl	80015e4 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001742:	2110      	movs	r1, #16
 8001744:	4826      	ldr	r0, [pc, #152]	; (80017e0 <DHT11_Read+0xec>)
 8001746:	f002 fe9b 	bl	8004480 <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10e      	bne.n	800176e <DHT11_Read+0x7a>
      b&= ~(1<<(7-a));
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2201      	movs	r2, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	b25b      	sxtb	r3, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	b25a      	sxtb	r2, r3
 8001762:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001766:	4013      	ands	r3, r2
 8001768:	b25b      	sxtb	r3, r3
 800176a:	71bb      	strb	r3, [r7, #6]
 800176c:	e00b      	b.n	8001786 <DHT11_Read+0x92>
    else
      b|= (1<<(7-a));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f1c3 0307 	rsb	r3, r3, #7
 8001774:	2201      	movs	r2, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	b25a      	sxtb	r2, r3
 800177c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001780:	4313      	orrs	r3, r2
 8001782:	b25b      	sxtb	r3, r3
 8001784:	71bb      	strb	r3, [r7, #6]
    pMill = HAL_GetTick();
 8001786:	f001 fcf1 	bl	800316c <HAL_GetTick>
 800178a:	4603      	mov	r3, r0
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <DHT11_Read+0xe4>)
 800178e:	6013      	str	r3, [r2, #0]
    cMill = HAL_GetTick();
 8001790:	f001 fcec 	bl	800316c <HAL_GetTick>
 8001794:	4603      	mov	r3, r0
 8001796:	4a11      	ldr	r2, [pc, #68]	; (80017dc <DHT11_Read+0xe8>)
 8001798:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMill + 2 > cMill)
 800179a:	e004      	b.n	80017a6 <DHT11_Read+0xb2>
    {  // wait for the pin to go low
      cMill = HAL_GetTick();
 800179c:	f001 fce6 	bl	800316c <HAL_GetTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <DHT11_Read+0xe8>)
 80017a4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMill + 2 > cMill)
 80017a6:	2110      	movs	r1, #16
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <DHT11_Read+0xec>)
 80017aa:	f002 fe69 	bl	8004480 <HAL_GPIO_ReadPin>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <DHT11_Read+0xce>
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <DHT11_Read+0xe4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	1c9a      	adds	r2, r3, #2
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <DHT11_Read+0xe8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d8ec      	bhi.n	800179c <DHT11_Read+0xa8>
  for (a=0;a<8;a++)
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	3301      	adds	r3, #1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	d998      	bls.n	8001700 <DHT11_Read+0xc>
    }
  }
  return b;
 80017ce:	79bb      	ldrb	r3, [r7, #6]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002a4 	.word	0x200002a4
 80017dc:	200002a8 	.word	0x200002a8
 80017e0:	40010c00 	.word	0x40010c00

080017e4 <DHT11_Data>:

void DHT11_Data()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	        RHI = DHT11_Read(); // Relative humidity integral
 80017e8:	f7ff ff84 	bl	80016f4 <DHT11_Read>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <DHT11_Data+0x8c>)
 80017f2:	801a      	strh	r2, [r3, #0]
	        RHD = DHT11_Read(); // Relative humidity decimal
 80017f4:	f7ff ff7e 	bl	80016f4 <DHT11_Read>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <DHT11_Data+0x90>)
 80017fe:	801a      	strh	r2, [r3, #0]
	        TCI = DHT11_Read(); // Celsius integral
 8001800:	f7ff ff78 	bl	80016f4 <DHT11_Read>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <DHT11_Data+0x94>)
 800180a:	801a      	strh	r2, [r3, #0]
	        TCD = DHT11_Read(); // Celsius decimal
 800180c:	f7ff ff72 	bl	80016f4 <DHT11_Read>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <DHT11_Data+0x98>)
 8001816:	801a      	strh	r2, [r3, #0]
	        SUM = DHT11_Read(); // Check sum
 8001818:	f7ff ff6c 	bl	80016f4 <DHT11_Read>
 800181c:	4603      	mov	r3, r0
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <DHT11_Data+0x9c>)
 8001822:	801a      	strh	r2, [r3, #0]
	        if (RHI + RHD + TCI + TCD == SUM)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <DHT11_Data+0x8c>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <DHT11_Data+0x90>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <DHT11_Data+0x94>)
 8001832:	8812      	ldrh	r2, [r2, #0]
 8001834:	4413      	add	r3, r2
 8001836:	4a11      	ldr	r2, [pc, #68]	; (800187c <DHT11_Data+0x98>)
 8001838:	8812      	ldrh	r2, [r2, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a10      	ldr	r2, [pc, #64]	; (8001880 <DHT11_Data+0x9c>)
 800183e:	8812      	ldrh	r2, [r2, #0]
 8001840:	4293      	cmp	r3, r2
 8001842:	d113      	bne.n	800186c <DHT11_Data+0x88>
//	          tCelsius = (float)TCI + (float)(TCD/10.0);
//	          tFahrenheit = tCelsius * 9/5 + 32;
//	          RH = (float)RHI + (float)(RHD/10.0);

	          // Convert temperature and humidity to strings
	            sprintf(string, "Temperature: %d.%d C\r\n", TCI, TCD);
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <DHT11_Data+0x94>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <DHT11_Data+0x98>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	490d      	ldr	r1, [pc, #52]	; (8001884 <DHT11_Data+0xa0>)
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <DHT11_Data+0xa4>)
 8001852:	f007 fb4b 	bl	8008eec <siprintf>
	            //sprintf(hum_str, "Humidity: %.2f%%\r\n", RH);

	            // Send temperature and humidity data over UART1
//	              UART1_Send((uint8_t *)temp_str, strlen(temp_str));
//	              UART1_Send((uint8_t *)hum_str, strlen(hum_str));
	            HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <DHT11_Data+0xa4>)
 8001858:	f7fe fc7a 	bl	8000150 <strlen>
 800185c:	4603      	mov	r3, r0
 800185e:	b29a      	uxth	r2, r3
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
 8001864:	4908      	ldr	r1, [pc, #32]	; (8001888 <DHT11_Data+0xa4>)
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <DHT11_Data+0xa8>)
 8001868:	f006 f865 	bl	8007936 <HAL_UART_Transmit>

	          // Can use tCelsius, tFahrenheit and RH for any purposes
	        }
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000298 	.word	0x20000298
 8001874:	2000029a 	.word	0x2000029a
 8001878:	2000029c 	.word	0x2000029c
 800187c:	2000029e 	.word	0x2000029e
 8001880:	200002a0 	.word	0x200002a0
 8001884:	0800ca80 	.word	0x0800ca80
 8001888:	200002ec 	.word	0x200002ec
 800188c:	200007ac 	.word	0x200007ac

08001890 <main>:

int main(void)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b0a9      	sub	sp, #164	; 0xa4
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001896:	f001 fc11 	bl	80030bc <HAL_Init>

  /* USER CODE BEGIN Init */
  PSN=0;
 800189a:	4baa      	ldr	r3, [pc, #680]	; (8001b44 <main+0x2b4>)
 800189c:	2200      	movs	r2, #0
 800189e:	801a      	strh	r2, [r3, #0]
  left_forward_pulse_count=0, left_reverse_pulse_count=0,right_forward_pulse_count=0,right_reverse_pulse_count=0;
 80018a0:	4ba9      	ldr	r3, [pc, #676]	; (8001b48 <main+0x2b8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	4ba9      	ldr	r3, [pc, #676]	; (8001b4c <main+0x2bc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	4ba8      	ldr	r3, [pc, #672]	; (8001b50 <main+0x2c0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	4ba8      	ldr	r3, [pc, #672]	; (8001b54 <main+0x2c4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
  left_forward_turns=0, left_reverse_turns=0, right_forward_turns=0,right_reverse_turns=0;
 80018b8:	4ba7      	ldr	r3, [pc, #668]	; (8001b58 <main+0x2c8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	4ba7      	ldr	r3, [pc, #668]	; (8001b5c <main+0x2cc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4ba6      	ldr	r3, [pc, #664]	; (8001b60 <main+0x2d0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4ba6      	ldr	r3, [pc, #664]	; (8001b64 <main+0x2d4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
  left_ticks=0,right_ticks=0;
 80018d0:	4ba5      	ldr	r3, [pc, #660]	; (8001b68 <main+0x2d8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	4ba5      	ldr	r3, [pc, #660]	; (8001b6c <main+0x2dc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 f9fe 	bl	8001cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f7ff fd42 	bl	8001368 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e4:	f7ff fd22 	bl	800132c <MX_DMA_Init>
  MX_ADC1_Init();
 80018e8:	f7ff fca6 	bl	8001238 <MX_ADC1_Init>
  MX_TIM2_Init();
 80018ec:	f001 f8a2 	bl	8002a34 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80018f0:	f001 fac6 	bl	8002e80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018f4:	f001 faee 	bl	8002ed4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80018f8:	f001 f84c 	bl	8002994 <MX_TIM1_Init>
  MX_TIM3_Init();
 80018fc:	f001 f91c 	bl	8002b38 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001900:	f001 f968 	bl	8002bd4 <MX_TIM4_Init>
  MX_I2C2_Init();
 8001904:	f7ff fdee 	bl	80014e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


  Ringbuf_init();
 8001908:	f000 fe44 	bl	8002594 <Ringbuf_init>

  /* RGB */
  Set_Brightness(10);
 800190c:	200a      	movs	r0, #10
 800190e:	f000 fdc9 	bl	80024a4 <Set_Brightness>
  Set_RGB_Red();
 8001912:	f000 fd6d 	bl	80023f0 <Set_RGB_Red>

  MPU6050_Init();
 8001916:	f7ff fc33 	bl	8001180 <MPU6050_Init>

  /*	Ultrasonic */
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001920:	4893      	ldr	r0, [pc, #588]	; (8001b70 <main+0x2e0>)
 8001922:	f002 fdc4 	bl	80044ae <HAL_GPIO_WritePin>
   HAL_Delay(300);
 8001926:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800192a:	f001 fc29 	bl	8003180 <HAL_Delay>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001934:	488e      	ldr	r0, [pc, #568]	; (8001b70 <main+0x2e0>)
 8001936:	f002 fdba 	bl	80044ae <HAL_GPIO_WritePin>
   HAL_TIM_Base_Start(&htim1);
 800193a:	488e      	ldr	r0, [pc, #568]	; (8001b74 <main+0x2e4>)
 800193c:	f004 fcf6 	bl	800632c <HAL_TIM_Base_Start>
   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001946:	488a      	ldr	r0, [pc, #552]	; (8001b70 <main+0x2e0>)
 8001948:	f002 fdb1 	bl	80044ae <HAL_GPIO_WritePin>

  /* Pi console and Debug console test*/
  HAL_UART_Transmit_IT(&huart1, "Debug console is ready", sizeof("Debug console is ready"));
 800194c:	2217      	movs	r2, #23
 800194e:	498a      	ldr	r1, [pc, #552]	; (8001b78 <main+0x2e8>)
 8001950:	488a      	ldr	r0, [pc, #552]	; (8001b7c <main+0x2ec>)
 8001952:	f006 f882 	bl	8007a5a <HAL_UART_Transmit_IT>
  //printf("Pi Console is ready");
 HAL_UART_Transmit_IT(&huart2, "Pi console is ready", sizeof("Pi console is ready"));
 8001956:	2214      	movs	r2, #20
 8001958:	4989      	ldr	r1, [pc, #548]	; (8001b80 <main+0x2f0>)
 800195a:	488a      	ldr	r0, [pc, #552]	; (8001b84 <main+0x2f4>)
 800195c:	f006 f87d 	bl	8007a5a <HAL_UART_Transmit_IT>


  /* 100ms timer */
  HAL_TIM_Base_Start_IT(&htim3);
 8001960:	4889      	ldr	r0, [pc, #548]	; (8001b88 <main+0x2f8>)
 8001962:	f004 fd2d 	bl	80063c0 <HAL_TIM_Base_Start_IT>

  /* Motor PWM Motor */
  HAL_TIM_Base_Start(&htim2);
 8001966:	4889      	ldr	r0, [pc, #548]	; (8001b8c <main+0x2fc>)
 8001968:	f004 fce0 	bl	800632c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800196c:	2100      	movs	r1, #0
 800196e:	4887      	ldr	r0, [pc, #540]	; (8001b8c <main+0x2fc>)
 8001970:	f004 fdfe 	bl	8006570 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001974:	2104      	movs	r1, #4
 8001976:	4885      	ldr	r0, [pc, #532]	; (8001b8c <main+0x2fc>)
 8001978:	f004 fdfa 	bl	8006570 <HAL_TIM_PWM_Start>

  // Reset Motor PWM at the begining
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 800197c:	4b83      	ldr	r3, [pc, #524]	; (8001b8c <main+0x2fc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <main+0x2fc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2200      	movs	r2, #0
 800198a:	635a      	str	r2, [r3, #52]	; 0x34

  Set_RGB_Yellow();
 800198c:	f000 fd6c 	bl	8002468 <Set_RGB_Yellow>
//		HAL_Delay(100);




		while(IsDataAvailable()){
 8001990:	e047      	b.n	8001a22 <main+0x192>

		rx_frame[frame_length]=Uart_read();
 8001992:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <main+0x300>)
 8001994:	681c      	ldr	r4, [r3, #0]
 8001996:	f000 fe55 	bl	8002644 <Uart_read>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	4b7d      	ldr	r3, [pc, #500]	; (8001b94 <main+0x304>)
 80019a0:	551a      	strb	r2, [r3, r4]
		rx_print_frame[frame_length]=rx_frame[frame_length];
 80019a2:	4b7b      	ldr	r3, [pc, #492]	; (8001b90 <main+0x300>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b7a      	ldr	r3, [pc, #488]	; (8001b90 <main+0x300>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	497a      	ldr	r1, [pc, #488]	; (8001b94 <main+0x304>)
 80019ac:	5c89      	ldrb	r1, [r1, r2]
 80019ae:	4a7a      	ldr	r2, [pc, #488]	; (8001b98 <main+0x308>)
 80019b0:	54d1      	strb	r1, [r2, r3]
		if(rx_frame[10]==0x10)
 80019b2:	4b78      	ldr	r3, [pc, #480]	; (8001b94 <main+0x304>)
 80019b4:	7a9b      	ldrb	r3, [r3, #10]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d105      	bne.n	80019c6 <main+0x136>
		{
			right_ticks=0;
 80019ba:	4b6c      	ldr	r3, [pc, #432]	; (8001b6c <main+0x2dc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
			left_ticks=0;
 80019c0:	4b69      	ldr	r3, [pc, #420]	; (8001b68 <main+0x2d8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
		}
		if (rx_frame[6]==0x10)
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <main+0x304>)
 80019c8:	799b      	ldrb	r3, [r3, #6]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d105      	bne.n	80019da <main+0x14a>
		{
			// Reseting the wheel encoder data
		left_forward_pulse_count, left_reverse_pulse_count, right_forward_pulse_count, right_reverse_pulse_count=0;
 80019ce:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <main+0x2c4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
		left_forward_turns, left_reverse_turns, right_forward_turns, right_reverse_turns, right_ticks, left_ticks=0;
 80019d4:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <main+0x2d8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
		}
		if(rx_frame[frame_length] == 0xF8)
 80019da:	4b6d      	ldr	r3, [pc, #436]	; (8001b90 <main+0x300>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6d      	ldr	r2, [pc, #436]	; (8001b94 <main+0x304>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	2bf8      	cmp	r3, #248	; 0xf8
 80019e4:	d118      	bne.n	8001a18 <main+0x188>
			// Print the received data from Pi
//			 HAL_UART_Transmit_IT(&huart1, rx_print_frame, (frame_length+1));
//			 HAL_Delay(7);

			// Storing packet type for further processing
			packetType = rx_frame[4];
 80019e6:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <main+0x304>)
 80019e8:	791a      	ldrb	r2, [r3, #4]
 80019ea:	4b6c      	ldr	r3, [pc, #432]	; (8001b9c <main+0x30c>)
 80019ec:	701a      	strb	r2, [r3, #0]

			// Validate Frame
			uint8_t frameStatus=validate_frame(rx_frame);
 80019ee:	4869      	ldr	r0, [pc, #420]	; (8001b94 <main+0x304>)
 80019f0:	f000 fb0e 	bl	8002010 <validate_frame>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

			//sendResponse(rx_frame, frameStatus);
		    if((frameStatus==Frame_Success) && (packetType==CMD))
 80019fa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	d106      	bne.n	8001a10 <main+0x180>
 8001a02:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <main+0x30c>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2bf0      	cmp	r3, #240	; 0xf0
 8001a08:	d102      	bne.n	8001a10 <main+0x180>
			{

		    	ResponseCallBack(rx_frame);
 8001a0a:	4862      	ldr	r0, [pc, #392]	; (8001b94 <main+0x304>)
 8001a0c:	f000 fb76 	bl	80020fc <ResponseCallBack>
				//sendResponse(rx_frame, RESP);
			}

			frame_length=0;
 8001a10:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <main+0x300>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e004      	b.n	8001a22 <main+0x192>
		}
		else
		{
			frame_length++;
 8001a18:	4b5d      	ldr	r3, [pc, #372]	; (8001b90 <main+0x300>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	4a5c      	ldr	r2, [pc, #368]	; (8001b90 <main+0x300>)
 8001a20:	6013      	str	r3, [r2, #0]
		while(IsDataAvailable()){
 8001a22:	f000 fe3f 	bl	80026a4 <IsDataAvailable>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1b2      	bne.n	8001992 <main+0x102>
		}
		}

		      float R1 = 30000.0;
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <main+0x310>)
 8001a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  float R2 = 4664.0;
 8001a32:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <main+0x314>)
 8001a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			  HAL_ADC_Start(&hadc1);
 8001a38:	485b      	ldr	r0, [pc, #364]	; (8001ba8 <main+0x318>)
 8001a3a:	f001 fc9d 	bl	8003378 <HAL_ADC_Start>

			  // Wait for ADC conversion to complete
			  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 8001a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a42:	4859      	ldr	r0, [pc, #356]	; (8001ba8 <main+0x318>)
 8001a44:	f001 fd46 	bl	80034d4 <HAL_ADC_PollForConversion>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 8134 	bne.w	8001cb8 <main+0x428>
			      // ADC conversion error
			      continue; // Skip this iteration and try again
			  }

			  // Read ADC value
			  uint16_t sensorValue = HAL_ADC_GetValue(&hadc1);
 8001a50:	4855      	ldr	r0, [pc, #340]	; (8001ba8 <main+0x318>)
 8001a52:	f001 fe45 	bl	80036e0 <HAL_ADC_GetValue>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

			  // Calculate voltage using voltage divider circuit
			  // Assuming Vref = 3.3V
			  float voltage = (float)sensorValue * (3.28f / 4095.0f); // Convert ADC value to voltage
 8001a5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f937 	bl	8000cd4 <__aeabi_ui2f>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4950      	ldr	r1, [pc, #320]	; (8001bac <main+0x31c>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f98a 	bl	8000d84 <__aeabi_fmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			  // Calculate actual battery voltage using voltage divider formula
			  // Vbattery = Vadc * (R1 + R2) / R2
			  float actualBatteryVoltage = voltage * ((R1 + R2) / R2);
 8001a76:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001a7a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001a7e:	f7ff f879 	bl	8000b74 <__addsf3>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fa2f 	bl	8000eec <__aeabi_fdiv>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4619      	mov	r1, r3
 8001a92:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a96:	f7ff f975 	bl	8000d84 <__aeabi_fmul>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
			  // Calculate battery percentage within the range of 1.2V to 20.8V
			  float minVoltage = 20.45f;
 8001a9e:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <main+0x320>)
 8001aa0:	67bb      	str	r3, [r7, #120]	; 0x78
			  float maxVoltage =22.11f;
 8001aa2:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <main+0x324>)
 8001aa4:	677b      	str	r3, [r7, #116]	; 0x74
			  float pct;

			  if (actualBatteryVoltage <= minVoltage) {
 8001aa6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001aa8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001aaa:	f7ff fb13 	bl	80010d4 <__aeabi_fcmple>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <main+0x22e>
			      pct = 0.0f;
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001abc:	e021      	b.n	8001b02 <main+0x272>
			  } else if (actualBatteryVoltage >= maxVoltage) {
 8001abe:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001ac0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001ac2:	f7ff fb11 	bl	80010e8 <__aeabi_fcmpge>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <main+0x244>
			      pct = 100.0f;
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <main+0x328>)
 8001ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ad2:	e016      	b.n	8001b02 <main+0x272>
			  } else {
			      pct = ((actualBatteryVoltage - minVoltage) / (maxVoltage - minVoltage)) * 100.0f;
 8001ad4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ad6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001ad8:	f7ff f84a 	bl	8000b70 <__aeabi_fsub>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461c      	mov	r4, r3
 8001ae0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ae2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ae4:	f7ff f844 	bl	8000b70 <__aeabi_fsub>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4619      	mov	r1, r3
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff f9fd 	bl	8000eec <__aeabi_fdiv>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4930      	ldr	r1, [pc, #192]	; (8001bb8 <main+0x328>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f944 	bl	8000d84 <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			  // Store the percentages in an array
			      static float percentages[7] = {0}; // Array to store three percentages
			      static uint8_t index = 0; // Index to keep track of the current reading


			      percentages[index] = pct; // Store the current percentage
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <main+0x32c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <main+0x330>)
 8001b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			      index = (index + 1)%7; // Increment index
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <main+0x32c>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <main+0x334>)
 8001b1a:	fb83 1302 	smull	r1, r3, r3, r2
 8001b1e:	4413      	add	r3, r2
 8001b20:	1099      	asrs	r1, r3, #2
 8001b22:	17d3      	asrs	r3, r2, #31
 8001b24:	1ac9      	subs	r1, r1, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	1a5b      	subs	r3, r3, r1
 8001b2c:	1ad1      	subs	r1, r2, r3
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <main+0x32c>)
 8001b32:	701a      	strb	r2, [r3, #0]


			      // Calculate the average percentage
			      float sum = 0.0f;
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			      for (int i = 0; i < 7; i++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b42:	e053      	b.n	8001bec <main+0x35c>
 8001b44:	200002e8 	.word	0x200002e8
 8001b48:	20000320 	.word	0x20000320
 8001b4c:	20000324 	.word	0x20000324
 8001b50:	20000328 	.word	0x20000328
 8001b54:	2000032c 	.word	0x2000032c
 8001b58:	20000330 	.word	0x20000330
 8001b5c:	20000334 	.word	0x20000334
 8001b60:	20000338 	.word	0x20000338
 8001b64:	2000033c 	.word	0x2000033c
 8001b68:	20000344 	.word	0x20000344
 8001b6c:	20000340 	.word	0x20000340
 8001b70:	40010800 	.word	0x40010800
 8001b74:	20000604 	.word	0x20000604
 8001b78:	0800ca98 	.word	0x0800ca98
 8001b7c:	20000768 	.word	0x20000768
 8001b80:	0800cab0 	.word	0x0800cab0
 8001b84:	200007ac 	.word	0x200007ac
 8001b88:	20000694 	.word	0x20000694
 8001b8c:	2000064c 	.word	0x2000064c
 8001b90:	200002e4 	.word	0x200002e4
 8001b94:	200002ac 	.word	0x200002ac
 8001b98:	200002c8 	.word	0x200002c8
 8001b9c:	200002e1 	.word	0x200002e1
 8001ba0:	46ea6000 	.word	0x46ea6000
 8001ba4:	4591c000 	.word	0x4591c000
 8001ba8:	20000214 	.word	0x20000214
 8001bac:	3a51f8a5 	.word	0x3a51f8a5
 8001bb0:	41a3999a 	.word	0x41a3999a
 8001bb4:	41b0e148 	.word	0x41b0e148
 8001bb8:	42c80000 	.word	0x42c80000
 8001bbc:	20000348 	.word	0x20000348
 8001bc0:	2000034c 	.word	0x2000034c
 8001bc4:	92492493 	.word	0x92492493
			          sum += percentages[i];
 8001bc8:	4a3c      	ldr	r2, [pc, #240]	; (8001cbc <main+0x42c>)
 8001bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001bd8:	f7fe ffcc 	bl	8000b74 <__addsf3>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			      for (int i = 0; i < 7; i++) {
 8001be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001be6:	3301      	adds	r3, #1
 8001be8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	dde9      	ble.n	8001bc8 <main+0x338>
			      }
			      float avgPercentage = sum / 7.0f;
 8001bf4:	4932      	ldr	r1, [pc, #200]	; (8001cc0 <main+0x430>)
 8001bf6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001bfa:	f7ff f977 	bl	8000eec <__aeabi_fdiv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
//			      avgPercentage = (smoothingFactor * avgPercentage1) + ((1.0f - smoothingFactor) * avgPercentage);
			      // Calculate the average percentage
			      //int avgPercentage = (percentages[0] + percentages[1] + percentages[2]) / 3;
			  // Print voltage and percentage
			   static float prevPercentage = 0.0f;
			  const float threshold = 3.0f;
 8001c04:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <main+0x434>)
 8001c06:	673b      	str	r3, [r7, #112]	; 0x70
			  // Check if the new percentage is within the acceptable range of the previous value
			  float diff = fabs(avgPercentage - prevPercentage);
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <main+0x438>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001c12:	f7fe ffad 	bl	8000b70 <__aeabi_fsub>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
			  if (diff <= threshold) {
 8001c1e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001c20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c22:	f7ff fa57 	bl	80010d4 <__aeabi_fcmple>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <main+0x3a4>
			      // If the difference is within the threshold, use the previous value
			      avgPercentage = prevPercentage;
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <main+0x438>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			  }

			  // Store the current percentage for the next iteration
			  prevPercentage = avgPercentage;
 8001c34:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <main+0x438>)
 8001c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c3a:	6013      	str	r3, [r2, #0]
			  char msg[100];
			  //sprintf(msg, "Measured Voltage: %.2f V, Actual Battery Voltage: %.2f V, Battery Percentage: %.2f%%\n", voltage, actualBatteryVoltage, pct);
		      //sprintf(msg, "Percentage: %d %%\r\n", avgPercentage);
			  sprintf(msg, "Percentage: %.1f %%\r\n",avgPercentage);
 8001c3c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001c40:	f7fe fbf2 	bl	8000428 <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	1d38      	adds	r0, r7, #4
 8001c4a:	4920      	ldr	r1, [pc, #128]	; (8001ccc <main+0x43c>)
 8001c4c:	f007 f94e 	bl	8008eec <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fa7c 	bl	8000150 <strlen>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	1d39      	adds	r1, r7, #4
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	481b      	ldr	r0, [pc, #108]	; (8001cd0 <main+0x440>)
 8001c64:	f005 fe67 	bl	8007936 <HAL_UART_Transmit>
			  sprintf(msg, "Actual Battery Voltage: %.2f V\r\n", actualBatteryVoltage);
 8001c68:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001c6a:	f7fe fbdd 	bl	8000428 <__aeabi_f2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	1d38      	adds	r0, r7, #4
 8001c74:	4917      	ldr	r1, [pc, #92]	; (8001cd4 <main+0x444>)
 8001c76:	f007 f939 	bl	8008eec <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fa67 	bl	8000150 <strlen>
 8001c82:	4603      	mov	r3, r0
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	1d39      	adds	r1, r7, #4
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	4810      	ldr	r0, [pc, #64]	; (8001cd0 <main+0x440>)
 8001c8e:	f005 fe52 	bl	8007936 <HAL_UART_Transmit>
			  if(DHT11_Start())
 8001c92:	f7ff fcbf 	bl	8001614 <DHT11_Start>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <main+0x410>
			  {
				  DHT11_Data();
 8001c9c:	f7ff fda2 	bl	80017e4 <DHT11_Data>
			  }
			  // If it's the first startup, set the flag to false after the first iteration
			     if (isFirstStartup) {
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <main+0x448>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <main+0x41e>
			         isFirstStartup = false;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <main+0x448>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
			     }
			  // Delay before next iteration
			  HAL_Delay(2000); // Adjust the delay as needed
 8001cae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cb2:	f001 fa65 	bl	8003180 <HAL_Delay>
 8001cb6:	e66b      	b.n	8001990 <main+0x100>
			      continue; // Skip this iteration and try again
 8001cb8:	bf00      	nop
	{
 8001cba:	e669      	b.n	8001990 <main+0x100>
 8001cbc:	2000034c 	.word	0x2000034c
 8001cc0:	40e00000 	.word	0x40e00000
 8001cc4:	40400000 	.word	0x40400000
 8001cc8:	20000368 	.word	0x20000368
 8001ccc:	0800cac4 	.word	0x0800cac4
 8001cd0:	200007ac 	.word	0x200007ac
 8001cd4:	0800cadc 	.word	0x0800cadc
 8001cd8:	20000016 	.word	0x20000016

08001cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b094      	sub	sp, #80	; 0x50
 8001ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce6:	2228      	movs	r2, #40	; 0x28
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f006 fa84 	bl	80081f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d28:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fd1a 	bl	800576c <HAL_RCC_OscConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d3e:	f000 fb11 	bl	8002364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d42:	230f      	movs	r3, #15
 8001d44:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 ff86 	bl	8005c70 <HAL_RCC_ClockConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d6a:	f000 fafb 	bl	8002364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d76:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 f910 	bl	8005fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d86:	f000 faed 	bl	8002364 <Error_Handler>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3750      	adds	r7, #80	; 0x50
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b097      	sub	sp, #92	; 0x5c
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	6078      	str	r0, [r7, #4]

	//rainbow_effect_left();
	//HAL_UART_Transmit_IT(&huart2, "1000", sizeof("1000"));
	//HAL_UART_Transmit(&huart2, 10, 22,25);

	tx_frame[14]=tx_frame[13]=tx_frame[15]=tx_frame[16]=tx_frame[17]=tx_frame[18]=0x00;
 8001d9c:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	749a      	strb	r2, [r3, #18]
 8001da2:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001da4:	7c9a      	ldrb	r2, [r3, #18]
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001da8:	745a      	strb	r2, [r3, #17]
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dac:	7c5a      	ldrb	r2, [r3, #17]
 8001dae:	4b4a      	ldr	r3, [pc, #296]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001db0:	741a      	strb	r2, [r3, #16]
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001db4:	7c1a      	ldrb	r2, [r3, #16]
 8001db6:	4b48      	ldr	r3, [pc, #288]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001db8:	73da      	strb	r2, [r3, #15]
 8001dba:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dbc:	7bda      	ldrb	r2, [r3, #15]
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dc0:	735a      	strb	r2, [r3, #13]
 8001dc2:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dc4:	7b5a      	ldrb	r2, [r3, #13]
 8001dc6:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dc8:	739a      	strb	r2, [r3, #14]
	//HAL_UART_Transmit(&huart2, tx_frame, 22,25);
	//HAL_Delay(7);
*/


	tx_frame[11]=0;
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	72da      	strb	r2, [r3, #11]
	tx_frame[15]=0;
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	73da      	strb	r2, [r3, #15]
	tx_frame[12]=tx_frame[13]=tx_frame[14]=tx_frame[16]=tx_frame[17]=tx_frame[18]=0;
 8001dd6:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	749a      	strb	r2, [r3, #18]
 8001ddc:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dde:	7c9a      	ldrb	r2, [r3, #18]
 8001de0:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001de2:	745a      	strb	r2, [r3, #17]
 8001de4:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001de6:	7c5a      	ldrb	r2, [r3, #17]
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dea:	741a      	strb	r2, [r3, #16]
 8001dec:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dee:	7c1a      	ldrb	r2, [r3, #16]
 8001df0:	4b39      	ldr	r3, [pc, #228]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001df2:	739a      	strb	r2, [r3, #14]
 8001df4:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001df6:	7b9a      	ldrb	r2, [r3, #14]
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dfa:	735a      	strb	r2, [r3, #13]
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dfe:	7b5a      	ldrb	r2, [r3, #13]
 8001e00:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e02:	731a      	strb	r2, [r3, #12]

	// Update sensor type and ID
	tx_frame[5]  = 0x02;
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e06:	2202      	movs	r2, #2
 8001e08:	715a      	strb	r2, [r3, #5]
	tx_frame[6]  = 0x00;
 8001e0a:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	719a      	strb	r2, [r3, #6]

	if(left_forward_turns>=left_reverse_turns)
 8001e10:	4b32      	ldr	r3, [pc, #200]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	db0a      	blt.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x9e>
	{
		tx_frame[15] = 0x0;
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	73da      	strb	r2, [r3, #15]
		left_ticks = left_forward_turns - left_reverse_turns;
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e009      	b.n	8001e46 <HAL_TIM_PeriodElapsedCallback+0xb2>

	}
	else
	{
		tx_frame[15] = 0x1;
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	73da      	strb	r2, [r3, #15]
		left_ticks = left_reverse_turns - left_forward_turns;
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	4a28      	ldr	r2, [pc, #160]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e44:	6013      	str	r3, [r2, #0]

	}


	if(right_forward_turns >= right_reverse_turns)
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	db0a      	blt.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0xd4>
	{
		tx_frame[11] = 0x0;
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	72da      	strb	r2, [r3, #11]
		right_ticks = right_forward_turns - right_reverse_turns;
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e009      	b.n	8001e7c <HAL_TIM_PeriodElapsedCallback+0xe8>

	}
	else
	{
		tx_frame[11] = 0x1;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	72da      	strb	r2, [r3, #11]
		right_ticks = right_reverse_turns - right_forward_turns;
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e7a:	6013      	str	r3, [r2, #0]
//char buffer[16];
	//int i = 15;
	//left_ticks=50;
	//right_ticks=30;
	//printf("Hi");
	HAL_Delay(10);
 8001e7c:	200a      	movs	r0, #10
 8001e7e:	f001 f97f 	bl	8003180 <HAL_Delay>
 // uint8_t wheelEncoder[]={right_forward_turns,right_reverse_turns,left_forward_turns,left_reverse_turns};
 // HAL_UART_Transmit (&huart2, wheelEncoder, sizeof (wheelEncoder), HAL_MAX_DELAY);

  	  	  //int data[] = {right_forward_turns, right_reverse_turns, left_forward_turns, left_reverse_turns};
			int data[] = {right_forward_pulse_count, right_reverse_pulse_count, left_forward_pulse_count, left_reverse_pulse_count};
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	647b      	str	r3, [r7, #68]	; 0x44
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
  	      char buffer[50];  // Adjust the buffer size accordingly

  	      // Convert integers to string
  	      //int len = sprintf(buffer, "%d,%d,%d,%d\n", data[0], data[1], data[2], data[3]);
			int len = sprintf(buffer, "%d,%d,%d,%d\n", data[0], data[1], data[2], data[3]);
 8001e9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e9c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ea2:	f107 0008 	add.w	r0, r7, #8
 8001ea6:	9201      	str	r2, [sp, #4]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	4623      	mov	r3, r4
 8001eac:	460a      	mov	r2, r1
 8001eae:	4915      	ldr	r1, [pc, #84]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001eb0:	f007 f81c 	bl	8008eec <siprintf>
 8001eb4:	64f8      	str	r0, [r7, #76]	; 0x4c
  	      // Send data over UART
  	      HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8001eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	f107 0108 	add.w	r1, r7, #8
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	4811      	ldr	r0, [pc, #68]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001ec4:	f005 fd37 	bl	8007936 <HAL_UART_Transmit>
//	HAL_UART_Transmit (&huart2, data4, sizeof (data4), 10);
//	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\r\n", left_reverse_turns), 500);
	/*While run on main application we need to change the right forward pulse count and right_reverse_pulse count to right and left ticks*/
	//HAL_UART_Transmit_IT(&huart1, "Narsi\r\n", sizeof("Narsi\r\n"));
	//HAL_UART_Transmit(&huart2, 1000, 1,25);
	HAL_Delay(6);
 8001ec8:	2006      	movs	r0, #6
 8001eca:	f001 f959 	bl	8003180 <HAL_Delay>

}
 8001ece:	bf00      	nop
 8001ed0:	3754      	adds	r7, #84	; 0x54
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000330 	.word	0x20000330
 8001ee0:	20000334 	.word	0x20000334
 8001ee4:	20000344 	.word	0x20000344
 8001ee8:	20000338 	.word	0x20000338
 8001eec:	2000033c 	.word	0x2000033c
 8001ef0:	20000340 	.word	0x20000340
 8001ef4:	20000328 	.word	0x20000328
 8001ef8:	2000032c 	.word	0x2000032c
 8001efc:	20000320 	.word	0x20000320
 8001f00:	20000324 	.word	0x20000324
 8001f04:	0800cb00 	.word	0x0800cb00
 8001f08:	200007ac 	.word	0x200007ac

08001f0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
	//HAL_UART_Transmit(&huart1, "Debug int console ", sizeof("Debug int console "),10);

	if (GPIO_Pin == Right_WE_Pin_A_Pin && HAL_GPIO_ReadPin(GPIOA,Right_WE_Pin_B_Pin) == GPIO_PIN_RESET)
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f1c:	d10d      	bne.n	8001f3a <HAL_GPIO_EXTI_Callback+0x2e>
 8001f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f22:	4836      	ldr	r0, [pc, #216]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001f24:	f002 faac 	bl	8004480 <HAL_GPIO_ReadPin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <HAL_GPIO_EXTI_Callback+0x2e>
	{
		right_forward_pulse_count++;
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a32      	ldr	r2, [pc, #200]	; (8002000 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	e05b      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xe6>
//		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
//		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
//	}

	}
	else if(GPIO_Pin == Right_WE_Pin_B_Pin && HAL_GPIO_ReadPin(GPIOA, Right_WE_Pin_A_Pin) == GPIO_PIN_SET)
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f40:	d107      	bne.n	8001f52 <HAL_GPIO_EXTI_Callback+0x46>
 8001f42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f46:	482d      	ldr	r0, [pc, #180]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001f48:	f002 fa9a 	bl	8004480 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d04f      	beq.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xe6>
	{

	}
	else if(GPIO_Pin == Right_WE_Pin_B_Pin && HAL_GPIO_ReadPin(GPIOA, Right_WE_Pin_A_Pin) == GPIO_PIN_RESET)
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f58:	d10d      	bne.n	8001f76 <HAL_GPIO_EXTI_Callback+0x6a>
 8001f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f5e:	4827      	ldr	r0, [pc, #156]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001f60:	f002 fa8e 	bl	8004480 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		right_reverse_pulse_count++;
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a24      	ldr	r2, [pc, #144]	; (8002004 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	e03d      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xe6>
//			right_reverse_pulse_count=0;
//			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
//			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
//		}
	}
	else if(GPIO_Pin == Right_WE_Pin_A_Pin && HAL_GPIO_ReadPin(GPIOA, Right_WE_Pin_B_Pin) == GPIO_PIN_SET)
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7c:	d107      	bne.n	8001f8e <HAL_GPIO_EXTI_Callback+0x82>
 8001f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f82:	481e      	ldr	r0, [pc, #120]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001f84:	f002 fa7c 	bl	8004480 <HAL_GPIO_ReadPin>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d031      	beq.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xe6>
	{

	}
	else if(GPIO_Pin == Left_WE_Pin_A_Pin && HAL_GPIO_ReadPin(GPIOA, Left_WE_Pin_B_Pin) == GPIO_PIN_SET)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d10c      	bne.n	8001fae <HAL_GPIO_EXTI_Callback+0xa2>
 8001f94:	2120      	movs	r1, #32
 8001f96:	4819      	ldr	r0, [pc, #100]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001f98:	f002 fa72 	bl	8004480 <HAL_GPIO_ReadPin>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_GPIO_EXTI_Callback+0xa2>
	{
		left_forward_pulse_count++;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e021      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xe6>
//				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
//				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
//		}

	}
	else if(GPIO_Pin == Left_WE_Pin_B_Pin && HAL_GPIO_ReadPin(GPIOA, Left_WE_Pin_A_Pin) == GPIO_PIN_RESET)
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d106      	bne.n	8001fc2 <HAL_GPIO_EXTI_Callback+0xb6>
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	4811      	ldr	r0, [pc, #68]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001fb8:	f002 fa62 	bl	8004480 <HAL_GPIO_ReadPin>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d017      	beq.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xe6>
	{

	}
	else if(GPIO_Pin == Left_WE_Pin_B_Pin && HAL_GPIO_ReadPin(GPIOA, Left_WE_Pin_A_Pin) == GPIO_PIN_SET)
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_GPIO_EXTI_Callback+0xd6>
 8001fc8:	2110      	movs	r1, #16
 8001fca:	480c      	ldr	r0, [pc, #48]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001fcc:	f002 fa58 	bl	8004480 <HAL_GPIO_ReadPin>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_GPIO_EXTI_Callback+0xd6>
	{
		left_reverse_pulse_count++;
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_GPIO_EXTI_Callback+0x100>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	; (800200c <HAL_GPIO_EXTI_Callback+0x100>)
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e007      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xe6>
//			left_reverse_pulse_count=0;
//			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
//			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
//		}
	}
	else if(GPIO_Pin == Left_WE_Pin_A_Pin && HAL_GPIO_ReadPin(GPIOA, Left_WE_Pin_B_Pin) == GPIO_PIN_RESET)
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d104      	bne.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xe6>
 8001fe8:	2120      	movs	r1, #32
 8001fea:	4804      	ldr	r0, [pc, #16]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf0>)
 8001fec:	f002 fa48 	bl	8004480 <HAL_GPIO_ReadPin>
//			if(HAL_GPIO_ReadPin(GPIOA,Right_WE_Pin_B_Pin) == GPIO_PIN_RESET)
//			{
//				right_forward_pulse_count++;
//			}
//	}
}
 8001ff0:	e7ff      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0xe6>
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40010800 	.word	0x40010800
 8002000:	20000328 	.word	0x20000328
 8002004:	2000032c 	.word	0x2000032c
 8002008:	20000320 	.word	0x20000320
 800200c:	20000324 	.word	0x20000324

08002010 <validate_frame>:
	frame[4] = frame_type;
	//HAL_UART_Transmit_IT(&huart2, frame, 15);
}

Frame_Status validate_frame(uint8_t frame[])
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, "debug:amInValidate", sizeof("debug:amInValidate"),100);
	int i=1;
 8002018:	2301      	movs	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
	switch(i)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3b01      	subs	r3, #1
 8002020:	2b06      	cmp	r3, #6
 8002022:	d865      	bhi.n	80020f0 <validate_frame+0xe0>
 8002024:	a201      	add	r2, pc, #4	; (adr r2, 800202c <validate_frame+0x1c>)
 8002026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202a:	bf00      	nop
 800202c:	08002049 	.word	0x08002049
 8002030:	0800205d 	.word	0x0800205d
 8002034:	08002073 	.word	0x08002073
 8002038:	0800209d 	.word	0x0800209d
 800203c:	080020b3 	.word	0x080020b3
 8002040:	080020c9 	.word	0x080020c9
 8002044:	080020df 	.word	0x080020df
	{
		case 1:
			if(frame[0]==0xF6)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2bf6      	cmp	r3, #246	; 0xf6
 800204e:	d103      	bne.n	8002058 <validate_frame+0x48>
				i++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3301      	adds	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e001      	b.n	800205c <validate_frame+0x4c>
			else
				return Invalid_frame;
 8002058:	2300      	movs	r3, #0
 800205a:	e049      	b.n	80020f0 <validate_frame+0xe0>
		case 2:
			if(frame[1]==0xF7)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3301      	adds	r3, #1
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2bf7      	cmp	r3, #247	; 0xf7
 8002064:	d103      	bne.n	800206e <validate_frame+0x5e>
				i++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3301      	adds	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e001      	b.n	8002072 <validate_frame+0x62>
			else
				return Invalid_frame;
 800206e:	2300      	movs	r3, #0
 8002070:	e03e      	b.n	80020f0 <validate_frame+0xe0>
		case 3:
			if(frame[4]==0xF0 || frame[4]== 0xF2 || frame[4]==0xF3)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3304      	adds	r3, #4
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2bf0      	cmp	r3, #240	; 0xf0
 800207a:	d009      	beq.n	8002090 <validate_frame+0x80>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3304      	adds	r3, #4
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2bf2      	cmp	r3, #242	; 0xf2
 8002084:	d004      	beq.n	8002090 <validate_frame+0x80>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2bf3      	cmp	r3, #243	; 0xf3
 800208e:	d103      	bne.n	8002098 <validate_frame+0x88>
				i++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3301      	adds	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e001      	b.n	800209c <validate_frame+0x8c>
			else
				return Invalid_Packet_Type;
 8002098:	2301      	movs	r3, #1
 800209a:	e029      	b.n	80020f0 <validate_frame+0xe0>
		case 4:
			if(frame[5]>=0 && frame[5]<=0x0F)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3305      	adds	r3, #5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	d803      	bhi.n	80020ae <validate_frame+0x9e>
				i++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3301      	adds	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e001      	b.n	80020b2 <validate_frame+0xa2>
			else
				return Invalid_Sensor_Type;
 80020ae:	2302      	movs	r3, #2
 80020b0:	e01e      	b.n	80020f0 <validate_frame+0xe0>
		case 5:
			if(frame[6]>=0 && frame[6]<=0x04)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3306      	adds	r3, #6
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d803      	bhi.n	80020c4 <validate_frame+0xb4>
				i++;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3301      	adds	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e001      	b.n	80020c8 <validate_frame+0xb8>
			else
				return Invalid_Sensor_ID;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e013      	b.n	80020f0 <validate_frame+0xe0>
		case 6:
			if(frame[7]>=0 && frame[7]<=0x0F)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3307      	adds	r3, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	d803      	bhi.n	80020da <validate_frame+0xca>
				i++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e001      	b.n	80020de <validate_frame+0xce>
			else
				return Invalid_Function_ID;
 80020da:	2304      	movs	r3, #4
 80020dc:	e008      	b.n	80020f0 <validate_frame+0xe0>
		case 7:
			if(frame[14]==0xF8)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	330e      	adds	r3, #14
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2bf8      	cmp	r3, #248	; 0xf8
 80020e6:	d101      	bne.n	80020ec <validate_frame+0xdc>
				return Frame_Success;
 80020e8:	230f      	movs	r3, #15
 80020ea:	e001      	b.n	80020f0 <validate_frame+0xe0>
			else
				return Invalid_frame;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e7ff      	b.n	80020f0 <validate_frame+0xe0>
	}
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop

080020fc <ResponseCallBack>:

}
*/

void ResponseCallBack(uint8_t *frame)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	switch(frame[5])
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3305      	adds	r3, #5
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	3b01      	subs	r3, #1
 800210c:	2b08      	cmp	r3, #8
 800210e:	f200 80a0 	bhi.w	8002252 <ResponseCallBack+0x156>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <ResponseCallBack+0x1c>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	0800213d 	.word	0x0800213d
 800211c:	08002153 	.word	0x08002153
 8002120:	08002161 	.word	0x08002161
 8002124:	0800216f 	.word	0x0800216f
 8002128:	0800217d 	.word	0x0800217d
 800212c:	0800218b 	.word	0x0800218b
 8002130:	08002199 	.word	0x08002199
 8002134:	080021a7 	.word	0x080021a7
 8002138:	080021cb 	.word	0x080021cb
	{
	case 1:
		rx_frame[10]=GetUltrasonicData(frame[6]);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3306      	adds	r3, #6
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f892 	bl	800226c <GetUltrasonicData>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	4b43      	ldr	r3, [pc, #268]	; (800225c <ResponseCallBack+0x160>)
 800214e:	729a      	strb	r2, [r3, #10]
		break;
 8002150:	e07f      	b.n	8002252 <ResponseCallBack+0x156>
	case 2:
		rx_frame[10]=GetBMM150MagnetoMeterData();
 8002152:	f000 f8ad 	bl	80022b0 <GetBMM150MagnetoMeterData>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	4b40      	ldr	r3, [pc, #256]	; (800225c <ResponseCallBack+0x160>)
 800215c:	729a      	strb	r2, [r3, #10]
		break;
 800215e:	e078      	b.n	8002252 <ResponseCallBack+0x156>
	case 3:
		rx_frame[10]=GetTemperatureData();
 8002160:	f000 f8ad 	bl	80022be <GetTemperatureData>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	4b3c      	ldr	r3, [pc, #240]	; (800225c <ResponseCallBack+0x160>)
 800216a:	729a      	strb	r2, [r3, #10]
		break;
 800216c:	e071      	b.n	8002252 <ResponseCallBack+0x156>
	case 4:
		rx_frame[10]=GetIMUData();
 800216e:	f000 f8ad 	bl	80022cc <GetIMUData>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <ResponseCallBack+0x160>)
 8002178:	729a      	strb	r2, [r3, #10]
		break;
 800217a:	e06a      	b.n	8002252 <ResponseCallBack+0x156>
	case 5:
		rx_frame[10]=GetProximityData();
 800217c:	f000 f8ad 	bl	80022da <GetProximityData>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <ResponseCallBack+0x160>)
 8002186:	729a      	strb	r2, [r3, #10]
		break;
 8002188:	e063      	b.n	8002252 <ResponseCallBack+0x156>
	case 6:
		rx_frame[10]=GetWheelEncoderData();
 800218a:	f000 f8ad 	bl	80022e8 <GetWheelEncoderData>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	4b32      	ldr	r3, [pc, #200]	; (800225c <ResponseCallBack+0x160>)
 8002194:	729a      	strb	r2, [r3, #10]
		break;
 8002196:	e05c      	b.n	8002252 <ResponseCallBack+0x156>
	case 7:
		rx_frame[10]=GetLimitSwitchData();
 8002198:	f000 f8ad 	bl	80022f6 <GetLimitSwitchData>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b2e      	ldr	r3, [pc, #184]	; (800225c <ResponseCallBack+0x160>)
 80021a2:	729a      	strb	r2, [r3, #10]
		break;
 80021a4:	e055      	b.n	8002252 <ResponseCallBack+0x156>
	case 8:
	{
		if (frame[6]==0x00)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3306      	adds	r3, #6
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <ResponseCallBack+0xbc>
		{
			HAL_TIM_Base_Stop_IT(&htim3);
 80021b0:	482b      	ldr	r0, [pc, #172]	; (8002260 <ResponseCallBack+0x164>)
 80021b2:	f004 f957 	bl	8006464 <HAL_TIM_Base_Stop_IT>
		}
		else if (frame[6]==0x01)
			HAL_TIM_Base_Start_IT(&htim3);
		break;
 80021b6:	e04b      	b.n	8002250 <ResponseCallBack+0x154>
		else if (frame[6]==0x01)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3306      	adds	r3, #6
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d146      	bne.n	8002250 <ResponseCallBack+0x154>
			HAL_TIM_Base_Start_IT(&htim3);
 80021c2:	4827      	ldr	r0, [pc, #156]	; (8002260 <ResponseCallBack+0x164>)
 80021c4:	f004 f8fc 	bl	80063c0 <HAL_TIM_Base_Start_IT>
		break;
 80021c8:	e042      	b.n	8002250 <ResponseCallBack+0x154>
	}
	case 9:
	{
		//HAL_UART_Transmit_IT(&huart1, (uint8_t*)"hellom",6);
		uint8_t left_dir = frame[10]&0x80;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330a      	adds	r3, #10
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021d4:	73fb      	strb	r3, [r7, #15]
		uint8_t right_dir = frame[11]&0x80;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	330b      	adds	r3, #11
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021e0:	73bb      	strb	r3, [r7, #14]


		uint8_t left_pwm = frame[10]&0x7F;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	330a      	adds	r3, #10
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ec:	737b      	strb	r3, [r7, #13]
		uint8_t right_pwm = frame[11]&0x7F;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	330b      	adds	r3, #11
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f8:	733b      	strb	r3, [r7, #12]


		if (left_dir==0x80)
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d102      	bne.n	8002206 <ResponseCallBack+0x10a>
			LeftMotor_reverse();
 8002200:	f000 f88c 	bl	800231c <LeftMotor_reverse>
 8002204:	e001      	b.n	800220a <ResponseCallBack+0x10e>
		else
			LeftMotor_forward();
 8002206:	f000 f87d 	bl	8002304 <LeftMotor_forward>
		if (right_dir==0x80)
 800220a:	7bbb      	ldrb	r3, [r7, #14]
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d102      	bne.n	8002216 <ResponseCallBack+0x11a>
			RightMotor_reverse();
 8002210:	f000 f89c 	bl	800234c <RightMotor_reverse>
 8002214:	e001      	b.n	800221a <ResponseCallBack+0x11e>
		else
			RightMotor_forward();
 8002216:	f000 f88d 	bl	8002334 <RightMotor_forward>

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,left_pwm);
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <ResponseCallBack+0x168>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	7b7a      	ldrb	r2, [r7, #13]
 8002220:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,right_pwm);
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <ResponseCallBack+0x168>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	7b3a      	ldrb	r2, [r7, #12]
 8002228:	635a      	str	r2, [r3, #52]	; 0x34


		if(rgb_flag)
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <ResponseCallBack+0x16c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <ResponseCallBack+0x142>
		{
		Set_RGB_Green();
 8002232:	f000 f8fb 	bl	800242c <Set_RGB_Green>
		rgb_flag=0;
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <ResponseCallBack+0x16c>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e004      	b.n	8002248 <ResponseCallBack+0x14c>
		}
		else{
			Set_RGB_Yellow();
 800223e:	f000 f913 	bl	8002468 <Set_RGB_Yellow>
			rgb_flag=1;
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <ResponseCallBack+0x16c>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
		}

		rx_frame[10]=Frame_Success;
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <ResponseCallBack+0x160>)
 800224a:	220f      	movs	r2, #15
 800224c:	729a      	strb	r2, [r3, #10]
		break;
 800224e:	e000      	b.n	8002252 <ResponseCallBack+0x156>
		break;
 8002250:	bf00      	nop
	}
	}
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200002ac 	.word	0x200002ac
 8002260:	20000694 	.word	0x20000694
 8002264:	2000064c 	.word	0x2000064c
 8002268:	200002ea 	.word	0x200002ea

0800226c <GetUltrasonicData>:



uint8_t GetUltrasonicData(uint8_t sensorID)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
	switch(sensorID)
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	3b01      	subs	r3, #1
 800227a:	2b03      	cmp	r3, #3
 800227c:	d812      	bhi.n	80022a4 <GetUltrasonicData+0x38>
 800227e:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <GetUltrasonicData+0x18>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	08002295 	.word	0x08002295
 8002288:	08002299 	.word	0x08002299
 800228c:	0800229d 	.word	0x0800229d
 8002290:	080022a1 	.word	0x080022a1
	{
	case 1:
		return 101;
 8002294:	2365      	movs	r3, #101	; 0x65
 8002296:	e005      	b.n	80022a4 <GetUltrasonicData+0x38>
	case 2:
		return 102;
 8002298:	2366      	movs	r3, #102	; 0x66
 800229a:	e003      	b.n	80022a4 <GetUltrasonicData+0x38>
	case 3:
		return 103;
 800229c:	2367      	movs	r3, #103	; 0x67
 800229e:	e001      	b.n	80022a4 <GetUltrasonicData+0x38>
	case 4:
		return 104;
 80022a0:	2368      	movs	r3, #104	; 0x68
 80022a2:	e7ff      	b.n	80022a4 <GetUltrasonicData+0x38>
	}
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop

080022b0 <GetBMM150MagnetoMeterData>:

uint8_t GetBMM150MagnetoMeterData()
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	return 105;
 80022b4:	2369      	movs	r3, #105	; 0x69
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <GetTemperatureData>:

uint8_t GetTemperatureData()
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
	return 106;
 80022c2:	236a      	movs	r3, #106	; 0x6a
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <GetIMUData>:


uint8_t GetIMUData()
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
	return 108;
 80022d0:	236c      	movs	r3, #108	; 0x6c
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <GetProximityData>:

uint8_t GetProximityData()
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
	return 109;
 80022de:	236d      	movs	r3, #109	; 0x6d
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <GetWheelEncoderData>:


uint8_t GetWheelEncoderData()
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	return 112;
 80022ec:	2370      	movs	r3, #112	; 0x70
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <GetLimitSwitchData>:


uint8_t GetLimitSwitchData()
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
	return 116;
 80022fa:	2374      	movs	r3, #116	; 0x74
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <LeftMotor_forward>:
{
	return 117;
}

void LeftMotor_forward()
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8002308:	2201      	movs	r2, #1
 800230a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800230e:	4802      	ldr	r0, [pc, #8]	; (8002318 <LeftMotor_forward+0x14>)
 8002310:	f002 f8cd 	bl	80044ae <HAL_GPIO_WritePin>
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40011000 	.word	0x40011000

0800231c <LeftMotor_reverse>:
void LeftMotor_reverse()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002326:	4802      	ldr	r0, [pc, #8]	; (8002330 <LeftMotor_reverse+0x14>)
 8002328:	f002 f8c1 	bl	80044ae <HAL_GPIO_WritePin>
}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40011000 	.word	0x40011000

08002334 <RightMotor_forward>:
void RightMotor_forward()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800233e:	4802      	ldr	r0, [pc, #8]	; (8002348 <RightMotor_forward+0x14>)
 8002340:	f002 f8b5 	bl	80044ae <HAL_GPIO_WritePin>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40011000 	.word	0x40011000

0800234c <RightMotor_reverse>:
void RightMotor_reverse ()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002356:	4802      	ldr	r0, [pc, #8]	; (8002360 <RightMotor_reverse+0x14>)
 8002358:	f002 f8a9 	bl	80044ae <HAL_GPIO_WritePin>
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40011000 	.word	0x40011000

08002364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800236c:	e7fe      	b.n	800236c <Error_Handler+0x8>
	...

08002370 <HAL_TIM_PWM_PulseFinishedCallback>:
uint16_t pwmData[(24*MAX_LED)+50];
uint16_t effStep = 0;
uint8_t rgb_var=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_3);
 8002378:	2108      	movs	r1, #8
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800237c:	f004 fb34 	bl	80069e8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200006dc 	.word	0x200006dc
 8002394:	2000038c 	.word	0x2000038c

08002398 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	b2d9      	uxtb	r1, r3
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <Set_LED+0x54>)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	b2d9      	uxtb	r1, r3
 80023b6:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <Set_LED+0x54>)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	460a      	mov	r2, r1
 80023c0:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	b2d9      	uxtb	r1, r3
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <Set_LED+0x54>)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	460a      	mov	r2, r1
 80023d0:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2d9      	uxtb	r1, r3
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <Set_LED+0x54>)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	460a      	mov	r2, r1
 80023e0:	70da      	strb	r2, [r3, #3]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	2000036c 	.word	0x2000036c

080023f0 <Set_RGB_Red>:

void Set_RGB_Red()
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	while(rgb_var < MAX_LED)
 80023f4:	e00d      	b.n	8002412 <Set_RGB_Red+0x22>
	  {
		  Set_LED(rgb_var, 255, 0, 0);
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <Set_RGB_Red+0x38>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	2300      	movs	r3, #0
 80023fe:	2200      	movs	r2, #0
 8002400:	21ff      	movs	r1, #255	; 0xff
 8002402:	f7ff ffc9 	bl	8002398 <Set_LED>
		  rgb_var++;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <Set_RGB_Red+0x38>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <Set_RGB_Red+0x38>)
 8002410:	701a      	strb	r2, [r3, #0]
	while(rgb_var < MAX_LED)
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <Set_RGB_Red+0x38>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b07      	cmp	r3, #7
 8002418:	d9ed      	bls.n	80023f6 <Set_RGB_Red+0x6>
	  }
	  WS2812_Send();
 800241a:	f000 f84d 	bl	80024b8 <WS2812_Send>
	  rgb_var = 0;
 800241e:	4b02      	ldr	r3, [pc, #8]	; (8002428 <Set_RGB_Red+0x38>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000574 	.word	0x20000574

0800242c <Set_RGB_Green>:

void Set_RGB_Green()
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	while(rgb_var < MAX_LED)
 8002430:	e00d      	b.n	800244e <Set_RGB_Green+0x22>
	  {
		  Set_LED(rgb_var, 0, 255, 0);
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <Set_RGB_Green+0x38>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	2300      	movs	r3, #0
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	2100      	movs	r1, #0
 800243e:	f7ff ffab 	bl	8002398 <Set_LED>
		  rgb_var++;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <Set_RGB_Green+0x38>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <Set_RGB_Green+0x38>)
 800244c:	701a      	strb	r2, [r3, #0]
	while(rgb_var < MAX_LED)
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <Set_RGB_Green+0x38>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b07      	cmp	r3, #7
 8002454:	d9ed      	bls.n	8002432 <Set_RGB_Green+0x6>
	  }
	  WS2812_Send();
 8002456:	f000 f82f 	bl	80024b8 <WS2812_Send>
	  rgb_var = 0;
 800245a:	4b02      	ldr	r3, [pc, #8]	; (8002464 <Set_RGB_Green+0x38>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000574 	.word	0x20000574

08002468 <Set_RGB_Yellow>:

void Set_RGB_Yellow(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	while(rgb_var < MAX_LED)
 800246c:	e00d      	b.n	800248a <Set_RGB_Yellow+0x22>
	  {
		  Set_LED(rgb_var, 255, 255, 0);
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <Set_RGB_Yellow+0x38>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	2300      	movs	r3, #0
 8002476:	22ff      	movs	r2, #255	; 0xff
 8002478:	21ff      	movs	r1, #255	; 0xff
 800247a:	f7ff ff8d 	bl	8002398 <Set_LED>
		  rgb_var++;
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <Set_RGB_Yellow+0x38>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <Set_RGB_Yellow+0x38>)
 8002488:	701a      	strb	r2, [r3, #0]
	while(rgb_var < MAX_LED)
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <Set_RGB_Yellow+0x38>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b07      	cmp	r3, #7
 8002490:	d9ed      	bls.n	800246e <Set_RGB_Yellow+0x6>
	  }
	  WS2812_Send();
 8002492:	f000 f811 	bl	80024b8 <WS2812_Send>
	  rgb_var = 0;
 8002496:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <Set_RGB_Yellow+0x38>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000574 	.word	0x20000574

080024a4 <Set_Brightness>:


void Set_Brightness (int brightness)  // 0-45
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
	...

080024b8 <WS2812_Send>:

void WS2812_Send (void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	e036      	b.n	8002536 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80024c8:	4a2e      	ldr	r2, [pc, #184]	; (8002584 <WS2812_Send+0xcc>)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	785b      	ldrb	r3, [r3, #1]
 80024d2:	041a      	lsls	r2, r3, #16
 80024d4:	492b      	ldr	r1, [pc, #172]	; (8002584 <WS2812_Send+0xcc>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	789b      	ldrb	r3, [r3, #2]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	431a      	orrs	r2, r3
 80024e2:	4928      	ldr	r1, [pc, #160]	; (8002584 <WS2812_Send+0xcc>)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	78db      	ldrb	r3, [r3, #3]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 80024f0:	2317      	movs	r3, #23
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e019      	b.n	800252a <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80024f6:	2201      	movs	r2, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8002508:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <WS2812_Send+0xd0>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	213c      	movs	r1, #60	; 0x3c
 800250e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002512:	e004      	b.n	800251e <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8002514:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <WS2812_Send+0xd0>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	211e      	movs	r1, #30
 800251a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3301      	adds	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3b01      	subs	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	dae2      	bge.n	80024f6 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	3301      	adds	r3, #1
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b07      	cmp	r3, #7
 800253a:	ddc5      	ble.n	80024c8 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e00a      	b.n	8002558 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8002542:	4a11      	ldr	r2, [pc, #68]	; (8002588 <WS2812_Send+0xd0>)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2100      	movs	r1, #0
 8002548:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3301      	adds	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3301      	adds	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b31      	cmp	r3, #49	; 0x31
 800255c:	ddf1      	ble.n	8002542 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_3, (uint32_t *)pwmData, indx);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <WS2812_Send+0xd0>)
 8002564:	2108      	movs	r1, #8
 8002566:	4809      	ldr	r0, [pc, #36]	; (800258c <WS2812_Send+0xd4>)
 8002568:	f004 f8a4 	bl	80066b4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 800256c:	bf00      	nop
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <WS2812_Send+0xd8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0fb      	beq.n	800256e <WS2812_Send+0xb6>
	datasentflag = 0;
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <WS2812_Send+0xd8>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000036c 	.word	0x2000036c
 8002588:	20000390 	.word	0x20000390
 800258c:	200006dc 	.word	0x200006dc
 8002590:	2000038c 	.word	0x2000038c

08002594 <Ringbuf_init>:
ring_buffer *_rx_buffer;



void Ringbuf_init(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <Ringbuf_init+0x34>)
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <Ringbuf_init+0x38>)
 800259c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <Ringbuf_init+0x3c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <Ringbuf_init+0x3c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <Ringbuf_init+0x3c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <Ringbuf_init+0x3c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0220 	orr.w	r2, r2, #32
 80025bc:	60da      	str	r2, [r3, #12]
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	200005fc 	.word	0x200005fc
 80025cc:	20000578 	.word	0x20000578
 80025d0:	200007ac 	.word	0x200007ac

080025d4 <store_byte>:


void store_byte(uint8_t byte, ring_buffer *buffer)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
	int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ee:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00d      	beq.n	800261c <store_byte+0x48>
    buffer->buffer[buffer->head] = byte;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4619      	mov	r1, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	545a      	strb	r2, [r3, r1]
    buffer->head = i;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	  tx_frame[4]=0x00;
	  HAL_UART_Transmit(&huart2, tx_frame, 22,25);
	  Set_RGB_Red();
  }

}
 800261a:	e00a      	b.n	8002632 <store_byte+0x5e>
	  tx_frame[4]=0x00;
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <store_byte+0x68>)
 800261e:	2200      	movs	r2, #0
 8002620:	711a      	strb	r2, [r3, #4]
	  HAL_UART_Transmit(&huart2, tx_frame, 22,25);
 8002622:	2319      	movs	r3, #25
 8002624:	2216      	movs	r2, #22
 8002626:	4905      	ldr	r1, [pc, #20]	; (800263c <store_byte+0x68>)
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <store_byte+0x6c>)
 800262a:	f005 f984 	bl	8007936 <HAL_UART_Transmit>
	  Set_RGB_Red();
 800262e:	f7ff fedf 	bl	80023f0 <Set_RGB_Red>
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000000 	.word	0x20000000
 8002640:	200007ac 	.word	0x200007ac

08002644 <Uart_read>:



uint8_t Uart_read(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <Uart_read+0x5c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <Uart_read+0x5c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800265c:	b2db      	uxtb	r3, r3
 800265e:	429a      	cmp	r2, r3
 8002660:	d101      	bne.n	8002666 <Uart_read+0x22>
  {
    return -1;
 8002662:	23ff      	movs	r3, #255	; 0xff
 8002664:	e017      	b.n	8002696 <Uart_read+0x52>
  }
  else
  {
    uint8_t c = _rx_buffer->buffer[_rx_buffer->tail];
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <Uart_read+0x5c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <Uart_read+0x5c>)
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	5c9b      	ldrb	r3, [r3, r2]
 8002676:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <Uart_read+0x5c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002680:	b2db      	uxtb	r3, r3
 8002682:	3301      	adds	r3, #1
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <Uart_read+0x5c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return c;
 8002694:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	200005fc 	.word	0x200005fc

080026a4 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

	return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <IsDataAvailable+0x30>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <IsDataAvailable+0x30>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	b29b      	uxth	r3, r3
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3380      	adds	r3, #128	; 0x80
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	200005fc 	.word	0x200005fc

080026d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_MspInit+0x5c>)
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_MspInit+0x5c>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6193      	str	r3, [r2, #24]
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_MspInit+0x5c>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_MspInit+0x5c>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <HAL_MspInit+0x5c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	61d3      	str	r3, [r2, #28]
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_MspInit+0x5c>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_MspInit+0x60>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_MspInit+0x60>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40021000 	.word	0x40021000
 8002738:	40010000 	.word	0x40010000

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <NMI_Handler+0x4>

08002742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <MemManage_Handler+0x4>

0800274e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <BusFault_Handler+0x4>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <UsageFault_Handler+0x4>

0800275a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002782:	f000 fce1 	bl	8003148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}

0800278a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_WE_Pin_A_Pin);
 800278e:	2010      	movs	r0, #16
 8002790:	f001 fea6 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}

08002798 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <DMA1_Channel5_IRQHandler+0x10>)
 800279e:	f001 fbb7 	bl	8003f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000724 	.word	0x20000724

080027ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_WE_Pin_B_Pin);
 80027b0:	2020      	movs	r0, #32
 80027b2:	f001 fe95 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Right_WE_Pin_B_Pin);
 80027b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027ba:	f001 fe91 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Right_WE_Pin_A_Pin);
 80027be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027c2:	f001 fe8d 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <TIM3_IRQHandler+0x10>)
 80027d2:	f004 f9c7 	bl	8006b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000694 	.word	0x20000694

080027e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <USART1_IRQHandler+0x10>)
 80027e6:	f005 f97d 	bl	8007ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000768 	.word	0x20000768

080027f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <USART2_IRQHandler+0x10>)
 80027fa:	f005 f973 	bl	8007ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200007ac 	.word	0x200007ac

08002808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <_kill>:

int _kill(int pid, int sig)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002820:	f005 fcc0 	bl	80081a4 <__errno>
 8002824:	4603      	mov	r3, r0
 8002826:	2216      	movs	r2, #22
 8002828:	601a      	str	r2, [r3, #0]
	return -1;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <_exit>:

void _exit (int status)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800283e:	f04f 31ff 	mov.w	r1, #4294967295
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ffe7 	bl	8002816 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002848:	e7fe      	b.n	8002848 <_exit+0x12>

0800284a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b086      	sub	sp, #24
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e00a      	b.n	8002872 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800285c:	f3af 8000 	nop.w
 8002860:	4601      	mov	r1, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	60ba      	str	r2, [r7, #8]
 8002868:	b2ca      	uxtb	r2, r1
 800286a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	dbf0      	blt.n	800285c <_read+0x12>
	}

return len;
 800287a:	687b      	ldr	r3, [r7, #4]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e009      	b.n	80028aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	60ba      	str	r2, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fe8e 	bl	80015c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	dbf1      	blt.n	8002896 <_write+0x12>
	}
	return len;
 80028b2:	687b      	ldr	r3, [r7, #4]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_close>:

int _close(int file)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	return -1;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e2:	605a      	str	r2, [r3, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <_isatty>:

int _isatty(int file)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	return 1;
 80028f8:	2301      	movs	r3, #1
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
	return 0;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <_sbrk+0x5c>)
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <_sbrk+0x60>)
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <_sbrk+0x64>)
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <_sbrk+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800294c:	f005 fc2a 	bl	80081a4 <__errno>
 8002950:	4603      	mov	r3, r0
 8002952:	220c      	movs	r2, #12
 8002954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
 800295a:	e009      	b.n	8002970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_sbrk+0x64>)
 800296c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20005000 	.word	0x20005000
 800297c:	00000400 	.word	0x00000400
 8002980:	20000600 	.word	0x20000600
 8002984:	20000808 	.word	0x20000808

08002988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a8:	463b      	mov	r3, r7
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029b0:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <MX_TIM1_Init+0x9c>)
 80029b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029b8:	2247      	movs	r2, #71	; 0x47
 80029ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029dc:	4813      	ldr	r0, [pc, #76]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029de:	f003 fc55 	bl	800628c <HAL_TIM_Base_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80029e8:	f7ff fcbc 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	4619      	mov	r1, r3
 80029f8:	480c      	ldr	r0, [pc, #48]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029fa:	f004 fa79 	bl	8006ef0 <HAL_TIM_ConfigClockSource>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002a04:	f7ff fcae 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a10:	463b      	mov	r3, r7
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	; (8002a2c <MX_TIM1_Init+0x98>)
 8002a16:	f004 fed1 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002a20:	f7ff fca0 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000604 	.word	0x20000604
 8002a30:	40012c00 	.word	0x40012c00

08002a34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08e      	sub	sp, #56	; 0x38
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a48:	f107 0320 	add.w	r3, r7, #32
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
 8002a60:	615a      	str	r2, [r3, #20]
 8002a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a64:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 28.8 - 1;
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002a6e:	221b      	movs	r2, #27
 8002a70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a72:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002a78:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002a7a:	2264      	movs	r2, #100	; 0x64
 8002a7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a84:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a8a:	482a      	ldr	r0, [pc, #168]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002a8c:	f003 fbfe 	bl	800628c <HAL_TIM_Base_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002a96:	f7ff fc65 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4823      	ldr	r0, [pc, #140]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002aa8:	f004 fa22 	bl	8006ef0 <HAL_TIM_ConfigClockSource>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002ab2:	f7ff fc57 	bl	8002364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ab6:	481f      	ldr	r0, [pc, #124]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002ab8:	f003 fd02 	bl	80064c0 <HAL_TIM_PWM_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002ac2:	f7ff fc4f 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ace:	f107 0320 	add.w	r3, r7, #32
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4817      	ldr	r0, [pc, #92]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002ad6:	f004 fe71 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002ae0:	f7ff fc40 	bl	8002364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae4:	2360      	movs	r3, #96	; 0x60
 8002ae6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002ae8:	2332      	movs	r3, #50	; 0x32
 8002aea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	2200      	movs	r2, #0
 8002af8:	4619      	mov	r1, r3
 8002afa:	480e      	ldr	r0, [pc, #56]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002afc:	f004 f93a 	bl	8006d74 <HAL_TIM_PWM_ConfigChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002b06:	f7ff fc2d 	bl	8002364 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2204      	movs	r2, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4807      	ldr	r0, [pc, #28]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002b16:	f004 f92d 	bl	8006d74 <HAL_TIM_PWM_ConfigChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002b20:	f7ff fc20 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b24:	4803      	ldr	r0, [pc, #12]	; (8002b34 <MX_TIM2_Init+0x100>)
 8002b26:	f000 f957 	bl	8002dd8 <HAL_TIM_MspPostInit>

}
 8002b2a:	bf00      	nop
 8002b2c:	3738      	adds	r7, #56	; 0x38
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	2000064c 	.word	0x2000064c

08002b38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3e:	f107 0308 	add.w	r3, r7, #8
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <MX_TIM3_Init+0x98>)
 8002b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5000;
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b6a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002b6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b7c:	4813      	ldr	r0, [pc, #76]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b7e:	f003 fb85 	bl	800628c <HAL_TIM_Base_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b88:	f7ff fbec 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b92:	f107 0308 	add.w	r3, r7, #8
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b9a:	f004 f9a9 	bl	8006ef0 <HAL_TIM_ConfigClockSource>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ba4:	f7ff fbde 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002bb6:	f004 fe01 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002bc0:	f7ff fbd0 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000694 	.word	0x20000694
 8002bd0:	40000400 	.word	0x40000400

08002bd4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	; 0x38
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	f107 0320 	add.w	r3, r7, #32
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	615a      	str	r2, [r3, #20]
 8002c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c04:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c06:	4a2d      	ldr	r2, [pc, #180]	; (8002cbc <MX_TIM4_Init+0xe8>)
 8002c08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c10:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90-1;
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c18:	2259      	movs	r2, #89	; 0x59
 8002c1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1c:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c28:	4823      	ldr	r0, [pc, #140]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c2a:	f003 fb2f 	bl	800628c <HAL_TIM_Base_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002c34:	f7ff fb96 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c42:	4619      	mov	r1, r3
 8002c44:	481c      	ldr	r0, [pc, #112]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c46:	f004 f953 	bl	8006ef0 <HAL_TIM_ConfigClockSource>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002c50:	f7ff fb88 	bl	8002364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c54:	4818      	ldr	r0, [pc, #96]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c56:	f003 fc33 	bl	80064c0 <HAL_TIM_PWM_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002c60:	f7ff fb80 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c6c:	f107 0320 	add.w	r3, r7, #32
 8002c70:	4619      	mov	r1, r3
 8002c72:	4811      	ldr	r0, [pc, #68]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c74:	f004 fda2 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002c7e:	f7ff fb71 	bl	8002364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c82:	2360      	movs	r3, #96	; 0x60
 8002c84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2208      	movs	r2, #8
 8002c96:	4619      	mov	r1, r3
 8002c98:	4807      	ldr	r0, [pc, #28]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002c9a:	f004 f86b 	bl	8006d74 <HAL_TIM_PWM_ConfigChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002ca4:	f7ff fb5e 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ca8:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <MX_TIM4_Init+0xe4>)
 8002caa:	f000 f895 	bl	8002dd8 <HAL_TIM_MspPostInit>

}
 8002cae:	bf00      	nop
 8002cb0:	3738      	adds	r7, #56	; 0x38
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200006dc 	.word	0x200006dc
 8002cbc:	40000800 	.word	0x40000800

08002cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3c      	ldr	r2, [pc, #240]	; (8002dc0 <HAL_TIM_Base_MspInit+0x100>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10c      	bne.n	8002cec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cd2:	4b3c      	ldr	r3, [pc, #240]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cdc:	6193      	str	r3, [r2, #24]
 8002cde:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002cea:	e064      	b.n	8002db6 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cf6:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	61d3      	str	r3, [r2, #28]
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
}
 8002d0e:	e052      	b.n	8002db6 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2c      	ldr	r2, [pc, #176]	; (8002dc8 <HAL_TIM_Base_MspInit+0x108>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d114      	bne.n	8002d44 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	61d3      	str	r3, [r2, #28]
 8002d26:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2101      	movs	r1, #1
 8002d36:	201d      	movs	r0, #29
 8002d38:	f000 ff49 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d3c:	201d      	movs	r0, #29
 8002d3e:	f000 ff62 	bl	8003c06 <HAL_NVIC_EnableIRQ>
}
 8002d42:	e038      	b.n	8002db6 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM4)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <HAL_TIM_Base_MspInit+0x10c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d133      	bne.n	8002db6 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_TIM_Base_MspInit+0x104>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch3.Instance = DMA1_Channel5;
 8002d66:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002d68:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <HAL_TIM_Base_MspInit+0x114>)
 8002d6a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d6c:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002d6e:	2210      	movs	r2, #16
 8002d70:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d7e:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d84:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002d9a:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002d9c:	f000 ff4e 	bl	8003c3c <HAL_DMA_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_TIM_Base_MspInit+0xea>
      Error_Handler();
 8002da6:	f7ff fadd 	bl	8002364 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <HAL_TIM_Base_MspInit+0x110>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40000800 	.word	0x40000800
 8002dd0:	20000724 	.word	0x20000724
 8002dd4:	40020058 	.word	0x40020058

08002dd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0310 	add.w	r3, r7, #16
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d118      	bne.n	8002e2a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_TIM_MspPostInit+0x98>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_TIM_MspPostInit+0x98>)
 8002dfe:	f043 0304 	orr.w	r3, r3, #4
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_TIM_MspPostInit+0x98>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTO_PWM_R_Pin|MOTOR_PWM_L_Pin;
 8002e10:	2303      	movs	r3, #3
 8002e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	f107 0310 	add.w	r3, r7, #16
 8002e20:	4619      	mov	r1, r3
 8002e22:	4814      	ldr	r0, [pc, #80]	; (8002e74 <HAL_TIM_MspPostInit+0x9c>)
 8002e24:	f001 f9a8 	bl	8004178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e28:	e01d      	b.n	8002e66 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <HAL_TIM_MspPostInit+0xa0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d118      	bne.n	8002e66 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_TIM_MspPostInit+0x98>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <HAL_TIM_MspPostInit+0x98>)
 8002e3a:	f043 0308 	orr.w	r3, r3, #8
 8002e3e:	6193      	str	r3, [r2, #24]
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_TIM_MspPostInit+0x98>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2302      	movs	r3, #2
 8002e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5a:	f107 0310 	add.w	r3, r7, #16
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4806      	ldr	r0, [pc, #24]	; (8002e7c <HAL_TIM_MspPostInit+0xa4>)
 8002e62:	f001 f989 	bl	8004178 <HAL_GPIO_Init>
}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40010800 	.word	0x40010800
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40010c00 	.word	0x40010c00

08002e80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <MX_USART1_UART_Init+0x50>)
 8002e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eb6:	4805      	ldr	r0, [pc, #20]	; (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002eb8:	f004 fcf0 	bl	800789c <HAL_UART_Init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ec2:	f7ff fa4f 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000768 	.word	0x20000768
 8002ed0:	40013800 	.word	0x40013800

08002ed4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <MX_USART2_UART_Init+0x4c>)
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <MX_USART2_UART_Init+0x50>)
 8002edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <MX_USART2_UART_Init+0x4c>)
 8002ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <MX_USART2_UART_Init+0x4c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <MX_USART2_UART_Init+0x4c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <MX_USART2_UART_Init+0x4c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <MX_USART2_UART_Init+0x4c>)
 8002efa:	220c      	movs	r2, #12
 8002efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <MX_USART2_UART_Init+0x4c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <MX_USART2_UART_Init+0x4c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <MX_USART2_UART_Init+0x4c>)
 8002f0c:	f004 fcc6 	bl	800789c <HAL_UART_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f16:	f7ff fa25 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200007ac 	.word	0x200007ac
 8002f24:	40004400 	.word	0x40004400

08002f28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	; 0x30
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a45      	ldr	r2, [pc, #276]	; (8003058 <HAL_UART_MspInit+0x130>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d146      	bne.n	8002fd6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f48:	4b44      	ldr	r3, [pc, #272]	; (800305c <HAL_UART_MspInit+0x134>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	4a43      	ldr	r2, [pc, #268]	; (800305c <HAL_UART_MspInit+0x134>)
 8002f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f52:	6193      	str	r3, [r2, #24]
 8002f54:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_UART_MspInit+0x134>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f60:	4b3e      	ldr	r3, [pc, #248]	; (800305c <HAL_UART_MspInit+0x134>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a3d      	ldr	r2, [pc, #244]	; (800305c <HAL_UART_MspInit+0x134>)
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_UART_MspInit+0x134>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_PI_TX_Pin;
 8002f78:	2340      	movs	r3, #64	; 0x40
 8002f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(UART_PI_TX_GPIO_Port, &GPIO_InitStruct);
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4835      	ldr	r0, [pc, #212]	; (8003060 <HAL_UART_MspInit+0x138>)
 8002f8c:	f001 f8f4 	bl	8004178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_PI_RX_Pin;
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f94:	2300      	movs	r3, #0
 8002f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UART_PI_RX_GPIO_Port, &GPIO_InitStruct);
 8002f9c:	f107 031c 	add.w	r3, r7, #28
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	482f      	ldr	r0, [pc, #188]	; (8003060 <HAL_UART_MspInit+0x138>)
 8002fa4:	f001 f8e8 	bl	8004178 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <HAL_UART_MspInit+0x13c>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbe:	4a29      	ldr	r2, [pc, #164]	; (8003064 <HAL_UART_MspInit+0x13c>)
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2103      	movs	r1, #3
 8002fc8:	2025      	movs	r0, #37	; 0x25
 8002fca:	f000 fe00 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fce:	2025      	movs	r0, #37	; 0x25
 8002fd0:	f000 fe19 	bl	8003c06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fd4:	e03c      	b.n	8003050 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a23      	ldr	r2, [pc, #140]	; (8003068 <HAL_UART_MspInit+0x140>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d137      	bne.n	8003050 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fe0:	4b1e      	ldr	r3, [pc, #120]	; (800305c <HAL_UART_MspInit+0x134>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_UART_MspInit+0x134>)
 8002fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fea:	61d3      	str	r3, [r2, #28]
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_UART_MspInit+0x134>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_UART_MspInit+0x134>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_UART_MspInit+0x134>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6193      	str	r3, [r2, #24]
 8003004:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_UART_MspInit+0x134>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003010:	2304      	movs	r3, #4
 8003012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003018:	2303      	movs	r3, #3
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	4619      	mov	r1, r3
 8003022:	4812      	ldr	r0, [pc, #72]	; (800306c <HAL_UART_MspInit+0x144>)
 8003024:	f001 f8a8 	bl	8004178 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003028:	2308      	movs	r3, #8
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302c:	2300      	movs	r3, #0
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	4619      	mov	r1, r3
 800303a:	480c      	ldr	r0, [pc, #48]	; (800306c <HAL_UART_MspInit+0x144>)
 800303c:	f001 f89c 	bl	8004178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003040:	2200      	movs	r2, #0
 8003042:	2100      	movs	r1, #0
 8003044:	2026      	movs	r0, #38	; 0x26
 8003046:	f000 fdc2 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800304a:	2026      	movs	r0, #38	; 0x26
 800304c:	f000 fddb 	bl	8003c06 <HAL_NVIC_EnableIRQ>
}
 8003050:	bf00      	nop
 8003052:	3730      	adds	r7, #48	; 0x30
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40013800 	.word	0x40013800
 800305c:	40021000 	.word	0x40021000
 8003060:	40010c00 	.word	0x40010c00
 8003064:	40010000 	.word	0x40010000
 8003068:	40004400 	.word	0x40004400
 800306c:	40010800 	.word	0x40010800

08003070 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003070:	480c      	ldr	r0, [pc, #48]	; (80030a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003072:	490d      	ldr	r1, [pc, #52]	; (80030a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003074:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003078:	e002      	b.n	8003080 <LoopCopyDataInit>

0800307a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800307a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800307c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307e:	3304      	adds	r3, #4

08003080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003084:	d3f9      	bcc.n	800307a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003088:	4c0a      	ldr	r4, [pc, #40]	; (80030b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800308c:	e001      	b.n	8003092 <LoopFillZerobss>

0800308e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003090:	3204      	adds	r2, #4

08003092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003094:	d3fb      	bcc.n	800308e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003096:	f7ff fc77 	bl	8002988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800309a:	f005 f889 	bl	80081b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800309e:	f7fe fbf7 	bl	8001890 <main>
  bx lr
 80030a2:	4770      	bx	lr
  ldr r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80030ac:	0800cff4 	.word	0x0800cff4
  ldr r2, =_sbss
 80030b0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80030b4:	20000804 	.word	0x20000804

080030b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030b8:	e7fe      	b.n	80030b8 <ADC1_2_IRQHandler>
	...

080030bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_Init+0x28>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_Init+0x28>)
 80030c6:	f043 0310 	orr.w	r3, r3, #16
 80030ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f000 fd73 	bl	8003bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f000 f808 	bl	80030e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d8:	f7ff fafe 	bl	80026d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40022000 	.word	0x40022000

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_InitTick+0x54>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_InitTick+0x58>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fd8b 	bl	8003c22 <HAL_SYSTICK_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00e      	b.n	8003134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0f      	cmp	r3, #15
 800311a:	d80a      	bhi.n	8003132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311c:	2200      	movs	r2, #0
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f000 fd53 	bl	8003bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003128:	4a06      	ldr	r2, [pc, #24]	; (8003144 <HAL_InitTick+0x5c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000018 	.word	0x20000018
 8003140:	20000020 	.word	0x20000020
 8003144:	2000001c 	.word	0x2000001c

08003148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_IncTick+0x1c>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_IncTick+0x20>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4413      	add	r3, r2
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <HAL_IncTick+0x20>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20000020 	.word	0x20000020
 8003168:	200007f0 	.word	0x200007f0

0800316c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return uwTick;
 8003170:	4b02      	ldr	r3, [pc, #8]	; (800317c <HAL_GetTick+0x10>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	200007f0 	.word	0x200007f0

08003180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff fff0 	bl	800316c <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d005      	beq.n	80031a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_Delay+0x44>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031a6:	bf00      	nop
 80031a8:	f7ff ffe0 	bl	800316c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d8f7      	bhi.n	80031a8 <HAL_Delay+0x28>
  {
  }
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000020 	.word	0x20000020

080031c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0be      	b.n	8003368 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fe f854 	bl	80012b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fbc5 	bl	800399c <ADC_ConversionStop_Disable>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 8099 	bne.w	8003356 <HAL_ADC_Init+0x18e>
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 8095 	bne.w	8003356 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003234:	f023 0302 	bic.w	r3, r3, #2
 8003238:	f043 0202 	orr.w	r2, r3, #2
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003248:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7b1b      	ldrb	r3, [r3, #12]
 800324e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003250:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4313      	orrs	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003260:	d003      	beq.n	800326a <HAL_ADC_Init+0xa2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d102      	bne.n	8003270 <HAL_ADC_Init+0xa8>
 800326a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800326e:	e000      	b.n	8003272 <HAL_ADC_Init+0xaa>
 8003270:	2300      	movs	r3, #0
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7d1b      	ldrb	r3, [r3, #20]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d119      	bne.n	80032b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7b1b      	ldrb	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	3b01      	subs	r3, #1
 800328e:	035a      	lsls	r2, r3, #13
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	e00b      	b.n	80032b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	4b28      	ldr	r3, [pc, #160]	; (8003370 <HAL_ADC_Init+0x1a8>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	430b      	orrs	r3, r1
 80032da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e4:	d003      	beq.n	80032ee <HAL_ADC_Init+0x126>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d104      	bne.n	80032f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	051b      	lsls	r3, r3, #20
 80032f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	430a      	orrs	r2, r1
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	4b18      	ldr	r3, [pc, #96]	; (8003374 <HAL_ADC_Init+0x1ac>)
 8003314:	4013      	ands	r3, r2
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	429a      	cmp	r2, r3
 800331a:	d10b      	bne.n	8003334 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	f043 0201 	orr.w	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003332:	e018      	b.n	8003366 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	f023 0312 	bic.w	r3, r3, #18
 800333c:	f043 0210 	orr.w	r2, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003354:	e007      	b.n	8003366 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	f043 0210 	orr.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003366:	7dfb      	ldrb	r3, [r7, #23]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	ffe1f7fd 	.word	0xffe1f7fd
 8003374:	ff1f0efe 	.word	0xff1f0efe

08003378 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Start+0x1a>
 800338e:	2302      	movs	r3, #2
 8003390:	e098      	b.n	80034c4 <HAL_ADC_Start+0x14c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 faa4 	bl	80038e8 <ADC_Enable>
 80033a0:	4603      	mov	r3, r0
 80033a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f040 8087 	bne.w	80034ba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a41      	ldr	r2, [pc, #260]	; (80034cc <HAL_ADC_Start+0x154>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d105      	bne.n	80033d6 <HAL_ADC_Start+0x5e>
 80033ca:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_ADC_Start+0x158>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d115      	bne.n	8003402 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d026      	beq.n	800343e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003400:	e01d      	b.n	800343e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2f      	ldr	r2, [pc, #188]	; (80034d0 <HAL_ADC_Start+0x158>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_ADC_Start+0xaa>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <HAL_ADC_Start+0x154>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10d      	bne.n	800343e <HAL_ADC_Start+0xc6>
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_ADC_Start+0x158>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003436:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d006      	beq.n	8003458 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	f023 0206 	bic.w	r2, r3, #6
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c
 8003456:	e002      	b.n	800345e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0202 	mvn.w	r2, #2
 800346e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800347a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800347e:	d113      	bne.n	80034a8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003484:	4a11      	ldr	r2, [pc, #68]	; (80034cc <HAL_ADC_Start+0x154>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d105      	bne.n	8003496 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_ADC_Start+0x158>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	e00c      	b.n	80034c2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40012800 	.word	0x40012800
 80034d0:	40012400 	.word	0x40012400

080034d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80034ea:	f7ff fe3f 	bl	800316c <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0d3      	b.n	80036be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d131      	bne.n	8003588 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800352e:	2b00      	cmp	r3, #0
 8003530:	d12a      	bne.n	8003588 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003532:	e021      	b.n	8003578 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d01d      	beq.n	8003578 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_ADC_PollForConversion+0x7e>
 8003542:	f7ff fe13 	bl	800316c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d212      	bcs.n	8003578 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f043 0204 	orr.w	r2, r3, #4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0a2      	b.n	80036be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0d6      	beq.n	8003534 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003586:	e070      	b.n	800366a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003588:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <HAL_ADC_PollForConversion+0x1f4>)
 800358a:	681c      	ldr	r4, [r3, #0]
 800358c:	2002      	movs	r0, #2
 800358e:	f002 fdbd 	bl	800610c <HAL_RCCEx_GetPeriphCLKFreq>
 8003592:	4603      	mov	r3, r0
 8003594:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6919      	ldr	r1, [r3, #16]
 800359e:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <HAL_ADC_PollForConversion+0x1f8>)
 80035a0:	400b      	ands	r3, r1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_ADC_PollForConversion+0x104>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68d9      	ldr	r1, [r3, #12]
 80035ac:	4b48      	ldr	r3, [pc, #288]	; (80036d0 <HAL_ADC_PollForConversion+0x1fc>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d111      	bne.n	80035d8 <HAL_ADC_PollForConversion+0x104>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6919      	ldr	r1, [r3, #16]
 80035ba:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_ADC_PollForConversion+0x200>)
 80035bc:	400b      	ands	r3, r1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <HAL_ADC_PollForConversion+0x100>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68d9      	ldr	r1, [r3, #12]
 80035c8:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_ADC_PollForConversion+0x204>)
 80035ca:	400b      	ands	r3, r1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_PollForConversion+0x100>
 80035d0:	2314      	movs	r3, #20
 80035d2:	e020      	b.n	8003616 <HAL_ADC_PollForConversion+0x142>
 80035d4:	2329      	movs	r3, #41	; 0x29
 80035d6:	e01e      	b.n	8003616 <HAL_ADC_PollForConversion+0x142>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6919      	ldr	r1, [r3, #16]
 80035de:	4b3d      	ldr	r3, [pc, #244]	; (80036d4 <HAL_ADC_PollForConversion+0x200>)
 80035e0:	400b      	ands	r3, r1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_ADC_PollForConversion+0x120>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68d9      	ldr	r1, [r3, #12]
 80035ec:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_ADC_PollForConversion+0x204>)
 80035ee:	400b      	ands	r3, r1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <HAL_ADC_PollForConversion+0x13c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6919      	ldr	r1, [r3, #16]
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <HAL_ADC_PollForConversion+0x208>)
 80035fc:	400b      	ands	r3, r1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d108      	bne.n	8003614 <HAL_ADC_PollForConversion+0x140>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68d9      	ldr	r1, [r3, #12]
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <HAL_ADC_PollForConversion+0x208>)
 800360a:	400b      	ands	r3, r1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADC_PollForConversion+0x140>
 8003610:	2354      	movs	r3, #84	; 0x54
 8003612:	e000      	b.n	8003616 <HAL_ADC_PollForConversion+0x142>
 8003614:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800361c:	e021      	b.n	8003662 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d01a      	beq.n	800365c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <HAL_ADC_PollForConversion+0x168>
 800362c:	f7ff fd9e 	bl	800316c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d20f      	bcs.n	800365c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	429a      	cmp	r2, r3
 8003642:	d90b      	bls.n	800365c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f043 0204 	orr.w	r2, r3, #4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e030      	b.n	80036be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	429a      	cmp	r2, r3
 8003668:	d8d9      	bhi.n	800361e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f06f 0212 	mvn.w	r2, #18
 8003672:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800368a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800368e:	d115      	bne.n	80036bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003694:	2b00      	cmp	r3, #0
 8003696:	d111      	bne.n	80036bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	f043 0201 	orr.w	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd90      	pop	{r4, r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000018 	.word	0x20000018
 80036cc:	24924924 	.word	0x24924924
 80036d0:	00924924 	.word	0x00924924
 80036d4:	12492492 	.word	0x12492492
 80036d8:	00492492 	.word	0x00492492
 80036dc:	00249249 	.word	0x00249249

080036e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x20>
 8003714:	2302      	movs	r3, #2
 8003716:	e0dc      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x1da>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b06      	cmp	r3, #6
 8003726:	d81c      	bhi.n	8003762 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	3b05      	subs	r3, #5
 800373a:	221f      	movs	r2, #31
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	4019      	ands	r1, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	3b05      	subs	r3, #5
 8003754:	fa00 f203 	lsl.w	r2, r0, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	635a      	str	r2, [r3, #52]	; 0x34
 8003760:	e03c      	b.n	80037dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b0c      	cmp	r3, #12
 8003768:	d81c      	bhi.n	80037a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	3b23      	subs	r3, #35	; 0x23
 800377c:	221f      	movs	r2, #31
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	4019      	ands	r1, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	3b23      	subs	r3, #35	; 0x23
 8003796:	fa00 f203 	lsl.w	r2, r0, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
 80037a2:	e01b      	b.n	80037dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	3b41      	subs	r3, #65	; 0x41
 80037b6:	221f      	movs	r2, #31
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	4019      	ands	r1, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	3b41      	subs	r3, #65	; 0x41
 80037d0:	fa00 f203 	lsl.w	r2, r0, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b09      	cmp	r3, #9
 80037e2:	d91c      	bls.n	800381e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68d9      	ldr	r1, [r3, #12]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	3b1e      	subs	r3, #30
 80037f6:	2207      	movs	r2, #7
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	4019      	ands	r1, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6898      	ldr	r0, [r3, #8]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4413      	add	r3, r2
 800380e:	3b1e      	subs	r3, #30
 8003810:	fa00 f203 	lsl.w	r2, r0, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	e019      	b.n	8003852 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6919      	ldr	r1, [r3, #16]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	2207      	movs	r2, #7
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	4019      	ands	r1, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6898      	ldr	r0, [r3, #8]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4413      	add	r3, r2
 8003846:	fa00 f203 	lsl.w	r2, r0, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b10      	cmp	r3, #16
 8003858:	d003      	beq.n	8003862 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800385e:	2b11      	cmp	r3, #17
 8003860:	d132      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_ADC_ConfigChannel+0x1e4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d125      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d126      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003888:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b10      	cmp	r3, #16
 8003890:	d11a      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a13      	ldr	r2, [pc, #76]	; (80038e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	0c9a      	lsrs	r2, r3, #18
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038a8:	e002      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f9      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x1b2>
 80038b6:	e007      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	40012400 	.word	0x40012400
 80038e0:	20000018 	.word	0x20000018
 80038e4:	431bde83 	.word	0x431bde83

080038e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d040      	beq.n	8003988 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <ADC_Enable+0xac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <ADC_Enable+0xb0>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	0c9b      	lsrs	r3, r3, #18
 8003922:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003924:	e002      	b.n	800392c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	3b01      	subs	r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f9      	bne.n	8003926 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003932:	f7ff fc1b 	bl	800316c <HAL_GetTick>
 8003936:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003938:	e01f      	b.n	800397a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800393a:	f7ff fc17 	bl	800316c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d918      	bls.n	800397a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d011      	beq.n	800397a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	f043 0210 	orr.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e007      	b.n	800398a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d1d8      	bne.n	800393a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000018 	.word	0x20000018
 8003998:	431bde83 	.word	0x431bde83

0800399c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d12e      	bne.n	8003a14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039c6:	f7ff fbd1 	bl	800316c <HAL_GetTick>
 80039ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039cc:	e01b      	b.n	8003a06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039ce:	f7ff fbcd 	bl	800316c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d914      	bls.n	8003a06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d10d      	bne.n	8003a06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	f043 0210 	orr.w	r2, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e007      	b.n	8003a16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d0dc      	beq.n	80039ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	60d3      	str	r3, [r2, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <__NVIC_GetPriorityGrouping+0x18>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f003 0307 	and.w	r3, r3, #7
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	db0b      	blt.n	8003aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	f003 021f 	and.w	r2, r3, #31
 8003a9c:	4906      	ldr	r1, [pc, #24]	; (8003ab8 <__NVIC_EnableIRQ+0x34>)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100

08003abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	db0a      	blt.n	8003ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	490c      	ldr	r1, [pc, #48]	; (8003b08 <__NVIC_SetPriority+0x4c>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae4:	e00a      	b.n	8003afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <__NVIC_SetPriority+0x50>)
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	3b04      	subs	r3, #4
 8003af4:	0112      	lsls	r2, r2, #4
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	440b      	add	r3, r1
 8003afa:	761a      	strb	r2, [r3, #24]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000e100 	.word	0xe000e100
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	; 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f1c3 0307 	rsb	r3, r3, #7
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf28      	it	cs
 8003b2e:	2304      	movcs	r3, #4
 8003b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d902      	bls.n	8003b40 <NVIC_EncodePriority+0x30>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3b03      	subs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <NVIC_EncodePriority+0x32>
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b58:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43d9      	mvns	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	4313      	orrs	r3, r2
         );
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b84:	d301      	bcc.n	8003b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00f      	b.n	8003baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <SysTick_Config+0x40>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b92:	210f      	movs	r1, #15
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	f7ff ff90 	bl	8003abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <SysTick_Config+0x40>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <SysTick_Config+0x40>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff2d 	bl	8003a20 <__NVIC_SetPriorityGrouping>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be0:	f7ff ff42 	bl	8003a68 <__NVIC_GetPriorityGrouping>
 8003be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff90 	bl	8003b10 <NVIC_EncodePriority>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff5f 	bl	8003abc <__NVIC_SetPriority>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff35 	bl	8003a84 <__NVIC_EnableIRQ>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ffa2 	bl	8003b74 <SysTick_Config>
 8003c30:	4603      	mov	r3, r0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e043      	b.n	8003cda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	4b22      	ldr	r3, [pc, #136]	; (8003ce4 <HAL_DMA_Init+0xa8>)
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <HAL_DMA_Init+0xac>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	009a      	lsls	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <HAL_DMA_Init+0xb0>)
 8003c6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	bffdfff8 	.word	0xbffdfff8
 8003ce8:	cccccccd 	.word	0xcccccccd
 8003cec:	40020000 	.word	0x40020000

08003cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_DMA_Start_IT+0x20>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e04a      	b.n	8003da6 <HAL_DMA_Start_IT+0xb6>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d13a      	bne.n	8003d98 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f9e8 	bl	800411c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 020e 	orr.w	r2, r2, #14
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e00f      	b.n	8003d86 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0204 	bic.w	r2, r2, #4
 8003d74:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 020a 	orr.w	r2, r2, #10
 8003d84:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e005      	b.n	8003da4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
 8003da2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d008      	beq.n	8003dd6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e020      	b.n	8003e18 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 020e 	bic.w	r2, r2, #14
 8003de4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2101      	movs	r1, #1
 8003e00:	fa01 f202 	lsl.w	r2, r1, r2
 8003e04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d005      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
 8003e44:	e051      	b.n	8003eea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 020e 	bic.w	r2, r2, #14
 8003e54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0201 	bic.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <HAL_DMA_Abort_IT+0xd0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d029      	beq.n	8003ec4 <HAL_DMA_Abort_IT+0xa0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a20      	ldr	r2, [pc, #128]	; (8003ef8 <HAL_DMA_Abort_IT+0xd4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d022      	beq.n	8003ec0 <HAL_DMA_Abort_IT+0x9c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <HAL_DMA_Abort_IT+0xd8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d01a      	beq.n	8003eba <HAL_DMA_Abort_IT+0x96>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <HAL_DMA_Abort_IT+0xdc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d012      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x90>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <HAL_DMA_Abort_IT+0xe0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00a      	beq.n	8003eae <HAL_DMA_Abort_IT+0x8a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <HAL_DMA_Abort_IT+0xe4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d102      	bne.n	8003ea8 <HAL_DMA_Abort_IT+0x84>
 8003ea2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ea6:	e00e      	b.n	8003ec6 <HAL_DMA_Abort_IT+0xa2>
 8003ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eac:	e00b      	b.n	8003ec6 <HAL_DMA_Abort_IT+0xa2>
 8003eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eb2:	e008      	b.n	8003ec6 <HAL_DMA_Abort_IT+0xa2>
 8003eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb8:	e005      	b.n	8003ec6 <HAL_DMA_Abort_IT+0xa2>
 8003eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ebe:	e002      	b.n	8003ec6 <HAL_DMA_Abort_IT+0xa2>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	e000      	b.n	8003ec6 <HAL_DMA_Abort_IT+0xa2>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <HAL_DMA_Abort_IT+0xe8>)
 8003ec8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
    } 
  }
  return status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40020008 	.word	0x40020008
 8003ef8:	4002001c 	.word	0x4002001c
 8003efc:	40020030 	.word	0x40020030
 8003f00:	40020044 	.word	0x40020044
 8003f04:	40020058 	.word	0x40020058
 8003f08:	4002006c 	.word	0x4002006c
 8003f0c:	40020000 	.word	0x40020000

08003f10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d04f      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0xc8>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04a      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0204 	bic.w	r2, r2, #4
 8003f5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a66      	ldr	r2, [pc, #408]	; (8004100 <HAL_DMA_IRQHandler+0x1f0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d029      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xae>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a65      	ldr	r2, [pc, #404]	; (8004104 <HAL_DMA_IRQHandler+0x1f4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d022      	beq.n	8003fba <HAL_DMA_IRQHandler+0xaa>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a63      	ldr	r2, [pc, #396]	; (8004108 <HAL_DMA_IRQHandler+0x1f8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01a      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0xa4>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a62      	ldr	r2, [pc, #392]	; (800410c <HAL_DMA_IRQHandler+0x1fc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d012      	beq.n	8003fae <HAL_DMA_IRQHandler+0x9e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a60      	ldr	r2, [pc, #384]	; (8004110 <HAL_DMA_IRQHandler+0x200>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00a      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x98>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a5f      	ldr	r2, [pc, #380]	; (8004114 <HAL_DMA_IRQHandler+0x204>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d102      	bne.n	8003fa2 <HAL_DMA_IRQHandler+0x92>
 8003f9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fa0:	e00e      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xb0>
 8003fa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fa6:	e00b      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xb0>
 8003fa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fac:	e008      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xb0>
 8003fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fb2:	e005      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xb0>
 8003fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb8:	e002      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xb0>
 8003fba:	2340      	movs	r3, #64	; 0x40
 8003fbc:	e000      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xb0>
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	4a55      	ldr	r2, [pc, #340]	; (8004118 <HAL_DMA_IRQHandler+0x208>)
 8003fc2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8094 	beq.w	80040f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003fd6:	e08e      	b.n	80040f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	2202      	movs	r2, #2
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d056      	beq.n	8004096 <HAL_DMA_IRQHandler+0x186>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d051      	beq.n	8004096 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10b      	bne.n	8004018 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 020a 	bic.w	r2, r2, #10
 800400e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a38      	ldr	r2, [pc, #224]	; (8004100 <HAL_DMA_IRQHandler+0x1f0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d029      	beq.n	8004076 <HAL_DMA_IRQHandler+0x166>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a37      	ldr	r2, [pc, #220]	; (8004104 <HAL_DMA_IRQHandler+0x1f4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <HAL_DMA_IRQHandler+0x162>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a35      	ldr	r2, [pc, #212]	; (8004108 <HAL_DMA_IRQHandler+0x1f8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01a      	beq.n	800406c <HAL_DMA_IRQHandler+0x15c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a34      	ldr	r2, [pc, #208]	; (800410c <HAL_DMA_IRQHandler+0x1fc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d012      	beq.n	8004066 <HAL_DMA_IRQHandler+0x156>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a32      	ldr	r2, [pc, #200]	; (8004110 <HAL_DMA_IRQHandler+0x200>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00a      	beq.n	8004060 <HAL_DMA_IRQHandler+0x150>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a31      	ldr	r2, [pc, #196]	; (8004114 <HAL_DMA_IRQHandler+0x204>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d102      	bne.n	800405a <HAL_DMA_IRQHandler+0x14a>
 8004054:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004058:	e00e      	b.n	8004078 <HAL_DMA_IRQHandler+0x168>
 800405a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800405e:	e00b      	b.n	8004078 <HAL_DMA_IRQHandler+0x168>
 8004060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004064:	e008      	b.n	8004078 <HAL_DMA_IRQHandler+0x168>
 8004066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800406a:	e005      	b.n	8004078 <HAL_DMA_IRQHandler+0x168>
 800406c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004070:	e002      	b.n	8004078 <HAL_DMA_IRQHandler+0x168>
 8004072:	2320      	movs	r3, #32
 8004074:	e000      	b.n	8004078 <HAL_DMA_IRQHandler+0x168>
 8004076:	2302      	movs	r3, #2
 8004078:	4a27      	ldr	r2, [pc, #156]	; (8004118 <HAL_DMA_IRQHandler+0x208>)
 800407a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	d034      	beq.n	80040f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004094:	e02f      	b.n	80040f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2208      	movs	r2, #8
 800409c:	409a      	lsls	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d028      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x1e8>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d023      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 020e 	bic.w	r2, r2, #14
 80040be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	2101      	movs	r1, #1
 80040ca:	fa01 f202 	lsl.w	r2, r1, r2
 80040ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	4798      	blx	r3
    }
  }
  return;
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
}
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40020008 	.word	0x40020008
 8004104:	4002001c 	.word	0x4002001c
 8004108:	40020030 	.word	0x40020030
 800410c:	40020044 	.word	0x40020044
 8004110:	40020058 	.word	0x40020058
 8004114:	4002006c 	.word	0x4002006c
 8004118:	40020000 	.word	0x40020000

0800411c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	2101      	movs	r1, #1
 8004134:	fa01 f202 	lsl.w	r2, r1, r2
 8004138:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b10      	cmp	r3, #16
 8004148:	d108      	bne.n	800415c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800415a:	e007      	b.n	800416c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
	...

08004178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004178:	b480      	push	{r7}
 800417a:	b08b      	sub	sp, #44	; 0x2c
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004182:	2300      	movs	r3, #0
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004186:	2300      	movs	r3, #0
 8004188:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800418a:	e169      	b.n	8004460 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800418c:	2201      	movs	r2, #1
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	f040 8158 	bne.w	800445a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4a9a      	ldr	r2, [pc, #616]	; (8004418 <HAL_GPIO_Init+0x2a0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d05e      	beq.n	8004272 <HAL_GPIO_Init+0xfa>
 80041b4:	4a98      	ldr	r2, [pc, #608]	; (8004418 <HAL_GPIO_Init+0x2a0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d875      	bhi.n	80042a6 <HAL_GPIO_Init+0x12e>
 80041ba:	4a98      	ldr	r2, [pc, #608]	; (800441c <HAL_GPIO_Init+0x2a4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d058      	beq.n	8004272 <HAL_GPIO_Init+0xfa>
 80041c0:	4a96      	ldr	r2, [pc, #600]	; (800441c <HAL_GPIO_Init+0x2a4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d86f      	bhi.n	80042a6 <HAL_GPIO_Init+0x12e>
 80041c6:	4a96      	ldr	r2, [pc, #600]	; (8004420 <HAL_GPIO_Init+0x2a8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d052      	beq.n	8004272 <HAL_GPIO_Init+0xfa>
 80041cc:	4a94      	ldr	r2, [pc, #592]	; (8004420 <HAL_GPIO_Init+0x2a8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d869      	bhi.n	80042a6 <HAL_GPIO_Init+0x12e>
 80041d2:	4a94      	ldr	r2, [pc, #592]	; (8004424 <HAL_GPIO_Init+0x2ac>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d04c      	beq.n	8004272 <HAL_GPIO_Init+0xfa>
 80041d8:	4a92      	ldr	r2, [pc, #584]	; (8004424 <HAL_GPIO_Init+0x2ac>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d863      	bhi.n	80042a6 <HAL_GPIO_Init+0x12e>
 80041de:	4a92      	ldr	r2, [pc, #584]	; (8004428 <HAL_GPIO_Init+0x2b0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d046      	beq.n	8004272 <HAL_GPIO_Init+0xfa>
 80041e4:	4a90      	ldr	r2, [pc, #576]	; (8004428 <HAL_GPIO_Init+0x2b0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d85d      	bhi.n	80042a6 <HAL_GPIO_Init+0x12e>
 80041ea:	2b12      	cmp	r3, #18
 80041ec:	d82a      	bhi.n	8004244 <HAL_GPIO_Init+0xcc>
 80041ee:	2b12      	cmp	r3, #18
 80041f0:	d859      	bhi.n	80042a6 <HAL_GPIO_Init+0x12e>
 80041f2:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <HAL_GPIO_Init+0x80>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	08004273 	.word	0x08004273
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	0800425f 	.word	0x0800425f
 8004204:	080042a1 	.word	0x080042a1
 8004208:	080042a7 	.word	0x080042a7
 800420c:	080042a7 	.word	0x080042a7
 8004210:	080042a7 	.word	0x080042a7
 8004214:	080042a7 	.word	0x080042a7
 8004218:	080042a7 	.word	0x080042a7
 800421c:	080042a7 	.word	0x080042a7
 8004220:	080042a7 	.word	0x080042a7
 8004224:	080042a7 	.word	0x080042a7
 8004228:	080042a7 	.word	0x080042a7
 800422c:	080042a7 	.word	0x080042a7
 8004230:	080042a7 	.word	0x080042a7
 8004234:	080042a7 	.word	0x080042a7
 8004238:	080042a7 	.word	0x080042a7
 800423c:	08004255 	.word	0x08004255
 8004240:	08004269 	.word	0x08004269
 8004244:	4a79      	ldr	r2, [pc, #484]	; (800442c <HAL_GPIO_Init+0x2b4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800424a:	e02c      	b.n	80042a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	623b      	str	r3, [r7, #32]
          break;
 8004252:	e029      	b.n	80042a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	3304      	adds	r3, #4
 800425a:	623b      	str	r3, [r7, #32]
          break;
 800425c:	e024      	b.n	80042a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	3308      	adds	r3, #8
 8004264:	623b      	str	r3, [r7, #32]
          break;
 8004266:	e01f      	b.n	80042a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	330c      	adds	r3, #12
 800426e:	623b      	str	r3, [r7, #32]
          break;
 8004270:	e01a      	b.n	80042a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d102      	bne.n	8004280 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800427a:	2304      	movs	r3, #4
 800427c:	623b      	str	r3, [r7, #32]
          break;
 800427e:	e013      	b.n	80042a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d105      	bne.n	8004294 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004288:	2308      	movs	r3, #8
 800428a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	611a      	str	r2, [r3, #16]
          break;
 8004292:	e009      	b.n	80042a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004294:	2308      	movs	r3, #8
 8004296:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	615a      	str	r2, [r3, #20]
          break;
 800429e:	e003      	b.n	80042a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042a0:	2300      	movs	r3, #0
 80042a2:	623b      	str	r3, [r7, #32]
          break;
 80042a4:	e000      	b.n	80042a8 <HAL_GPIO_Init+0x130>
          break;
 80042a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	2bff      	cmp	r3, #255	; 0xff
 80042ac:	d801      	bhi.n	80042b2 <HAL_GPIO_Init+0x13a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	e001      	b.n	80042b6 <HAL_GPIO_Init+0x13e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2bff      	cmp	r3, #255	; 0xff
 80042bc:	d802      	bhi.n	80042c4 <HAL_GPIO_Init+0x14c>
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	e002      	b.n	80042ca <HAL_GPIO_Init+0x152>
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	3b08      	subs	r3, #8
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	210f      	movs	r1, #15
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	fa01 f303 	lsl.w	r3, r1, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	401a      	ands	r2, r3
 80042dc:	6a39      	ldr	r1, [r7, #32]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	431a      	orrs	r2, r3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80b1 	beq.w	800445a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042f8:	4b4d      	ldr	r3, [pc, #308]	; (8004430 <HAL_GPIO_Init+0x2b8>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	4a4c      	ldr	r2, [pc, #304]	; (8004430 <HAL_GPIO_Init+0x2b8>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6193      	str	r3, [r2, #24]
 8004304:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <HAL_GPIO_Init+0x2b8>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004310:	4a48      	ldr	r2, [pc, #288]	; (8004434 <HAL_GPIO_Init+0x2bc>)
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	3302      	adds	r3, #2
 8004318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	220f      	movs	r2, #15
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a40      	ldr	r2, [pc, #256]	; (8004438 <HAL_GPIO_Init+0x2c0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <HAL_GPIO_Init+0x1ec>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a3f      	ldr	r2, [pc, #252]	; (800443c <HAL_GPIO_Init+0x2c4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00d      	beq.n	8004360 <HAL_GPIO_Init+0x1e8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3e      	ldr	r2, [pc, #248]	; (8004440 <HAL_GPIO_Init+0x2c8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <HAL_GPIO_Init+0x1e4>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a3d      	ldr	r2, [pc, #244]	; (8004444 <HAL_GPIO_Init+0x2cc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d101      	bne.n	8004358 <HAL_GPIO_Init+0x1e0>
 8004354:	2303      	movs	r3, #3
 8004356:	e006      	b.n	8004366 <HAL_GPIO_Init+0x1ee>
 8004358:	2304      	movs	r3, #4
 800435a:	e004      	b.n	8004366 <HAL_GPIO_Init+0x1ee>
 800435c:	2302      	movs	r3, #2
 800435e:	e002      	b.n	8004366 <HAL_GPIO_Init+0x1ee>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_GPIO_Init+0x1ee>
 8004364:	2300      	movs	r3, #0
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	f002 0203 	and.w	r2, r2, #3
 800436c:	0092      	lsls	r2, r2, #2
 800436e:	4093      	lsls	r3, r2
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004376:	492f      	ldr	r1, [pc, #188]	; (8004434 <HAL_GPIO_Init+0x2bc>)
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	3302      	adds	r3, #2
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d006      	beq.n	800439e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004390:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	492c      	ldr	r1, [pc, #176]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]
 800439c:	e006      	b.n	80043ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800439e:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	4928      	ldr	r1, [pc, #160]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	4922      	ldr	r1, [pc, #136]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
 80043c4:	e006      	b.n	80043d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	491e      	ldr	r1, [pc, #120]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d006      	beq.n	80043ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	4918      	ldr	r1, [pc, #96]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]
 80043ec:	e006      	b.n	80043fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	4914      	ldr	r1, [pc, #80]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d021      	beq.n	800444c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	4313      	orrs	r3, r2
 8004412:	60cb      	str	r3, [r1, #12]
 8004414:	e021      	b.n	800445a <HAL_GPIO_Init+0x2e2>
 8004416:	bf00      	nop
 8004418:	10320000 	.word	0x10320000
 800441c:	10310000 	.word	0x10310000
 8004420:	10220000 	.word	0x10220000
 8004424:	10210000 	.word	0x10210000
 8004428:	10120000 	.word	0x10120000
 800442c:	10110000 	.word	0x10110000
 8004430:	40021000 	.word	0x40021000
 8004434:	40010000 	.word	0x40010000
 8004438:	40010800 	.word	0x40010800
 800443c:	40010c00 	.word	0x40010c00
 8004440:	40011000 	.word	0x40011000
 8004444:	40011400 	.word	0x40011400
 8004448:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_GPIO_Init+0x304>)
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	43db      	mvns	r3, r3
 8004454:	4909      	ldr	r1, [pc, #36]	; (800447c <HAL_GPIO_Init+0x304>)
 8004456:	4013      	ands	r3, r2
 8004458:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	3301      	adds	r3, #1
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	fa22 f303 	lsr.w	r3, r2, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	f47f ae8e 	bne.w	800418c <HAL_GPIO_Init+0x14>
  }
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	372c      	adds	r7, #44	; 0x2c
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	40010400 	.word	0x40010400

08004480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	887b      	ldrh	r3, [r7, #2]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e001      	b.n	80044a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	807b      	strh	r3, [r7, #2]
 80044ba:	4613      	mov	r3, r2
 80044bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044be:	787b      	ldrb	r3, [r7, #1]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044c4:	887a      	ldrh	r2, [r7, #2]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044ca:	e003      	b.n	80044d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044cc:	887b      	ldrh	r3, [r7, #2]
 80044ce:	041a      	lsls	r2, r3, #16
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	611a      	str	r2, [r3, #16]
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
	...

080044e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044f6:	4a05      	ldr	r2, [pc, #20]	; (800450c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fd fd04 	bl	8001f0c <HAL_GPIO_EXTI_Callback>
  }
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40010400 	.word	0x40010400

08004510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e12b      	b.n	800477a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd f802 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	; 0x24
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004574:	f001 fcce 	bl	8005f14 <HAL_RCC_GetPCLK1Freq>
 8004578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4a81      	ldr	r2, [pc, #516]	; (8004784 <HAL_I2C_Init+0x274>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d807      	bhi.n	8004594 <HAL_I2C_Init+0x84>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a80      	ldr	r2, [pc, #512]	; (8004788 <HAL_I2C_Init+0x278>)
 8004588:	4293      	cmp	r3, r2
 800458a:	bf94      	ite	ls
 800458c:	2301      	movls	r3, #1
 800458e:	2300      	movhi	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e006      	b.n	80045a2 <HAL_I2C_Init+0x92>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a7d      	ldr	r2, [pc, #500]	; (800478c <HAL_I2C_Init+0x27c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	bf94      	ite	ls
 800459c:	2301      	movls	r3, #1
 800459e:	2300      	movhi	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0e7      	b.n	800477a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a78      	ldr	r2, [pc, #480]	; (8004790 <HAL_I2C_Init+0x280>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	0c9b      	lsrs	r3, r3, #18
 80045b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a6a      	ldr	r2, [pc, #424]	; (8004784 <HAL_I2C_Init+0x274>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <HAL_I2C_Init+0xd4>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	3301      	adds	r3, #1
 80045e2:	e009      	b.n	80045f8 <HAL_I2C_Init+0xe8>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	4a69      	ldr	r2, [pc, #420]	; (8004794 <HAL_I2C_Init+0x284>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	3301      	adds	r3, #1
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800460a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	495c      	ldr	r1, [pc, #368]	; (8004784 <HAL_I2C_Init+0x274>)
 8004614:	428b      	cmp	r3, r1
 8004616:	d819      	bhi.n	800464c <HAL_I2C_Init+0x13c>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1e59      	subs	r1, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	fbb1 f3f3 	udiv	r3, r1, r3
 8004626:	1c59      	adds	r1, r3, #1
 8004628:	f640 73fc 	movw	r3, #4092	; 0xffc
 800462c:	400b      	ands	r3, r1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_I2C_Init+0x138>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1e59      	subs	r1, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004640:	3301      	adds	r3, #1
 8004642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004646:	e051      	b.n	80046ec <HAL_I2C_Init+0x1dc>
 8004648:	2304      	movs	r3, #4
 800464a:	e04f      	b.n	80046ec <HAL_I2C_Init+0x1dc>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d111      	bne.n	8004678 <HAL_I2C_Init+0x168>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1e58      	subs	r0, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	440b      	add	r3, r1
 8004662:	fbb0 f3f3 	udiv	r3, r0, r3
 8004666:	3301      	adds	r3, #1
 8004668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e012      	b.n	800469e <HAL_I2C_Init+0x18e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e58      	subs	r0, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	0099      	lsls	r1, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	fbb0 f3f3 	udiv	r3, r0, r3
 800468e:	3301      	adds	r3, #1
 8004690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_Init+0x196>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e022      	b.n	80046ec <HAL_I2C_Init+0x1dc>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10e      	bne.n	80046cc <HAL_I2C_Init+0x1bc>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1e58      	subs	r0, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	460b      	mov	r3, r1
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	440b      	add	r3, r1
 80046bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ca:	e00f      	b.n	80046ec <HAL_I2C_Init+0x1dc>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1e58      	subs	r0, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	0099      	lsls	r1, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e2:	3301      	adds	r3, #1
 80046e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	6809      	ldr	r1, [r1, #0]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800471a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6911      	ldr	r1, [r2, #16]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	4311      	orrs	r1, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	430b      	orrs	r3, r1
 800472e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	000186a0 	.word	0x000186a0
 8004788:	001e847f 	.word	0x001e847f
 800478c:	003d08ff 	.word	0x003d08ff
 8004790:	431bde83 	.word	0x431bde83
 8004794:	10624dd3 	.word	0x10624dd3

08004798 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	817b      	strh	r3, [r7, #10]
 80047aa:	460b      	mov	r3, r1
 80047ac:	813b      	strh	r3, [r7, #8]
 80047ae:	4613      	mov	r3, r2
 80047b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047b2:	f7fe fcdb 	bl	800316c <HAL_GetTick>
 80047b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	f040 80d9 	bne.w	8004978 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2319      	movs	r3, #25
 80047cc:	2201      	movs	r2, #1
 80047ce:	496d      	ldr	r1, [pc, #436]	; (8004984 <HAL_I2C_Mem_Write+0x1ec>)
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fdef 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
 80047de:	e0cc      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_I2C_Mem_Write+0x56>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e0c5      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d007      	beq.n	8004814 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2221      	movs	r2, #33	; 0x21
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2240      	movs	r2, #64	; 0x40
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a4d      	ldr	r2, [pc, #308]	; (8004988 <HAL_I2C_Mem_Write+0x1f0>)
 8004854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004856:	88f8      	ldrh	r0, [r7, #6]
 8004858:	893a      	ldrh	r2, [r7, #8]
 800485a:	8979      	ldrh	r1, [r7, #10]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4603      	mov	r3, r0
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fc26 	bl	80050b8 <I2C_RequestMemoryWrite>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d052      	beq.n	8004918 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e081      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fe70 	bl	8005560 <I2C_WaitOnTXEFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b04      	cmp	r3, #4
 800488c:	d107      	bne.n	800489e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e06b      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	781a      	ldrb	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d11b      	bne.n	8004918 <HAL_I2C_Mem_Write+0x180>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d017      	beq.n	8004918 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1aa      	bne.n	8004876 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fe5c 	bl	80055e2 <I2C_WaitOnBTFFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	2b04      	cmp	r3, #4
 8004936:	d107      	bne.n	8004948 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e016      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	e000      	b.n	800497a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
  }
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	00100002 	.word	0x00100002
 8004988:	ffff0000 	.word	0xffff0000

0800498c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08c      	sub	sp, #48	; 0x30
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	4603      	mov	r3, r0
 800499c:	817b      	strh	r3, [r7, #10]
 800499e:	460b      	mov	r3, r1
 80049a0:	813b      	strh	r3, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049aa:	f7fe fbdf 	bl	800316c <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	f040 8244 	bne.w	8004e46 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	2319      	movs	r3, #25
 80049c4:	2201      	movs	r2, #1
 80049c6:	4982      	ldr	r1, [pc, #520]	; (8004bd0 <HAL_I2C_Mem_Read+0x244>)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fcf3 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
 80049d6:	e237      	b.n	8004e48 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_I2C_Mem_Read+0x5a>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e230      	b.n	8004e48 <HAL_I2C_Mem_Read+0x4bc>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d007      	beq.n	8004a0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2222      	movs	r2, #34	; 0x22
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2240      	movs	r2, #64	; 0x40
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a62      	ldr	r2, [pc, #392]	; (8004bd4 <HAL_I2C_Mem_Read+0x248>)
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a4e:	88f8      	ldrh	r0, [r7, #6]
 8004a50:	893a      	ldrh	r2, [r7, #8]
 8004a52:	8979      	ldrh	r1, [r7, #10]
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 fbc0 	bl	80051e4 <I2C_RequestMemoryRead>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e1ec      	b.n	8004e48 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d113      	bne.n	8004a9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e1c0      	b.n	8004e20 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d11e      	bne.n	8004ae4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ab6:	b672      	cpsid	i
}
 8004ab8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ae0:	b662      	cpsie	i
}
 8004ae2:	e035      	b.n	8004b50 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d11e      	bne.n	8004b2a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004afa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004afc:	b672      	cpsid	i
}
 8004afe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b26:	b662      	cpsie	i
}
 8004b28:	e012      	b.n	8004b50 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b38:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b50:	e166      	b.n	8004e20 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	f200 811f 	bhi.w	8004d9a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d123      	bne.n	8004bac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fd7b 	bl	8005664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e167      	b.n	8004e48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004baa:	e139      	b.n	8004e20 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d152      	bne.n	8004c5a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4906      	ldr	r1, [pc, #24]	; (8004bd8 <HAL_I2C_Mem_Read+0x24c>)
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fbf8 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e13c      	b.n	8004e48 <HAL_I2C_Mem_Read+0x4bc>
 8004bce:	bf00      	nop
 8004bd0:	00100002 	.word	0x00100002
 8004bd4:	ffff0000 	.word	0xffff0000
 8004bd8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bdc:	b672      	cpsid	i
}
 8004bde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c22:	b662      	cpsie	i
}
 8004c24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c58:	e0e2      	b.n	8004e20 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	2200      	movs	r2, #0
 8004c62:	497b      	ldr	r1, [pc, #492]	; (8004e50 <HAL_I2C_Mem_Read+0x4c4>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fba5 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0e9      	b.n	8004e48 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c84:	b672      	cpsid	i
}
 8004c86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cba:	4b66      	ldr	r3, [pc, #408]	; (8004e54 <HAL_I2C_Mem_Read+0x4c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	08db      	lsrs	r3, r3, #3
 8004cc0:	4a65      	ldr	r2, [pc, #404]	; (8004e58 <HAL_I2C_Mem_Read+0x4cc>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	0a1a      	lsrs	r2, r3, #8
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	00da      	lsls	r2, r3, #3
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d118      	bne.n	8004d12 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004d02:	b662      	cpsie	i
}
 8004d04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e09a      	b.n	8004e48 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d1d9      	bne.n	8004cd4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d62:	b662      	cpsie	i
}
 8004d64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d98:	e042      	b.n	8004e20 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fc60 	bl	8005664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e04c      	b.n	8004e48 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d118      	bne.n	8004e20 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f47f ae94 	bne.w	8004b52 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e000      	b.n	8004e48 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004e46:	2302      	movs	r3, #2
  }
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3728      	adds	r7, #40	; 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	00010004 	.word	0x00010004
 8004e54:	20000018 	.word	0x20000018
 8004e58:	14f8b589 	.word	0x14f8b589

08004e5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	; 0x28
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e6c:	f7fe f97e 	bl	800316c <HAL_GetTick>
 8004e70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004e72:	2301      	movs	r3, #1
 8004e74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	f040 8111 	bne.w	80050a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	2319      	movs	r3, #25
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4988      	ldr	r1, [pc, #544]	; (80050b0 <HAL_I2C_IsDeviceReady+0x254>)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fa90 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e104      	b.n	80050a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_I2C_IsDeviceReady+0x50>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e0fd      	b.n	80050a8 <HAL_I2C_IsDeviceReady+0x24c>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d007      	beq.n	8004ed2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2224      	movs	r2, #36	; 0x24
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a70      	ldr	r2, [pc, #448]	; (80050b4 <HAL_I2C_IsDeviceReady+0x258>)
 8004ef4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fa4e 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2c:	d103      	bne.n	8004f36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0b6      	b.n	80050a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f3a:	897b      	ldrh	r3, [r7, #10]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f4a:	f7fe f90f 	bl	800316c <HAL_GetTick>
 8004f4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f7e:	e025      	b.n	8004fcc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fe f8f4 	bl	800316c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <HAL_I2C_IsDeviceReady+0x13a>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	22a0      	movs	r2, #160	; 0xa0
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2ba0      	cmp	r3, #160	; 0xa0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_I2C_IsDeviceReady+0x188>
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <HAL_I2C_IsDeviceReady+0x188>
 8004fde:	7dbb      	ldrb	r3, [r7, #22]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0cd      	beq.n	8004f80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d129      	bne.n	800504e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005008:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500a:	2300      	movs	r3, #0
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2319      	movs	r3, #25
 8005026:	2201      	movs	r2, #1
 8005028:	4921      	ldr	r1, [pc, #132]	; (80050b0 <HAL_I2C_IsDeviceReady+0x254>)
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f9c2 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e036      	b.n	80050a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e02c      	b.n	80050a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005066:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2319      	movs	r3, #25
 800506e:	2201      	movs	r2, #1
 8005070:	490f      	ldr	r1, [pc, #60]	; (80050b0 <HAL_I2C_IsDeviceReady+0x254>)
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f99e 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e012      	b.n	80050a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	3301      	adds	r3, #1
 8005086:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	f4ff af32 	bcc.w	8004ef6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050a6:	2302      	movs	r3, #2
  }
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	00100002 	.word	0x00100002
 80050b4:	ffff0000 	.word	0xffff0000

080050b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	461a      	mov	r2, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	817b      	strh	r3, [r7, #10]
 80050ca:	460b      	mov	r3, r1
 80050cc:	813b      	strh	r3, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f960 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005108:	d103      	bne.n	8005112 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e05f      	b.n	80051d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005116:	897b      	ldrh	r3, [r7, #10]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	492d      	ldr	r1, [pc, #180]	; (80051e0 <I2C_RequestMemoryWrite+0x128>)
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f998 	bl	8005462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e04c      	b.n	80051d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	6a39      	ldr	r1, [r7, #32]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fa02 	bl	8005560 <I2C_WaitOnTXEFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	2b04      	cmp	r3, #4
 8005168:	d107      	bne.n	800517a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e02b      	b.n	80051d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005184:	893b      	ldrh	r3, [r7, #8]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	611a      	str	r2, [r3, #16]
 800518e:	e021      	b.n	80051d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005190:	893b      	ldrh	r3, [r7, #8]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	b29b      	uxth	r3, r3
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	6a39      	ldr	r1, [r7, #32]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f9dc 	bl	8005560 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d107      	bne.n	80051c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e005      	b.n	80051d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ca:	893b      	ldrh	r3, [r7, #8]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	00010002 	.word	0x00010002

080051e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	461a      	mov	r2, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	817b      	strh	r3, [r7, #10]
 80051f6:	460b      	mov	r3, r1
 80051f8:	813b      	strh	r3, [r7, #8]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800520c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800521c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	2200      	movs	r2, #0
 8005226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f8c2 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00d      	beq.n	8005252 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005244:	d103      	bne.n	800524e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e0aa      	b.n	80053a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005252:	897b      	ldrh	r3, [r7, #10]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	6a3a      	ldr	r2, [r7, #32]
 8005266:	4952      	ldr	r1, [pc, #328]	; (80053b0 <I2C_RequestMemoryRead+0x1cc>)
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f8fa 	bl	8005462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e097      	b.n	80053a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800528e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005290:	6a39      	ldr	r1, [r7, #32]
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f964 	bl	8005560 <I2C_WaitOnTXEFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00d      	beq.n	80052ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d107      	bne.n	80052b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e076      	b.n	80053a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d105      	bne.n	80052cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052c0:	893b      	ldrh	r3, [r7, #8]
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	611a      	str	r2, [r3, #16]
 80052ca:	e021      	b.n	8005310 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052cc:	893b      	ldrh	r3, [r7, #8]
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052dc:	6a39      	ldr	r1, [r7, #32]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f93e 	bl	8005560 <I2C_WaitOnTXEFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00d      	beq.n	8005306 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d107      	bne.n	8005302 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e050      	b.n	80053a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005306:	893b      	ldrh	r3, [r7, #8]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005312:	6a39      	ldr	r1, [r7, #32]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f923 	bl	8005560 <I2C_WaitOnTXEFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00d      	beq.n	800533c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	2b04      	cmp	r3, #4
 8005326:	d107      	bne.n	8005338 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005336:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e035      	b.n	80053a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800534a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	2200      	movs	r2, #0
 8005354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f82b 	bl	80053b4 <I2C_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00d      	beq.n	8005380 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005372:	d103      	bne.n	800537c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800537a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e013      	b.n	80053a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005380:	897b      	ldrh	r3, [r7, #10]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	b2da      	uxtb	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	6a3a      	ldr	r2, [r7, #32]
 8005394:	4906      	ldr	r1, [pc, #24]	; (80053b0 <I2C_RequestMemoryRead+0x1cc>)
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f863 	bl	8005462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	00010002 	.word	0x00010002

080053b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c4:	e025      	b.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d021      	beq.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ce:	f7fd fecd 	bl	800316c <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d302      	bcc.n	80053e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d116      	bne.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e023      	b.n	800545a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d10d      	bne.n	8005438 <I2C_WaitOnFlagUntilTimeout+0x84>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	43da      	mvns	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	e00c      	b.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	43da      	mvns	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	429a      	cmp	r2, r3
 8005456:	d0b6      	beq.n	80053c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005470:	e051      	b.n	8005516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005480:	d123      	bne.n	80054ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005490:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800549a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f043 0204 	orr.w	r2, r3, #4
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e046      	b.n	8005558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d021      	beq.n	8005516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fd fe4b 	bl	800316c <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d116      	bne.n	8005516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e020      	b.n	8005558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10c      	bne.n	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	43da      	mvns	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4013      	ands	r3, r2
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	bf14      	ite	ne
 8005532:	2301      	movne	r3, #1
 8005534:	2300      	moveq	r3, #0
 8005536:	b2db      	uxtb	r3, r3
 8005538:	e00b      	b.n	8005552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	43da      	mvns	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4013      	ands	r3, r2
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d18d      	bne.n	8005472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800556c:	e02d      	b.n	80055ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f8ce 	bl	8005710 <I2C_IsAcknowledgeFailed>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e02d      	b.n	80055da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d021      	beq.n	80055ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005586:	f7fd fdf1 	bl	800316c <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	429a      	cmp	r2, r3
 8005594:	d302      	bcc.n	800559c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d116      	bne.n	80055ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0220 	orr.w	r2, r3, #32
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e007      	b.n	80055da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d4:	2b80      	cmp	r3, #128	; 0x80
 80055d6:	d1ca      	bne.n	800556e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055ee:	e02d      	b.n	800564c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f88d 	bl	8005710 <I2C_IsAcknowledgeFailed>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e02d      	b.n	800565c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d021      	beq.n	800564c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005608:	f7fd fdb0 	bl	800316c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d116      	bne.n	800564c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e007      	b.n	800565c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d1ca      	bne.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005670:	e042      	b.n	80056f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b10      	cmp	r3, #16
 800567e:	d119      	bne.n	80056b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0210 	mvn.w	r2, #16
 8005688:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e029      	b.n	8005708 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b4:	f7fd fd5a 	bl	800316c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d116      	bne.n	80056f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f043 0220 	orr.w	r2, r3, #32
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e007      	b.n	8005708 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d1b5      	bne.n	8005672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005726:	d11b      	bne.n	8005760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	f043 0204 	orr.w	r2, r3, #4
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e272      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8087 	beq.w	800589a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800578c:	4b92      	ldr	r3, [pc, #584]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b04      	cmp	r3, #4
 8005796:	d00c      	beq.n	80057b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005798:	4b8f      	ldr	r3, [pc, #572]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d112      	bne.n	80057ca <HAL_RCC_OscConfig+0x5e>
 80057a4:	4b8c      	ldr	r3, [pc, #560]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d10b      	bne.n	80057ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b2:	4b89      	ldr	r3, [pc, #548]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d06c      	beq.n	8005898 <HAL_RCC_OscConfig+0x12c>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d168      	bne.n	8005898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e24c      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d2:	d106      	bne.n	80057e2 <HAL_RCC_OscConfig+0x76>
 80057d4:	4b80      	ldr	r3, [pc, #512]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a7f      	ldr	r2, [pc, #508]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80057da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e02e      	b.n	8005840 <HAL_RCC_OscConfig+0xd4>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x98>
 80057ea:	4b7b      	ldr	r3, [pc, #492]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a7a      	ldr	r2, [pc, #488]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80057f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b78      	ldr	r3, [pc, #480]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a77      	ldr	r2, [pc, #476]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80057fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e01d      	b.n	8005840 <HAL_RCC_OscConfig+0xd4>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800580c:	d10c      	bne.n	8005828 <HAL_RCC_OscConfig+0xbc>
 800580e:	4b72      	ldr	r3, [pc, #456]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a71      	ldr	r2, [pc, #452]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 8005814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	4b6f      	ldr	r3, [pc, #444]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a6e      	ldr	r2, [pc, #440]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 8005820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e00b      	b.n	8005840 <HAL_RCC_OscConfig+0xd4>
 8005828:	4b6b      	ldr	r3, [pc, #428]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6a      	ldr	r2, [pc, #424]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 800582e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	4b68      	ldr	r3, [pc, #416]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a67      	ldr	r2, [pc, #412]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 800583a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d013      	beq.n	8005870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005848:	f7fd fc90 	bl	800316c <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005850:	f7fd fc8c 	bl	800316c <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	; 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e200      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005862:	4b5d      	ldr	r3, [pc, #372]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0f0      	beq.n	8005850 <HAL_RCC_OscConfig+0xe4>
 800586e:	e014      	b.n	800589a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005870:	f7fd fc7c 	bl	800316c <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fd fc78 	bl	800316c <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	; 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e1ec      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800588a:	4b53      	ldr	r3, [pc, #332]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0x10c>
 8005896:	e000      	b.n	800589a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d063      	beq.n	800596e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058a6:	4b4c      	ldr	r3, [pc, #304]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 030c 	and.w	r3, r3, #12
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058b2:	4b49      	ldr	r3, [pc, #292]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d11c      	bne.n	80058f8 <HAL_RCC_OscConfig+0x18c>
 80058be:	4b46      	ldr	r3, [pc, #280]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d116      	bne.n	80058f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ca:	4b43      	ldr	r3, [pc, #268]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_RCC_OscConfig+0x176>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d001      	beq.n	80058e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e1c0      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e2:	4b3d      	ldr	r3, [pc, #244]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4939      	ldr	r1, [pc, #228]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058f6:	e03a      	b.n	800596e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d020      	beq.n	8005942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005900:	4b36      	ldr	r3, [pc, #216]	; (80059dc <HAL_RCC_OscConfig+0x270>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fd fc31 	bl	800316c <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800590e:	f7fd fc2d 	bl	800316c <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e1a1      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005920:	4b2d      	ldr	r3, [pc, #180]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800592c:	4b2a      	ldr	r3, [pc, #168]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4927      	ldr	r1, [pc, #156]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 800593c:	4313      	orrs	r3, r2
 800593e:	600b      	str	r3, [r1, #0]
 8005940:	e015      	b.n	800596e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005942:	4b26      	ldr	r3, [pc, #152]	; (80059dc <HAL_RCC_OscConfig+0x270>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005948:	f7fd fc10 	bl	800316c <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005950:	f7fd fc0c 	bl	800316c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e180      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005962:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f0      	bne.n	8005950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d03a      	beq.n	80059f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d019      	beq.n	80059b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005982:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <HAL_RCC_OscConfig+0x274>)
 8005984:	2201      	movs	r2, #1
 8005986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005988:	f7fd fbf0 	bl	800316c <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005990:	f7fd fbec 	bl	800316c <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e160      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a2:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <HAL_RCC_OscConfig+0x26c>)
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80059ae:	2001      	movs	r0, #1
 80059b0:	f000 fad8 	bl	8005f64 <RCC_Delay>
 80059b4:	e01c      	b.n	80059f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <HAL_RCC_OscConfig+0x274>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059bc:	f7fd fbd6 	bl	800316c <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c2:	e00f      	b.n	80059e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c4:	f7fd fbd2 	bl	800316c <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d908      	bls.n	80059e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e146      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000
 80059dc:	42420000 	.word	0x42420000
 80059e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e4:	4b92      	ldr	r3, [pc, #584]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e9      	bne.n	80059c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80a6 	beq.w	8005b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059fe:	2300      	movs	r3, #0
 8005a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a02:	4b8b      	ldr	r3, [pc, #556]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10d      	bne.n	8005a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a0e:	4b88      	ldr	r3, [pc, #544]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4a87      	ldr	r2, [pc, #540]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a18:	61d3      	str	r3, [r2, #28]
 8005a1a:	4b85      	ldr	r3, [pc, #532]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a22:	60bb      	str	r3, [r7, #8]
 8005a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2a:	4b82      	ldr	r3, [pc, #520]	; (8005c34 <HAL_RCC_OscConfig+0x4c8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d118      	bne.n	8005a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a36:	4b7f      	ldr	r3, [pc, #508]	; (8005c34 <HAL_RCC_OscConfig+0x4c8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a7e      	ldr	r2, [pc, #504]	; (8005c34 <HAL_RCC_OscConfig+0x4c8>)
 8005a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a42:	f7fd fb93 	bl	800316c <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4a:	f7fd fb8f 	bl	800316c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b64      	cmp	r3, #100	; 0x64
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e103      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5c:	4b75      	ldr	r3, [pc, #468]	; (8005c34 <HAL_RCC_OscConfig+0x4c8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCC_OscConfig+0x312>
 8005a70:	4b6f      	ldr	r3, [pc, #444]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	4a6e      	ldr	r2, [pc, #440]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	6213      	str	r3, [r2, #32]
 8005a7c:	e02d      	b.n	8005ada <HAL_RCC_OscConfig+0x36e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x334>
 8005a86:	4b6a      	ldr	r3, [pc, #424]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	4a69      	ldr	r2, [pc, #420]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	6213      	str	r3, [r2, #32]
 8005a92:	4b67      	ldr	r3, [pc, #412]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	4a66      	ldr	r2, [pc, #408]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	f023 0304 	bic.w	r3, r3, #4
 8005a9c:	6213      	str	r3, [r2, #32]
 8005a9e:	e01c      	b.n	8005ada <HAL_RCC_OscConfig+0x36e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x356>
 8005aa8:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	4a60      	ldr	r2, [pc, #384]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6213      	str	r3, [r2, #32]
 8005ab4:	4b5e      	ldr	r3, [pc, #376]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	4a5d      	ldr	r2, [pc, #372]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	6213      	str	r3, [r2, #32]
 8005ac0:	e00b      	b.n	8005ada <HAL_RCC_OscConfig+0x36e>
 8005ac2:	4b5b      	ldr	r3, [pc, #364]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	4a5a      	ldr	r2, [pc, #360]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	6213      	str	r3, [r2, #32]
 8005ace:	4b58      	ldr	r3, [pc, #352]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	4a57      	ldr	r2, [pc, #348]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005ad4:	f023 0304 	bic.w	r3, r3, #4
 8005ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d015      	beq.n	8005b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae2:	f7fd fb43 	bl	800316c <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fd fb3f 	bl	800316c <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e0b1      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b00:	4b4b      	ldr	r3, [pc, #300]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0ee      	beq.n	8005aea <HAL_RCC_OscConfig+0x37e>
 8005b0c:	e014      	b.n	8005b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0e:	f7fd fb2d 	bl	800316c <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fd fb29 	bl	800316c <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e09b      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2c:	4b40      	ldr	r3, [pc, #256]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ee      	bne.n	8005b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d105      	bne.n	8005b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3e:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	4a3b      	ldr	r2, [pc, #236]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8087 	beq.w	8005c62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b54:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f003 030c 	and.w	r3, r3, #12
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d061      	beq.n	8005c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d146      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b68:	4b33      	ldr	r3, [pc, #204]	; (8005c38 <HAL_RCC_OscConfig+0x4cc>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6e:	f7fd fafd 	bl	800316c <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b76:	f7fd faf9 	bl	800316c <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e06d      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b88:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f0      	bne.n	8005b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9c:	d108      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b9e:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	4921      	ldr	r1, [pc, #132]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bb0:	4b1f      	ldr	r3, [pc, #124]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a19      	ldr	r1, [r3, #32]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	491b      	ldr	r1, [pc, #108]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <HAL_RCC_OscConfig+0x4cc>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bce:	f7fd facd 	bl	800316c <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd6:	f7fd fac9 	bl	800316c <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e03d      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005be8:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x46a>
 8005bf4:	e035      	b.n	8005c62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <HAL_RCC_OscConfig+0x4cc>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfc:	f7fd fab6 	bl	800316c <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c04:	f7fd fab2 	bl	800316c <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e026      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c16:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <HAL_RCC_OscConfig+0x4c4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f0      	bne.n	8005c04 <HAL_RCC_OscConfig+0x498>
 8005c22:	e01e      	b.n	8005c62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d107      	bne.n	8005c3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e019      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
 8005c30:	40021000 	.word	0x40021000
 8005c34:	40007000 	.word	0x40007000
 8005c38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <HAL_RCC_OscConfig+0x500>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d001      	beq.n	8005c62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40021000 	.word	0x40021000

08005c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0d0      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b6a      	ldr	r3, [pc, #424]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d910      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b67      	ldr	r3, [pc, #412]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 0207 	bic.w	r2, r3, #7
 8005c9a:	4965      	ldr	r1, [pc, #404]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca2:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0b8      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d020      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ccc:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a58      	ldr	r2, [pc, #352]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ce4:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4a52      	ldr	r2, [pc, #328]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005cea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cf0:	4b50      	ldr	r3, [pc, #320]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	494d      	ldr	r1, [pc, #308]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d040      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d107      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d16:	4b47      	ldr	r3, [pc, #284]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d115      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e07f      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2e:	4b41      	ldr	r3, [pc, #260]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e073      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3e:	4b3d      	ldr	r3, [pc, #244]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e06b      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d4e:	4b39      	ldr	r3, [pc, #228]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f023 0203 	bic.w	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	4936      	ldr	r1, [pc, #216]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d60:	f7fd fa04 	bl	800316c <HAL_GetTick>
 8005d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d66:	e00a      	b.n	8005d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d68:	f7fd fa00 	bl	800316c <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e053      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7e:	4b2d      	ldr	r3, [pc, #180]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 020c 	and.w	r2, r3, #12
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d1eb      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d210      	bcs.n	8005dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9e:	4b24      	ldr	r3, [pc, #144]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 0207 	bic.w	r2, r3, #7
 8005da6:	4922      	ldr	r1, [pc, #136]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e032      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4916      	ldr	r1, [pc, #88]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	490e      	ldr	r1, [pc, #56]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dfe:	f000 f821 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005e02:	4602      	mov	r2, r0
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	490a      	ldr	r1, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005e10:	5ccb      	ldrb	r3, [r1, r3]
 8005e12:	fa22 f303 	lsr.w	r3, r2, r3
 8005e16:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <HAL_RCC_ClockConfig+0x1cc>)
 8005e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e1a:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <HAL_RCC_ClockConfig+0x1d0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fd f962 	bl	80030e8 <HAL_InitTick>

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40022000 	.word	0x40022000
 8005e34:	40021000 	.word	0x40021000
 8005e38:	0800cb30 	.word	0x0800cb30
 8005e3c:	20000018 	.word	0x20000018
 8005e40:	2000001c 	.word	0x2000001c

08005e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	b490      	push	{r4, r7}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005e4a:	4b29      	ldr	r3, [pc, #164]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xac>)
 8005e4c:	1d3c      	adds	r4, r7, #4
 8005e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e54:	f240 2301 	movw	r3, #513	; 0x201
 8005e58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	2300      	movs	r3, #0
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e6e:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 030c 	and.w	r3, r3, #12
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d002      	beq.n	8005e84 <HAL_RCC_GetSysClockFreq+0x40>
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d003      	beq.n	8005e8a <HAL_RCC_GetSysClockFreq+0x46>
 8005e82:	e02b      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e84:	4b1c      	ldr	r3, [pc, #112]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e86:	623b      	str	r3, [r7, #32]
      break;
 8005e88:	e02b      	b.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	0c9b      	lsrs	r3, r3, #18
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	3328      	adds	r3, #40	; 0x28
 8005e94:	443b      	add	r3, r7
 8005e96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d012      	beq.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ea6:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	0c5b      	lsrs	r3, r3, #17
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	3328      	adds	r3, #40	; 0x28
 8005eb2:	443b      	add	r3, r7
 8005eb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005eb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4a0e      	ldr	r2, [pc, #56]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ebe:	fb03 f202 	mul.w	r2, r3, r2
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eca:	e004      	b.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4a0b      	ldr	r2, [pc, #44]	; (8005efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ed0:	fb02 f303 	mul.w	r3, r2, r3
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	623b      	str	r3, [r7, #32]
      break;
 8005eda:	e002      	b.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005edc:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ede:	623b      	str	r3, [r7, #32]
      break;
 8005ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3728      	adds	r7, #40	; 0x28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc90      	pop	{r4, r7}
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	0800cb10 	.word	0x0800cb10
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	007a1200 	.word	0x007a1200
 8005efc:	003d0900 	.word	0x003d0900

08005f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f04:	4b02      	ldr	r3, [pc, #8]	; (8005f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f06:	681b      	ldr	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr
 8005f10:	20000018 	.word	0x20000018

08005f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f18:	f7ff fff2 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	4903      	ldr	r1, [pc, #12]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f2a:	5ccb      	ldrb	r3, [r1, r3]
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000
 8005f38:	0800cb40 	.word	0x0800cb40

08005f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f40:	f7ff ffde 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	0adb      	lsrs	r3, r3, #11
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	4903      	ldr	r1, [pc, #12]	; (8005f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f52:	5ccb      	ldrb	r3, [r1, r3]
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	0800cb40 	.word	0x0800cb40

08005f64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <RCC_Delay+0x34>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <RCC_Delay+0x38>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	0a5b      	lsrs	r3, r3, #9
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f80:	bf00      	nop
  }
  while (Delay --);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1e5a      	subs	r2, r3, #1
 8005f86:	60fa      	str	r2, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f9      	bne.n	8005f80 <RCC_Delay+0x1c>
}
 8005f8c:	bf00      	nop
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr
 8005f98:	20000018 	.word	0x20000018
 8005f9c:	10624dd3 	.word	0x10624dd3

08005fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d07d      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc0:	4b4f      	ldr	r3, [pc, #316]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10d      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fcc:	4b4c      	ldr	r3, [pc, #304]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	4a4b      	ldr	r2, [pc, #300]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	61d3      	str	r3, [r2, #28]
 8005fd8:	4b49      	ldr	r3, [pc, #292]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe8:	4b46      	ldr	r3, [pc, #280]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d118      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ff4:	4b43      	ldr	r3, [pc, #268]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a42      	ldr	r2, [pc, #264]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006000:	f7fd f8b4 	bl	800316c <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006006:	e008      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006008:	f7fd f8b0 	bl	800316c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b64      	cmp	r3, #100	; 0x64
 8006014:	d901      	bls.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e06d      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601a:	4b3a      	ldr	r3, [pc, #232]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f0      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006026:	4b36      	ldr	r3, [pc, #216]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d02e      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	429a      	cmp	r2, r3
 8006042:	d027      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006044:	4b2e      	ldr	r3, [pc, #184]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800604e:	4b2e      	ldr	r3, [pc, #184]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006054:	4b2c      	ldr	r3, [pc, #176]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800605a:	4a29      	ldr	r2, [pc, #164]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d014      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606a:	f7fd f87f 	bl	800316c <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006070:	e00a      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006072:	f7fd f87b 	bl	800316c <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006080:	4293      	cmp	r3, r2
 8006082:	d901      	bls.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e036      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006088:	4b1d      	ldr	r3, [pc, #116]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0ee      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006094:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4917      	ldr	r1, [pc, #92]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d105      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	4a13      	ldr	r2, [pc, #76]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	490b      	ldr	r1, [pc, #44]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060e2:	4b07      	ldr	r3, [pc, #28]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	4904      	ldr	r1, [pc, #16]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000
 8006104:	40007000 	.word	0x40007000
 8006108:	42420440 	.word	0x42420440

0800610c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800610c:	b590      	push	{r4, r7, lr}
 800610e:	b08d      	sub	sp, #52	; 0x34
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006114:	4b58      	ldr	r3, [pc, #352]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006116:	f107 040c 	add.w	r4, r7, #12
 800611a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800611c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006120:	f240 2301 	movw	r3, #513	; 0x201
 8006124:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
 800612a:	2300      	movs	r3, #0
 800612c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612e:	2300      	movs	r3, #0
 8006130:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	2300      	movs	r3, #0
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b10      	cmp	r3, #16
 800613e:	d00a      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b10      	cmp	r3, #16
 8006144:	f200 808e 	bhi.w	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d049      	beq.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d079      	beq.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006154:	e086      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006156:	4b49      	ldr	r3, [pc, #292]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800615c:	4b47      	ldr	r3, [pc, #284]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d07f      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	0c9b      	lsrs	r3, r3, #18
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	3330      	adds	r3, #48	; 0x30
 8006172:	443b      	add	r3, r7
 8006174:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006178:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d017      	beq.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006184:	4b3d      	ldr	r3, [pc, #244]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	0c5b      	lsrs	r3, r3, #17
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	3330      	adds	r3, #48	; 0x30
 8006190:	443b      	add	r3, r7
 8006192:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00d      	beq.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80061a2:	4a37      	ldr	r2, [pc, #220]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	fb02 f303 	mul.w	r3, r2, r3
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b2:	e004      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	4a33      	ldr	r2, [pc, #204]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80061b8:	fb02 f303 	mul.w	r3, r2, r3
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80061be:	4b2f      	ldr	r3, [pc, #188]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ca:	d102      	bne.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80061d0:	e04a      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	4a2c      	ldr	r2, [pc, #176]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80061d8:	fba2 2303 	umull	r2, r3, r2, r3
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80061e0:	e042      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80061e2:	4b26      	ldr	r3, [pc, #152]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f2:	d108      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80061fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006202:	62bb      	str	r3, [r7, #40]	; 0x28
 8006204:	e01f      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006210:	d109      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006212:	4b1a      	ldr	r3, [pc, #104]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800621e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
 8006224:	e00f      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006230:	d11c      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800623e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006244:	e012      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006246:	e011      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006248:	f7ff fe78 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 800624c:	4602      	mov	r2, r0
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	0b9b      	lsrs	r3, r3, #14
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	3301      	adds	r3, #1
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006262:	e004      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006264:	bf00      	nop
 8006266:	e002      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006268:	bf00      	nop
 800626a:	e000      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800626c:	bf00      	nop
    }
  }
  return (frequency);
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006270:	4618      	mov	r0, r3
 8006272:	3734      	adds	r7, #52	; 0x34
 8006274:	46bd      	mov	sp, r7
 8006276:	bd90      	pop	{r4, r7, pc}
 8006278:	0800cb20 	.word	0x0800cb20
 800627c:	40021000 	.word	0x40021000
 8006280:	007a1200 	.word	0x007a1200
 8006284:	003d0900 	.word	0x003d0900
 8006288:	aaaaaaab 	.word	0xaaaaaaab

0800628c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e041      	b.n	8006322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc fd04 	bl	8002cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4619      	mov	r1, r3
 80062ca:	4610      	mov	r0, r2
 80062cc:	f000 ffd2 	bl	8007274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b01      	cmp	r3, #1
 800633e:	d001      	beq.n	8006344 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e032      	b.n	80063aa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a18      	ldr	r2, [pc, #96]	; (80063b4 <HAL_TIM_Base_Start+0x88>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00e      	beq.n	8006374 <HAL_TIM_Base_Start+0x48>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635e:	d009      	beq.n	8006374 <HAL_TIM_Base_Start+0x48>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <HAL_TIM_Base_Start+0x8c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d004      	beq.n	8006374 <HAL_TIM_Base_Start+0x48>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a13      	ldr	r2, [pc, #76]	; (80063bc <HAL_TIM_Base_Start+0x90>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d111      	bne.n	8006398 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b06      	cmp	r3, #6
 8006384:	d010      	beq.n	80063a8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0201 	orr.w	r2, r2, #1
 8006394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006396:	e007      	b.n	80063a8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800

080063c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d001      	beq.n	80063d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e03a      	b.n	800644e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <HAL_TIM_Base_Start_IT+0x98>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00e      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0x58>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006402:	d009      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0x58>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a14      	ldr	r2, [pc, #80]	; (800645c <HAL_TIM_Base_Start_IT+0x9c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0x58>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a13      	ldr	r2, [pc, #76]	; (8006460 <HAL_TIM_Base_Start_IT+0xa0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d111      	bne.n	800643c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b06      	cmp	r3, #6
 8006428:	d010      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0201 	orr.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643a:	e007      	b.n	800644c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40000400 	.word	0x40000400
 8006460:	40000800 	.word	0x40000800

08006464 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0201 	bic.w	r2, r2, #1
 800647a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	f241 1311 	movw	r3, #4369	; 0x1111
 8006486:	4013      	ands	r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10f      	bne.n	80064ac <HAL_TIM_Base_Stop_IT+0x48>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6a1a      	ldr	r2, [r3, #32]
 8006492:	f240 4344 	movw	r3, #1092	; 0x444
 8006496:	4013      	ands	r3, r2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d107      	bne.n	80064ac <HAL_TIM_Base_Stop_IT+0x48>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr

080064c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e041      	b.n	8006556 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f839 	bl	800655e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4619      	mov	r1, r3
 80064fe:	4610      	mov	r0, r2
 8006500:	f000 feb8 	bl	8007274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr

08006570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <HAL_TIM_PWM_Start+0x24>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	e022      	b.n	80065da <HAL_TIM_PWM_Start+0x6a>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b04      	cmp	r3, #4
 8006598:	d109      	bne.n	80065ae <HAL_TIM_PWM_Start+0x3e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	bf14      	ite	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	2300      	moveq	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e015      	b.n	80065da <HAL_TIM_PWM_Start+0x6a>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d109      	bne.n	80065c8 <HAL_TIM_PWM_Start+0x58>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e008      	b.n	80065da <HAL_TIM_PWM_Start+0x6a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e05e      	b.n	80066a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <HAL_TIM_PWM_Start+0x82>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f0:	e013      	b.n	800661a <HAL_TIM_PWM_Start+0xaa>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d104      	bne.n	8006602 <HAL_TIM_PWM_Start+0x92>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006600:	e00b      	b.n	800661a <HAL_TIM_PWM_Start+0xaa>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d104      	bne.n	8006612 <HAL_TIM_PWM_Start+0xa2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006610:	e003      	b.n	800661a <HAL_TIM_PWM_Start+0xaa>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2201      	movs	r2, #1
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f001 f8a6 	bl	8007774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <HAL_TIM_PWM_Start+0x138>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d107      	bne.n	8006642 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_TIM_PWM_Start+0x138>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00e      	beq.n	800666a <HAL_TIM_PWM_Start+0xfa>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006654:	d009      	beq.n	800666a <HAL_TIM_PWM_Start+0xfa>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a14      	ldr	r2, [pc, #80]	; (80066ac <HAL_TIM_PWM_Start+0x13c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_TIM_PWM_Start+0xfa>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a12      	ldr	r2, [pc, #72]	; (80066b0 <HAL_TIM_PWM_Start+0x140>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d111      	bne.n	800668e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b06      	cmp	r3, #6
 800667a:	d010      	beq.n	800669e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668c:	e007      	b.n	800669e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0201 	orr.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40012c00 	.word	0x40012c00
 80066ac:	40000400 	.word	0x40000400
 80066b0:	40000800 	.word	0x40000800

080066b4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d109      	bne.n	80066dc <HAL_TIM_PWM_Start_DMA+0x28>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	e022      	b.n	8006722 <HAL_TIM_PWM_Start_DMA+0x6e>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d109      	bne.n	80066f6 <HAL_TIM_PWM_Start_DMA+0x42>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	bf0c      	ite	eq
 80066ee:	2301      	moveq	r3, #1
 80066f0:	2300      	movne	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	e015      	b.n	8006722 <HAL_TIM_PWM_Start_DMA+0x6e>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d109      	bne.n	8006710 <HAL_TIM_PWM_Start_DMA+0x5c>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	e008      	b.n	8006722 <HAL_TIM_PWM_Start_DMA+0x6e>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	bf0c      	ite	eq
 800671c:	2301      	moveq	r3, #1
 800671e:	2300      	movne	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8006726:	2302      	movs	r3, #2
 8006728:	e14e      	b.n	80069c8 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d109      	bne.n	8006744 <HAL_TIM_PWM_Start_DMA+0x90>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	bf0c      	ite	eq
 800673c:	2301      	moveq	r3, #1
 800673e:	2300      	movne	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	e022      	b.n	800678a <HAL_TIM_PWM_Start_DMA+0xd6>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b04      	cmp	r3, #4
 8006748:	d109      	bne.n	800675e <HAL_TIM_PWM_Start_DMA+0xaa>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b01      	cmp	r3, #1
 8006754:	bf0c      	ite	eq
 8006756:	2301      	moveq	r3, #1
 8006758:	2300      	movne	r3, #0
 800675a:	b2db      	uxtb	r3, r3
 800675c:	e015      	b.n	800678a <HAL_TIM_PWM_Start_DMA+0xd6>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d109      	bne.n	8006778 <HAL_TIM_PWM_Start_DMA+0xc4>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b01      	cmp	r3, #1
 800676e:	bf0c      	ite	eq
 8006770:	2301      	moveq	r3, #1
 8006772:	2300      	movne	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	e008      	b.n	800678a <HAL_TIM_PWM_Start_DMA+0xd6>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d024      	beq.n	80067d8 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <HAL_TIM_PWM_Start_DMA+0xea>
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e114      	b.n	80069c8 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_PWM_Start_DMA+0xfa>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ac:	e016      	b.n	80067dc <HAL_TIM_PWM_Start_DMA+0x128>
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Start_DMA+0x10a>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067bc:	e00e      	b.n	80067dc <HAL_TIM_PWM_Start_DMA+0x128>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Start_DMA+0x11a>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067cc:	e006      	b.n	80067dc <HAL_TIM_PWM_Start_DMA+0x128>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067d6:	e001      	b.n	80067dc <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0f5      	b.n	80069c8 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b0c      	cmp	r3, #12
 80067e0:	f200 80ae 	bhi.w	8006940 <HAL_TIM_PWM_Start_DMA+0x28c>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <HAL_TIM_PWM_Start_DMA+0x138>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	08006821 	.word	0x08006821
 80067f0:	08006941 	.word	0x08006941
 80067f4:	08006941 	.word	0x08006941
 80067f8:	08006941 	.word	0x08006941
 80067fc:	08006869 	.word	0x08006869
 8006800:	08006941 	.word	0x08006941
 8006804:	08006941 	.word	0x08006941
 8006808:	08006941 	.word	0x08006941
 800680c:	080068b1 	.word	0x080068b1
 8006810:	08006941 	.word	0x08006941
 8006814:	08006941 	.word	0x08006941
 8006818:	08006941 	.word	0x08006941
 800681c:	080068f9 	.word	0x080068f9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	4a6a      	ldr	r2, [pc, #424]	; (80069d0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8006826:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	4a69      	ldr	r2, [pc, #420]	; (80069d4 <HAL_TIM_PWM_Start_DMA+0x320>)
 800682e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	4a68      	ldr	r2, [pc, #416]	; (80069d8 <HAL_TIM_PWM_Start_DMA+0x324>)
 8006836:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3334      	adds	r3, #52	; 0x34
 8006844:	461a      	mov	r2, r3
 8006846:	887b      	ldrh	r3, [r7, #2]
 8006848:	f7fd fa52 	bl	8003cf0 <HAL_DMA_Start_IT>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e0b8      	b.n	80069c8 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006864:	60da      	str	r2, [r3, #12]
      break;
 8006866:	e06c      	b.n	8006942 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	4a58      	ldr	r2, [pc, #352]	; (80069d0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800686e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	4a57      	ldr	r2, [pc, #348]	; (80069d4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	4a56      	ldr	r2, [pc, #344]	; (80069d8 <HAL_TIM_PWM_Start_DMA+0x324>)
 800687e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3338      	adds	r3, #56	; 0x38
 800688c:	461a      	mov	r2, r3
 800688e:	887b      	ldrh	r3, [r7, #2]
 8006890:	f7fd fa2e 	bl	8003cf0 <HAL_DMA_Start_IT>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e094      	b.n	80069c8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068ac:	60da      	str	r2, [r3, #12]
      break;
 80068ae:	e048      	b.n	8006942 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	4a46      	ldr	r2, [pc, #280]	; (80069d0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80068b6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	4a45      	ldr	r2, [pc, #276]	; (80069d4 <HAL_TIM_PWM_Start_DMA+0x320>)
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c4:	4a44      	ldr	r2, [pc, #272]	; (80069d8 <HAL_TIM_PWM_Start_DMA+0x324>)
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	333c      	adds	r3, #60	; 0x3c
 80068d4:	461a      	mov	r2, r3
 80068d6:	887b      	ldrh	r3, [r7, #2]
 80068d8:	f7fd fa0a 	bl	8003cf0 <HAL_DMA_Start_IT>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e070      	b.n	80069c8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f4:	60da      	str	r2, [r3, #12]
      break;
 80068f6:	e024      	b.n	8006942 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	4a34      	ldr	r2, [pc, #208]	; (80069d0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	4a33      	ldr	r2, [pc, #204]	; (80069d4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	4a32      	ldr	r2, [pc, #200]	; (80069d8 <HAL_TIM_PWM_Start_DMA+0x324>)
 800690e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3340      	adds	r3, #64	; 0x40
 800691c:	461a      	mov	r2, r3
 800691e:	887b      	ldrh	r3, [r7, #2]
 8006920:	f7fd f9e6 	bl	8003cf0 <HAL_DMA_Start_IT>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e04c      	b.n	80069c8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800693c:	60da      	str	r2, [r3, #12]
      break;
 800693e:	e000      	b.n	8006942 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8006940:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2201      	movs	r2, #1
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 ff12 	bl	8007774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a21      	ldr	r2, [pc, #132]	; (80069dc <HAL_TIM_PWM_Start_DMA+0x328>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d107      	bne.n	800696a <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1b      	ldr	r2, [pc, #108]	; (80069dc <HAL_TIM_PWM_Start_DMA+0x328>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00e      	beq.n	8006992 <HAL_TIM_PWM_Start_DMA+0x2de>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697c:	d009      	beq.n	8006992 <HAL_TIM_PWM_Start_DMA+0x2de>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a17      	ldr	r2, [pc, #92]	; (80069e0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d004      	beq.n	8006992 <HAL_TIM_PWM_Start_DMA+0x2de>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <HAL_TIM_PWM_Start_DMA+0x330>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d111      	bne.n	80069b6 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b06      	cmp	r3, #6
 80069a2:	d010      	beq.n	80069c6 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b4:	e007      	b.n	80069c6 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0201 	orr.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	08007165 	.word	0x08007165
 80069d4:	0800720d 	.word	0x0800720d
 80069d8:	080070d3 	.word	0x080070d3
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40000400 	.word	0x40000400
 80069e4:	40000800 	.word	0x40000800

080069e8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d855      	bhi.n	8006aa4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006aa5 	.word	0x08006aa5
 8006a08:	08006aa5 	.word	0x08006aa5
 8006a0c:	08006aa5 	.word	0x08006aa5
 8006a10:	08006a51 	.word	0x08006a51
 8006a14:	08006aa5 	.word	0x08006aa5
 8006a18:	08006aa5 	.word	0x08006aa5
 8006a1c:	08006aa5 	.word	0x08006aa5
 8006a20:	08006a6d 	.word	0x08006a6d
 8006a24:	08006aa5 	.word	0x08006aa5
 8006a28:	08006aa5 	.word	0x08006aa5
 8006a2c:	08006aa5 	.word	0x08006aa5
 8006a30:	08006a89 	.word	0x08006a89
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006a42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fd f9eb 	bl	8003e24 <HAL_DMA_Abort_IT>
      break;
 8006a4e:	e02a      	b.n	8006aa6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fd f9dd 	bl	8003e24 <HAL_DMA_Abort_IT>
      break;
 8006a6a:	e01c      	b.n	8006aa6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fd f9cf 	bl	8003e24 <HAL_DMA_Abort_IT>
      break;
 8006a86:	e00e      	b.n	8006aa6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fd f9c1 	bl	8003e24 <HAL_DMA_Abort_IT>
      break;
 8006aa2:	e000      	b.n	8006aa6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8006aa4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fe60 	bl	8007774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a29      	ldr	r2, [pc, #164]	; (8006b60 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d117      	bne.n	8006aee <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a1a      	ldr	r2, [r3, #32]
 8006ac4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10f      	bne.n	8006aee <HAL_TIM_PWM_Stop_DMA+0x106>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	f240 4344 	movw	r3, #1092	; 0x444
 8006ad8:	4013      	ands	r3, r2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d107      	bne.n	8006aee <HAL_TIM_PWM_Stop_DMA+0x106>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10f      	bne.n	8006b1e <HAL_TIM_PWM_Stop_DMA+0x136>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	f240 4344 	movw	r3, #1092	; 0x444
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d107      	bne.n	8006b1e <HAL_TIM_PWM_Stop_DMA+0x136>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <HAL_TIM_PWM_Stop_DMA+0x146>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2c:	e013      	b.n	8006b56 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d104      	bne.n	8006b3e <HAL_TIM_PWM_Stop_DMA+0x156>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b3c:	e00b      	b.n	8006b56 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d104      	bne.n	8006b4e <HAL_TIM_PWM_Stop_DMA+0x166>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4c:	e003      	b.n	8006b56 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40012c00 	.word	0x40012c00

08006b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d122      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d11b      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f06f 0202 	mvn.w	r2, #2
 8006b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa6f 	bl	800708a <HAL_TIM_IC_CaptureCallback>
 8006bac:	e005      	b.n	8006bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa62 	bl	8007078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fb fbdb 	bl	8002370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d122      	bne.n	8006c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d11b      	bne.n	8006c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0204 	mvn.w	r2, #4
 8006be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa45 	bl	800708a <HAL_TIM_IC_CaptureCallback>
 8006c00:	e005      	b.n	8006c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fa38 	bl	8007078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fb fbb1 	bl	8002370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d122      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d11b      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0208 	mvn.w	r2, #8
 8006c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fa1b 	bl	800708a <HAL_TIM_IC_CaptureCallback>
 8006c54:	e005      	b.n	8006c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fa0e 	bl	8007078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7fb fb87 	bl	8002370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d122      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	2b10      	cmp	r3, #16
 8006c82:	d11b      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0210 	mvn.w	r2, #16
 8006c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2208      	movs	r2, #8
 8006c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f9f1 	bl	800708a <HAL_TIM_IC_CaptureCallback>
 8006ca8:	e005      	b.n	8006cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f9e4 	bl	8007078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7fb fb5d 	bl	8002370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d10e      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d107      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0201 	mvn.w	r2, #1
 8006ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fb f856 	bl	8001d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d10e      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d00:	2b80      	cmp	r3, #128	; 0x80
 8006d02:	d107      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fdbb 	bl	800788a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d10e      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	d107      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f9b7 	bl	80070ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d10e      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d107      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0220 	mvn.w	r2, #32
 8006d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fd86 	bl	8007878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e0ac      	b.n	8006ee8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b0c      	cmp	r3, #12
 8006d9a:	f200 809f 	bhi.w	8006edc <HAL_TIM_PWM_ConfigChannel+0x168>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dd9 	.word	0x08006dd9
 8006da8:	08006edd 	.word	0x08006edd
 8006dac:	08006edd 	.word	0x08006edd
 8006db0:	08006edd 	.word	0x08006edd
 8006db4:	08006e19 	.word	0x08006e19
 8006db8:	08006edd 	.word	0x08006edd
 8006dbc:	08006edd 	.word	0x08006edd
 8006dc0:	08006edd 	.word	0x08006edd
 8006dc4:	08006e5b 	.word	0x08006e5b
 8006dc8:	08006edd 	.word	0x08006edd
 8006dcc:	08006edd 	.word	0x08006edd
 8006dd0:	08006edd 	.word	0x08006edd
 8006dd4:	08006e9b 	.word	0x08006e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 faaa 	bl	8007338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0208 	orr.w	r2, r2, #8
 8006df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0204 	bic.w	r2, r2, #4
 8006e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6999      	ldr	r1, [r3, #24]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	619a      	str	r2, [r3, #24]
      break;
 8006e16:	e062      	b.n	8006ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 faf0 	bl	8007404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6999      	ldr	r1, [r3, #24]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	021a      	lsls	r2, r3, #8
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	619a      	str	r2, [r3, #24]
      break;
 8006e58:	e041      	b.n	8006ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fb39 	bl	80074d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0208 	orr.w	r2, r2, #8
 8006e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0204 	bic.w	r2, r2, #4
 8006e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69d9      	ldr	r1, [r3, #28]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	61da      	str	r2, [r3, #28]
      break;
 8006e98:	e021      	b.n	8006ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68b9      	ldr	r1, [r7, #8]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fb83 	bl	80075ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69d9      	ldr	r1, [r3, #28]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	021a      	lsls	r2, r3, #8
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	61da      	str	r2, [r3, #28]
      break;
 8006eda:	e000      	b.n	8006ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_TIM_ConfigClockSource+0x18>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e0b3      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x180>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f40:	d03e      	beq.n	8006fc0 <HAL_TIM_ConfigClockSource+0xd0>
 8006f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f46:	f200 8087 	bhi.w	8007058 <HAL_TIM_ConfigClockSource+0x168>
 8006f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4e:	f000 8085 	beq.w	800705c <HAL_TIM_ConfigClockSource+0x16c>
 8006f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f56:	d87f      	bhi.n	8007058 <HAL_TIM_ConfigClockSource+0x168>
 8006f58:	2b70      	cmp	r3, #112	; 0x70
 8006f5a:	d01a      	beq.n	8006f92 <HAL_TIM_ConfigClockSource+0xa2>
 8006f5c:	2b70      	cmp	r3, #112	; 0x70
 8006f5e:	d87b      	bhi.n	8007058 <HAL_TIM_ConfigClockSource+0x168>
 8006f60:	2b60      	cmp	r3, #96	; 0x60
 8006f62:	d050      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x116>
 8006f64:	2b60      	cmp	r3, #96	; 0x60
 8006f66:	d877      	bhi.n	8007058 <HAL_TIM_ConfigClockSource+0x168>
 8006f68:	2b50      	cmp	r3, #80	; 0x50
 8006f6a:	d03c      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0xf6>
 8006f6c:	2b50      	cmp	r3, #80	; 0x50
 8006f6e:	d873      	bhi.n	8007058 <HAL_TIM_ConfigClockSource+0x168>
 8006f70:	2b40      	cmp	r3, #64	; 0x40
 8006f72:	d058      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x136>
 8006f74:	2b40      	cmp	r3, #64	; 0x40
 8006f76:	d86f      	bhi.n	8007058 <HAL_TIM_ConfigClockSource+0x168>
 8006f78:	2b30      	cmp	r3, #48	; 0x30
 8006f7a:	d064      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x156>
 8006f7c:	2b30      	cmp	r3, #48	; 0x30
 8006f7e:	d86b      	bhi.n	8007058 <HAL_TIM_ConfigClockSource+0x168>
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	d060      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x156>
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d867      	bhi.n	8007058 <HAL_TIM_ConfigClockSource+0x168>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d05c      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x156>
 8006f8c:	2b10      	cmp	r3, #16
 8006f8e:	d05a      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f90:	e062      	b.n	8007058 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6899      	ldr	r1, [r3, #8]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f000 fbc8 	bl	8007736 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	609a      	str	r2, [r3, #8]
      break;
 8006fbe:	e04e      	b.n	800705e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	6899      	ldr	r1, [r3, #8]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f000 fbb1 	bl	8007736 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fe2:	609a      	str	r2, [r3, #8]
      break;
 8006fe4:	e03b      	b.n	800705e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6859      	ldr	r1, [r3, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f000 fb28 	bl	8007648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2150      	movs	r1, #80	; 0x50
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fb7f 	bl	8007702 <TIM_ITRx_SetConfig>
      break;
 8007004:	e02b      	b.n	800705e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6859      	ldr	r1, [r3, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	461a      	mov	r2, r3
 8007014:	f000 fb46 	bl	80076a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2160      	movs	r1, #96	; 0x60
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fb6f 	bl	8007702 <TIM_ITRx_SetConfig>
      break;
 8007024:	e01b      	b.n	800705e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6859      	ldr	r1, [r3, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	461a      	mov	r2, r3
 8007034:	f000 fb08 	bl	8007648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2140      	movs	r1, #64	; 0x40
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fb5f 	bl	8007702 <TIM_ITRx_SetConfig>
      break;
 8007044:	e00b      	b.n	800705e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4619      	mov	r1, r3
 8007050:	4610      	mov	r0, r2
 8007052:	f000 fb56 	bl	8007702 <TIM_ITRx_SetConfig>
        break;
 8007056:	e002      	b.n	800705e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007058:	bf00      	nop
 800705a:	e000      	b.n	800705e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800705c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr

0800708a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr

0800709c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr

080070ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr

080070c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr

080070d2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d107      	bne.n	80070fa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070f8:	e02a      	b.n	8007150 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d107      	bne.n	8007114 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2202      	movs	r2, #2
 8007108:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007112:	e01d      	b.n	8007150 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	d107      	bne.n	800712e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2204      	movs	r2, #4
 8007122:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800712c:	e010      	b.n	8007150 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d107      	bne.n	8007148 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2208      	movs	r2, #8
 800713c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007146:	e003      	b.n	8007150 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff ffb5 	bl	80070c0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	771a      	strb	r2, [r3, #28]
}
 800715c:	bf00      	nop
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	429a      	cmp	r2, r3
 800717a:	d10b      	bne.n	8007194 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d136      	bne.n	80071f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007192:	e031      	b.n	80071f8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	429a      	cmp	r2, r3
 800719c:	d10b      	bne.n	80071b6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2202      	movs	r2, #2
 80071a2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d125      	bne.n	80071f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071b4:	e020      	b.n	80071f8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d10b      	bne.n	80071d8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2204      	movs	r2, #4
 80071c4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d114      	bne.n	80071f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d6:	e00f      	b.n	80071f8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d10a      	bne.n	80071f8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2208      	movs	r2, #8
 80071e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d103      	bne.n	80071f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7fb f8b9 	bl	8002370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	771a      	strb	r2, [r3, #28]
}
 8007204:	bf00      	nop
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d103      	bne.n	800722c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2201      	movs	r2, #1
 8007228:	771a      	strb	r2, [r3, #28]
 800722a:	e019      	b.n	8007260 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d103      	bne.n	800723e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2202      	movs	r2, #2
 800723a:	771a      	strb	r2, [r3, #28]
 800723c:	e010      	b.n	8007260 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d103      	bne.n	8007250 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2204      	movs	r2, #4
 800724c:	771a      	strb	r2, [r3, #28]
 800724e:	e007      	b.n	8007260 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d102      	bne.n	8007260 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2208      	movs	r2, #8
 800725e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff ff1b 	bl	800709c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	771a      	strb	r2, [r3, #28]
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a29      	ldr	r2, [pc, #164]	; (800732c <TIM_Base_SetConfig+0xb8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00b      	beq.n	80072a4 <TIM_Base_SetConfig+0x30>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007292:	d007      	beq.n	80072a4 <TIM_Base_SetConfig+0x30>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a26      	ldr	r2, [pc, #152]	; (8007330 <TIM_Base_SetConfig+0xbc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_Base_SetConfig+0x30>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a25      	ldr	r2, [pc, #148]	; (8007334 <TIM_Base_SetConfig+0xc0>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d108      	bne.n	80072b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a1c      	ldr	r2, [pc, #112]	; (800732c <TIM_Base_SetConfig+0xb8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00b      	beq.n	80072d6 <TIM_Base_SetConfig+0x62>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c4:	d007      	beq.n	80072d6 <TIM_Base_SetConfig+0x62>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a19      	ldr	r2, [pc, #100]	; (8007330 <TIM_Base_SetConfig+0xbc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_Base_SetConfig+0x62>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a18      	ldr	r2, [pc, #96]	; (8007334 <TIM_Base_SetConfig+0xc0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d108      	bne.n	80072e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a07      	ldr	r2, [pc, #28]	; (800732c <TIM_Base_SetConfig+0xb8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d103      	bne.n	800731c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	615a      	str	r2, [r3, #20]
}
 8007322:	bf00      	nop
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	bc80      	pop	{r7}
 800732a:	4770      	bx	lr
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40000400 	.word	0x40000400
 8007334:	40000800 	.word	0x40000800

08007338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0201 	bic.w	r2, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f023 0302 	bic.w	r3, r3, #2
 8007380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a1c      	ldr	r2, [pc, #112]	; (8007400 <TIM_OC1_SetConfig+0xc8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10c      	bne.n	80073ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0308 	bic.w	r3, r3, #8
 800739a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f023 0304 	bic.w	r3, r3, #4
 80073ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a13      	ldr	r2, [pc, #76]	; (8007400 <TIM_OC1_SetConfig+0xc8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d111      	bne.n	80073da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	621a      	str	r2, [r3, #32]
}
 80073f4:	bf00      	nop
 80073f6:	371c      	adds	r7, #28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40012c00 	.word	0x40012c00

08007404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	f023 0210 	bic.w	r2, r3, #16
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f023 0320 	bic.w	r3, r3, #32
 800744e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a1d      	ldr	r2, [pc, #116]	; (80074d4 <TIM_OC2_SetConfig+0xd0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d10d      	bne.n	8007480 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800747e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a14      	ldr	r2, [pc, #80]	; (80074d4 <TIM_OC2_SetConfig+0xd0>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d113      	bne.n	80074b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800748e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr
 80074d4:	40012c00 	.word	0x40012c00

080074d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0303 	bic.w	r3, r3, #3
 800750e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a1d      	ldr	r2, [pc, #116]	; (80075a8 <TIM_OC3_SetConfig+0xd0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d10d      	bne.n	8007552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800753c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a14      	ldr	r2, [pc, #80]	; (80075a8 <TIM_OC3_SetConfig+0xd0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d113      	bne.n	8007582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	4313      	orrs	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	621a      	str	r2, [r3, #32]
}
 800759c:	bf00      	nop
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40012c00 	.word	0x40012c00

080075ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	021b      	lsls	r3, r3, #8
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	031b      	lsls	r3, r3, #12
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a0f      	ldr	r2, [pc, #60]	; (8007644 <TIM_OC4_SetConfig+0x98>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d109      	bne.n	8007620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	019b      	lsls	r3, r3, #6
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	4313      	orrs	r3, r2
 800761e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr
 8007644:	40012c00 	.word	0x40012c00

08007648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f023 0201 	bic.w	r2, r3, #1
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f023 030a 	bic.w	r3, r3, #10
 8007684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	4313      	orrs	r3, r2
 800768c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	621a      	str	r2, [r3, #32]
}
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr

080076a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	f023 0210 	bic.w	r2, r3, #16
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	031b      	lsls	r3, r3, #12
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bc80      	pop	{r7}
 8007700:	4770      	bx	lr

08007702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	f043 0307 	orr.w	r3, r3, #7
 8007724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	609a      	str	r2, [r3, #8]
}
 800772c:	bf00      	nop
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr

08007736 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007736:	b480      	push	{r7}
 8007738:	b087      	sub	sp, #28
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007750:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	021a      	lsls	r2, r3, #8
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	431a      	orrs	r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4313      	orrs	r3, r2
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	609a      	str	r2, [r3, #8]
}
 800776a:	bf00      	nop
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr

08007774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f003 031f 	and.w	r3, r3, #31
 8007786:	2201      	movs	r2, #1
 8007788:	fa02 f303 	lsl.w	r3, r2, r3
 800778c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6a1a      	ldr	r2, [r3, #32]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	43db      	mvns	r3, r3
 8007796:	401a      	ands	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a1a      	ldr	r2, [r3, #32]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ac:	431a      	orrs	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e046      	b.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a16      	ldr	r2, [pc, #88]	; (800786c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00e      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007820:	d009      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a12      	ldr	r2, [pc, #72]	; (8007870 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d004      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a10      	ldr	r2, [pc, #64]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d10c      	bne.n	8007850 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800783c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	4313      	orrs	r3, r2
 8007846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr
 800786c:	40012c00 	.word	0x40012c00
 8007870:	40000400 	.word	0x40000400
 8007874:	40000800 	.word	0x40000800

08007878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr

0800788a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr

0800789c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e03f      	b.n	800792e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fb fb30 	bl	8002f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2224      	movs	r2, #36	; 0x24
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fbd1 	bl	8008088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2220      	movs	r2, #32
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b08a      	sub	sp, #40	; 0x28
 800793a:	af02      	add	r7, sp, #8
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	4613      	mov	r3, r2
 8007944:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b20      	cmp	r3, #32
 8007954:	d17c      	bne.n	8007a50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <HAL_UART_Transmit+0x2c>
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e075      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_UART_Transmit+0x3e>
 8007970:	2302      	movs	r3, #2
 8007972:	e06e      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2221      	movs	r2, #33	; 0x21
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800798a:	f7fb fbef 	bl	800316c <HAL_GetTick>
 800798e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	88fa      	ldrh	r2, [r7, #6]
 8007994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	88fa      	ldrh	r2, [r7, #6]
 800799a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	d108      	bne.n	80079b8 <HAL_UART_Transmit+0x82>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	e003      	b.n	80079c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079bc:	2300      	movs	r3, #0
 80079be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80079c8:	e02a      	b.n	8007a20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2200      	movs	r2, #0
 80079d2:	2180      	movs	r1, #128	; 0x80
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fa4c 	bl	8007e72 <UART_WaitOnFlagUntilTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e036      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	3302      	adds	r3, #2
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	e007      	b.n	8007a12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	781a      	ldrb	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1cf      	bne.n	80079ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2200      	movs	r2, #0
 8007a32:	2140      	movs	r1, #64	; 0x40
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 fa1c 	bl	8007e72 <UART_WaitOnFlagUntilTimeout>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e006      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e000      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a50:	2302      	movs	r3, #2
  }
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	4613      	mov	r3, r2
 8007a66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d130      	bne.n	8007ad6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <HAL_UART_Transmit_IT+0x26>
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e029      	b.n	8007ad8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Transmit_IT+0x38>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e022      	b.n	8007ad8 <HAL_UART_Transmit_IT+0x7e>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	88fa      	ldrh	r2, [r7, #6]
 8007aaa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2221      	movs	r2, #33	; 0x21
 8007ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ad0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e000      	b.n	8007ad8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007ad6:	2302      	movs	r3, #2
  }
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr
	...

08007ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	; 0x28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10d      	bne.n	8007b36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d008      	beq.n	8007b36 <HAL_UART_IRQHandler+0x52>
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa90 	bl	8008054 <UART_Receive_IT>
      return;
 8007b34:	e17b      	b.n	8007e2e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80b1 	beq.w	8007ca0 <HAL_UART_IRQHandler+0x1bc>
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <HAL_UART_IRQHandler+0x70>
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 80a6 	beq.w	8007ca0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <HAL_UART_IRQHandler+0x90>
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	f043 0201 	orr.w	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_UART_IRQHandler+0xb0>
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	f043 0202 	orr.w	r2, r3, #2
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_UART_IRQHandler+0xd0>
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	f043 0204 	orr.w	r2, r3, #4
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00f      	beq.n	8007bde <HAL_UART_IRQHandler+0xfa>
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <HAL_UART_IRQHandler+0xee>
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	f043 0208 	orr.w	r2, r3, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 811e 	beq.w	8007e24 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <HAL_UART_IRQHandler+0x11e>
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fa29 	bl	8008054 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bf14      	ite	ne
 8007c10:	2301      	movne	r3, #1
 8007c12:	2300      	moveq	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d102      	bne.n	8007c2a <HAL_UART_IRQHandler+0x146>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d031      	beq.n	8007c8e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f96b 	bl	8007f06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d023      	beq.n	8007c86 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695a      	ldr	r2, [r3, #20]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d013      	beq.n	8007c7e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	4a76      	ldr	r2, [pc, #472]	; (8007e34 <HAL_UART_IRQHandler+0x350>)
 8007c5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fc f8de 	bl	8003e24 <HAL_DMA_Abort_IT>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d016      	beq.n	8007c9c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7c:	e00e      	b.n	8007c9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f8e3 	bl	8007e4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c84:	e00a      	b.n	8007c9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f8df 	bl	8007e4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c8c:	e006      	b.n	8007c9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f8db 	bl	8007e4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c9a:	e0c3      	b.n	8007e24 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9c:	bf00      	nop
    return;
 8007c9e:	e0c1      	b.n	8007e24 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	f040 80a1 	bne.w	8007dec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	f003 0310 	and.w	r3, r3, #16
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 809b 	beq.w	8007dec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 8095 	beq.w	8007dec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d04e      	beq.n	8007d84 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007cf0:	8a3b      	ldrh	r3, [r7, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 8098 	beq.w	8007e28 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cfc:	8a3a      	ldrh	r2, [r7, #16]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	f080 8092 	bcs.w	8007e28 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	8a3a      	ldrh	r2, [r7, #16]
 8007d08:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	d02b      	beq.n	8007d6c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d22:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695a      	ldr	r2, [r3, #20]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695a      	ldr	r2, [r3, #20]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d42:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0210 	bic.w	r2, r2, #16
 8007d60:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fc f821 	bl	8003dae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f86d 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d82:	e051      	b.n	8007e28 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d047      	beq.n	8007e2c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007d9c:	8a7b      	ldrh	r3, [r7, #18]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d044      	beq.n	8007e2c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007db0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695a      	ldr	r2, [r3, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0210 	bic.w	r2, r2, #16
 8007dde:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007de0:	8a7b      	ldrh	r3, [r7, #18]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f839 	bl	8007e5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007dea:	e01f      	b.n	8007e2c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <HAL_UART_IRQHandler+0x324>
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f8c0 	bl	8007f86 <UART_Transmit_IT>
    return;
 8007e06:	e012      	b.n	8007e2e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00d      	beq.n	8007e2e <HAL_UART_IRQHandler+0x34a>
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d008      	beq.n	8007e2e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f901 	bl	8008024 <UART_EndTransmit_IT>
    return;
 8007e22:	e004      	b.n	8007e2e <HAL_UART_IRQHandler+0x34a>
    return;
 8007e24:	bf00      	nop
 8007e26:	e002      	b.n	8007e2e <HAL_UART_IRQHandler+0x34a>
      return;
 8007e28:	bf00      	nop
 8007e2a:	e000      	b.n	8007e2e <HAL_UART_IRQHandler+0x34a>
      return;
 8007e2c:	bf00      	nop
  }
}
 8007e2e:	3728      	adds	r7, #40	; 0x28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	08007f5f 	.word	0x08007f5f

08007e38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr

08007e4a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bc80      	pop	{r7}
 8007e5a:	4770      	bx	lr

08007e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr

08007e72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	603b      	str	r3, [r7, #0]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e82:	e02c      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d028      	beq.n	8007ede <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e92:	f7fb f96b 	bl	800316c <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d21d      	bcs.n	8007ede <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007eb0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695a      	ldr	r2, [r3, #20]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0201 	bic.w	r2, r2, #1
 8007ec0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e00f      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	bf0c      	ite	eq
 8007eee:	2301      	moveq	r3, #1
 8007ef0:	2300      	movne	r3, #0
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d0c3      	beq.n	8007e84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f1c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695a      	ldr	r2, [r3, #20]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0201 	bic.w	r2, r2, #1
 8007f2c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d107      	bne.n	8007f46 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 0210 	bic.w	r2, r2, #16
 8007f44:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr

08007f5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7ff ff66 	bl	8007e4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b085      	sub	sp, #20
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b21      	cmp	r3, #33	; 0x21
 8007f98:	d13e      	bne.n	8008018 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa2:	d114      	bne.n	8007fce <UART_Transmit_IT+0x48>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d110      	bne.n	8007fce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	1c9a      	adds	r2, r3, #2
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	621a      	str	r2, [r3, #32]
 8007fcc:	e008      	b.n	8007fe0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	1c59      	adds	r1, r3, #1
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6211      	str	r1, [r2, #32]
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4619      	mov	r1, r3
 8007fee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10f      	bne.n	8008014 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008002:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008012:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e000      	b.n	800801a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008018:	2302      	movs	r3, #2
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr

08008024 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800803a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff fef7 	bl	8007e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
	huart->Instance->SR;                       /* Read status register */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
	uint8_t byte = huart->Instance->DR;     /* Read data register */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	73fb      	strb	r3, [r7, #15]
	store_byte (byte, _rx_buffer);  // store data in buffer
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <UART_Receive_IT+0x30>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	4611      	mov	r1, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f7fa faae 	bl	80025d4 <store_byte>
	return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200005fc 	.word	0x200005fc

08008088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80080c2:	f023 030c 	bic.w	r3, r3, #12
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	430b      	orrs	r3, r1
 80080ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a2c      	ldr	r2, [pc, #176]	; (800819c <UART_SetConfig+0x114>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d103      	bne.n	80080f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080f0:	f7fd ff24 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	e002      	b.n	80080fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80080f8:	f7fd ff0c 	bl	8005f14 <HAL_RCC_GetPCLK1Freq>
 80080fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009a      	lsls	r2, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	fbb2 f3f3 	udiv	r3, r2, r3
 8008114:	4a22      	ldr	r2, [pc, #136]	; (80081a0 <UART_SetConfig+0x118>)
 8008116:	fba2 2303 	umull	r2, r3, r2, r3
 800811a:	095b      	lsrs	r3, r3, #5
 800811c:	0119      	lsls	r1, r3, #4
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009a      	lsls	r2, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	fbb2 f2f3 	udiv	r2, r2, r3
 8008134:	4b1a      	ldr	r3, [pc, #104]	; (80081a0 <UART_SetConfig+0x118>)
 8008136:	fba3 0302 	umull	r0, r3, r3, r2
 800813a:	095b      	lsrs	r3, r3, #5
 800813c:	2064      	movs	r0, #100	; 0x64
 800813e:	fb00 f303 	mul.w	r3, r0, r3
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	3332      	adds	r3, #50	; 0x32
 8008148:	4a15      	ldr	r2, [pc, #84]	; (80081a0 <UART_SetConfig+0x118>)
 800814a:	fba2 2303 	umull	r2, r3, r2, r3
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008154:	4419      	add	r1, r3
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009a      	lsls	r2, r3, #2
 8008160:	441a      	add	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	fbb2 f2f3 	udiv	r2, r2, r3
 800816c:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <UART_SetConfig+0x118>)
 800816e:	fba3 0302 	umull	r0, r3, r3, r2
 8008172:	095b      	lsrs	r3, r3, #5
 8008174:	2064      	movs	r0, #100	; 0x64
 8008176:	fb00 f303 	mul.w	r3, r0, r3
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	3332      	adds	r3, #50	; 0x32
 8008180:	4a07      	ldr	r2, [pc, #28]	; (80081a0 <UART_SetConfig+0x118>)
 8008182:	fba2 2303 	umull	r2, r3, r2, r3
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	f003 020f 	and.w	r2, r3, #15
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	440a      	add	r2, r1
 8008192:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008194:	bf00      	nop
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	40013800 	.word	0x40013800
 80081a0:	51eb851f 	.word	0x51eb851f

080081a4 <__errno>:
 80081a4:	4b01      	ldr	r3, [pc, #4]	; (80081ac <__errno+0x8>)
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000024 	.word	0x20000024

080081b0 <__libc_init_array>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	2600      	movs	r6, #0
 80081b4:	4d0c      	ldr	r5, [pc, #48]	; (80081e8 <__libc_init_array+0x38>)
 80081b6:	4c0d      	ldr	r4, [pc, #52]	; (80081ec <__libc_init_array+0x3c>)
 80081b8:	1b64      	subs	r4, r4, r5
 80081ba:	10a4      	asrs	r4, r4, #2
 80081bc:	42a6      	cmp	r6, r4
 80081be:	d109      	bne.n	80081d4 <__libc_init_array+0x24>
 80081c0:	f004 fc50 	bl	800ca64 <_init>
 80081c4:	2600      	movs	r6, #0
 80081c6:	4d0a      	ldr	r5, [pc, #40]	; (80081f0 <__libc_init_array+0x40>)
 80081c8:	4c0a      	ldr	r4, [pc, #40]	; (80081f4 <__libc_init_array+0x44>)
 80081ca:	1b64      	subs	r4, r4, r5
 80081cc:	10a4      	asrs	r4, r4, #2
 80081ce:	42a6      	cmp	r6, r4
 80081d0:	d105      	bne.n	80081de <__libc_init_array+0x2e>
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d8:	4798      	blx	r3
 80081da:	3601      	adds	r6, #1
 80081dc:	e7ee      	b.n	80081bc <__libc_init_array+0xc>
 80081de:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e2:	4798      	blx	r3
 80081e4:	3601      	adds	r6, #1
 80081e6:	e7f2      	b.n	80081ce <__libc_init_array+0x1e>
 80081e8:	0800cfec 	.word	0x0800cfec
 80081ec:	0800cfec 	.word	0x0800cfec
 80081f0:	0800cfec 	.word	0x0800cfec
 80081f4:	0800cff0 	.word	0x0800cff0

080081f8 <memset>:
 80081f8:	4603      	mov	r3, r0
 80081fa:	4402      	add	r2, r0
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d100      	bne.n	8008202 <memset+0xa>
 8008200:	4770      	bx	lr
 8008202:	f803 1b01 	strb.w	r1, [r3], #1
 8008206:	e7f9      	b.n	80081fc <memset+0x4>

08008208 <__cvt>:
 8008208:	2b00      	cmp	r3, #0
 800820a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820e:	461f      	mov	r7, r3
 8008210:	bfbb      	ittet	lt
 8008212:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008216:	461f      	movlt	r7, r3
 8008218:	2300      	movge	r3, #0
 800821a:	232d      	movlt	r3, #45	; 0x2d
 800821c:	b088      	sub	sp, #32
 800821e:	4614      	mov	r4, r2
 8008220:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008222:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008224:	7013      	strb	r3, [r2, #0]
 8008226:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008228:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800822c:	f023 0820 	bic.w	r8, r3, #32
 8008230:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008234:	d005      	beq.n	8008242 <__cvt+0x3a>
 8008236:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800823a:	d100      	bne.n	800823e <__cvt+0x36>
 800823c:	3501      	adds	r5, #1
 800823e:	2302      	movs	r3, #2
 8008240:	e000      	b.n	8008244 <__cvt+0x3c>
 8008242:	2303      	movs	r3, #3
 8008244:	aa07      	add	r2, sp, #28
 8008246:	9204      	str	r2, [sp, #16]
 8008248:	aa06      	add	r2, sp, #24
 800824a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800824e:	e9cd 3500 	strd	r3, r5, [sp]
 8008252:	4622      	mov	r2, r4
 8008254:	463b      	mov	r3, r7
 8008256:	f001 fd83 	bl	8009d60 <_dtoa_r>
 800825a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800825e:	4606      	mov	r6, r0
 8008260:	d102      	bne.n	8008268 <__cvt+0x60>
 8008262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008264:	07db      	lsls	r3, r3, #31
 8008266:	d522      	bpl.n	80082ae <__cvt+0xa6>
 8008268:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800826c:	eb06 0905 	add.w	r9, r6, r5
 8008270:	d110      	bne.n	8008294 <__cvt+0x8c>
 8008272:	7833      	ldrb	r3, [r6, #0]
 8008274:	2b30      	cmp	r3, #48	; 0x30
 8008276:	d10a      	bne.n	800828e <__cvt+0x86>
 8008278:	2200      	movs	r2, #0
 800827a:	2300      	movs	r3, #0
 800827c:	4620      	mov	r0, r4
 800827e:	4639      	mov	r1, r7
 8008280:	f7f8 fb92 	bl	80009a8 <__aeabi_dcmpeq>
 8008284:	b918      	cbnz	r0, 800828e <__cvt+0x86>
 8008286:	f1c5 0501 	rsb	r5, r5, #1
 800828a:	f8ca 5000 	str.w	r5, [sl]
 800828e:	f8da 3000 	ldr.w	r3, [sl]
 8008292:	4499      	add	r9, r3
 8008294:	2200      	movs	r2, #0
 8008296:	2300      	movs	r3, #0
 8008298:	4620      	mov	r0, r4
 800829a:	4639      	mov	r1, r7
 800829c:	f7f8 fb84 	bl	80009a8 <__aeabi_dcmpeq>
 80082a0:	b108      	cbz	r0, 80082a6 <__cvt+0x9e>
 80082a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80082a6:	2230      	movs	r2, #48	; 0x30
 80082a8:	9b07      	ldr	r3, [sp, #28]
 80082aa:	454b      	cmp	r3, r9
 80082ac:	d307      	bcc.n	80082be <__cvt+0xb6>
 80082ae:	4630      	mov	r0, r6
 80082b0:	9b07      	ldr	r3, [sp, #28]
 80082b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082b4:	1b9b      	subs	r3, r3, r6
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	b008      	add	sp, #32
 80082ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082be:	1c59      	adds	r1, r3, #1
 80082c0:	9107      	str	r1, [sp, #28]
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	e7f0      	b.n	80082a8 <__cvt+0xa0>

080082c6 <__exponent>:
 80082c6:	4603      	mov	r3, r0
 80082c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ca:	2900      	cmp	r1, #0
 80082cc:	f803 2b02 	strb.w	r2, [r3], #2
 80082d0:	bfb6      	itet	lt
 80082d2:	222d      	movlt	r2, #45	; 0x2d
 80082d4:	222b      	movge	r2, #43	; 0x2b
 80082d6:	4249      	neglt	r1, r1
 80082d8:	2909      	cmp	r1, #9
 80082da:	7042      	strb	r2, [r0, #1]
 80082dc:	dd2b      	ble.n	8008336 <__exponent+0x70>
 80082de:	f10d 0407 	add.w	r4, sp, #7
 80082e2:	46a4      	mov	ip, r4
 80082e4:	270a      	movs	r7, #10
 80082e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80082ea:	460a      	mov	r2, r1
 80082ec:	46a6      	mov	lr, r4
 80082ee:	fb07 1516 	mls	r5, r7, r6, r1
 80082f2:	2a63      	cmp	r2, #99	; 0x63
 80082f4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80082f8:	4631      	mov	r1, r6
 80082fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80082fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008302:	dcf0      	bgt.n	80082e6 <__exponent+0x20>
 8008304:	3130      	adds	r1, #48	; 0x30
 8008306:	f1ae 0502 	sub.w	r5, lr, #2
 800830a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800830e:	4629      	mov	r1, r5
 8008310:	1c44      	adds	r4, r0, #1
 8008312:	4561      	cmp	r1, ip
 8008314:	d30a      	bcc.n	800832c <__exponent+0x66>
 8008316:	f10d 0209 	add.w	r2, sp, #9
 800831a:	eba2 020e 	sub.w	r2, r2, lr
 800831e:	4565      	cmp	r5, ip
 8008320:	bf88      	it	hi
 8008322:	2200      	movhi	r2, #0
 8008324:	4413      	add	r3, r2
 8008326:	1a18      	subs	r0, r3, r0
 8008328:	b003      	add	sp, #12
 800832a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008330:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008334:	e7ed      	b.n	8008312 <__exponent+0x4c>
 8008336:	2330      	movs	r3, #48	; 0x30
 8008338:	3130      	adds	r1, #48	; 0x30
 800833a:	7083      	strb	r3, [r0, #2]
 800833c:	70c1      	strb	r1, [r0, #3]
 800833e:	1d03      	adds	r3, r0, #4
 8008340:	e7f1      	b.n	8008326 <__exponent+0x60>
	...

08008344 <_printf_float>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	b091      	sub	sp, #68	; 0x44
 800834a:	460c      	mov	r4, r1
 800834c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008350:	4616      	mov	r6, r2
 8008352:	461f      	mov	r7, r3
 8008354:	4605      	mov	r5, r0
 8008356:	f002 fe57 	bl	800b008 <_localeconv_r>
 800835a:	6803      	ldr	r3, [r0, #0]
 800835c:	4618      	mov	r0, r3
 800835e:	9309      	str	r3, [sp, #36]	; 0x24
 8008360:	f7f7 fef6 	bl	8000150 <strlen>
 8008364:	2300      	movs	r3, #0
 8008366:	930e      	str	r3, [sp, #56]	; 0x38
 8008368:	f8d8 3000 	ldr.w	r3, [r8]
 800836c:	900a      	str	r0, [sp, #40]	; 0x28
 800836e:	3307      	adds	r3, #7
 8008370:	f023 0307 	bic.w	r3, r3, #7
 8008374:	f103 0208 	add.w	r2, r3, #8
 8008378:	f894 9018 	ldrb.w	r9, [r4, #24]
 800837c:	f8d4 b000 	ldr.w	fp, [r4]
 8008380:	f8c8 2000 	str.w	r2, [r8]
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800838c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008390:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008394:	930b      	str	r3, [sp, #44]	; 0x2c
 8008396:	f04f 32ff 	mov.w	r2, #4294967295
 800839a:	4640      	mov	r0, r8
 800839c:	4b9c      	ldr	r3, [pc, #624]	; (8008610 <_printf_float+0x2cc>)
 800839e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083a0:	f7f8 fb34 	bl	8000a0c <__aeabi_dcmpun>
 80083a4:	bb70      	cbnz	r0, 8008404 <_printf_float+0xc0>
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	4640      	mov	r0, r8
 80083ac:	4b98      	ldr	r3, [pc, #608]	; (8008610 <_printf_float+0x2cc>)
 80083ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083b0:	f7f8 fb0e 	bl	80009d0 <__aeabi_dcmple>
 80083b4:	bb30      	cbnz	r0, 8008404 <_printf_float+0xc0>
 80083b6:	2200      	movs	r2, #0
 80083b8:	2300      	movs	r3, #0
 80083ba:	4640      	mov	r0, r8
 80083bc:	4651      	mov	r1, sl
 80083be:	f7f8 fafd 	bl	80009bc <__aeabi_dcmplt>
 80083c2:	b110      	cbz	r0, 80083ca <_printf_float+0x86>
 80083c4:	232d      	movs	r3, #45	; 0x2d
 80083c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ca:	4b92      	ldr	r3, [pc, #584]	; (8008614 <_printf_float+0x2d0>)
 80083cc:	4892      	ldr	r0, [pc, #584]	; (8008618 <_printf_float+0x2d4>)
 80083ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80083d2:	bf94      	ite	ls
 80083d4:	4698      	movls	r8, r3
 80083d6:	4680      	movhi	r8, r0
 80083d8:	2303      	movs	r3, #3
 80083da:	f04f 0a00 	mov.w	sl, #0
 80083de:	6123      	str	r3, [r4, #16]
 80083e0:	f02b 0304 	bic.w	r3, fp, #4
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	4633      	mov	r3, r6
 80083e8:	4621      	mov	r1, r4
 80083ea:	4628      	mov	r0, r5
 80083ec:	9700      	str	r7, [sp, #0]
 80083ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80083f0:	f000 f9d4 	bl	800879c <_printf_common>
 80083f4:	3001      	adds	r0, #1
 80083f6:	f040 8090 	bne.w	800851a <_printf_float+0x1d6>
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	b011      	add	sp, #68	; 0x44
 8008400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008404:	4642      	mov	r2, r8
 8008406:	4653      	mov	r3, sl
 8008408:	4640      	mov	r0, r8
 800840a:	4651      	mov	r1, sl
 800840c:	f7f8 fafe 	bl	8000a0c <__aeabi_dcmpun>
 8008410:	b148      	cbz	r0, 8008426 <_printf_float+0xe2>
 8008412:	f1ba 0f00 	cmp.w	sl, #0
 8008416:	bfb8      	it	lt
 8008418:	232d      	movlt	r3, #45	; 0x2d
 800841a:	4880      	ldr	r0, [pc, #512]	; (800861c <_printf_float+0x2d8>)
 800841c:	bfb8      	it	lt
 800841e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008422:	4b7f      	ldr	r3, [pc, #508]	; (8008620 <_printf_float+0x2dc>)
 8008424:	e7d3      	b.n	80083ce <_printf_float+0x8a>
 8008426:	6863      	ldr	r3, [r4, #4]
 8008428:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	d142      	bne.n	80084b6 <_printf_float+0x172>
 8008430:	2306      	movs	r3, #6
 8008432:	6063      	str	r3, [r4, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	9206      	str	r2, [sp, #24]
 8008438:	aa0e      	add	r2, sp, #56	; 0x38
 800843a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800843e:	aa0d      	add	r2, sp, #52	; 0x34
 8008440:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008444:	9203      	str	r2, [sp, #12]
 8008446:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800844a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	6863      	ldr	r3, [r4, #4]
 8008452:	4642      	mov	r2, r8
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	4628      	mov	r0, r5
 8008458:	4653      	mov	r3, sl
 800845a:	910b      	str	r1, [sp, #44]	; 0x2c
 800845c:	f7ff fed4 	bl	8008208 <__cvt>
 8008460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008462:	4680      	mov	r8, r0
 8008464:	2947      	cmp	r1, #71	; 0x47
 8008466:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008468:	d108      	bne.n	800847c <_printf_float+0x138>
 800846a:	1cc8      	adds	r0, r1, #3
 800846c:	db02      	blt.n	8008474 <_printf_float+0x130>
 800846e:	6863      	ldr	r3, [r4, #4]
 8008470:	4299      	cmp	r1, r3
 8008472:	dd40      	ble.n	80084f6 <_printf_float+0x1b2>
 8008474:	f1a9 0902 	sub.w	r9, r9, #2
 8008478:	fa5f f989 	uxtb.w	r9, r9
 800847c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008480:	d81f      	bhi.n	80084c2 <_printf_float+0x17e>
 8008482:	464a      	mov	r2, r9
 8008484:	3901      	subs	r1, #1
 8008486:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800848a:	910d      	str	r1, [sp, #52]	; 0x34
 800848c:	f7ff ff1b 	bl	80082c6 <__exponent>
 8008490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008492:	4682      	mov	sl, r0
 8008494:	1813      	adds	r3, r2, r0
 8008496:	2a01      	cmp	r2, #1
 8008498:	6123      	str	r3, [r4, #16]
 800849a:	dc02      	bgt.n	80084a2 <_printf_float+0x15e>
 800849c:	6822      	ldr	r2, [r4, #0]
 800849e:	07d2      	lsls	r2, r2, #31
 80084a0:	d501      	bpl.n	80084a6 <_printf_float+0x162>
 80084a2:	3301      	adds	r3, #1
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d09b      	beq.n	80083e6 <_printf_float+0xa2>
 80084ae:	232d      	movs	r3, #45	; 0x2d
 80084b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b4:	e797      	b.n	80083e6 <_printf_float+0xa2>
 80084b6:	2947      	cmp	r1, #71	; 0x47
 80084b8:	d1bc      	bne.n	8008434 <_printf_float+0xf0>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1ba      	bne.n	8008434 <_printf_float+0xf0>
 80084be:	2301      	movs	r3, #1
 80084c0:	e7b7      	b.n	8008432 <_printf_float+0xee>
 80084c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80084c6:	d118      	bne.n	80084fa <_printf_float+0x1b6>
 80084c8:	2900      	cmp	r1, #0
 80084ca:	6863      	ldr	r3, [r4, #4]
 80084cc:	dd0b      	ble.n	80084e6 <_printf_float+0x1a2>
 80084ce:	6121      	str	r1, [r4, #16]
 80084d0:	b913      	cbnz	r3, 80084d8 <_printf_float+0x194>
 80084d2:	6822      	ldr	r2, [r4, #0]
 80084d4:	07d0      	lsls	r0, r2, #31
 80084d6:	d502      	bpl.n	80084de <_printf_float+0x19a>
 80084d8:	3301      	adds	r3, #1
 80084da:	440b      	add	r3, r1
 80084dc:	6123      	str	r3, [r4, #16]
 80084de:	f04f 0a00 	mov.w	sl, #0
 80084e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80084e4:	e7df      	b.n	80084a6 <_printf_float+0x162>
 80084e6:	b913      	cbnz	r3, 80084ee <_printf_float+0x1aa>
 80084e8:	6822      	ldr	r2, [r4, #0]
 80084ea:	07d2      	lsls	r2, r2, #31
 80084ec:	d501      	bpl.n	80084f2 <_printf_float+0x1ae>
 80084ee:	3302      	adds	r3, #2
 80084f0:	e7f4      	b.n	80084dc <_printf_float+0x198>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e7f2      	b.n	80084dc <_printf_float+0x198>
 80084f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80084fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fc:	4299      	cmp	r1, r3
 80084fe:	db05      	blt.n	800850c <_printf_float+0x1c8>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	6121      	str	r1, [r4, #16]
 8008504:	07d8      	lsls	r0, r3, #31
 8008506:	d5ea      	bpl.n	80084de <_printf_float+0x19a>
 8008508:	1c4b      	adds	r3, r1, #1
 800850a:	e7e7      	b.n	80084dc <_printf_float+0x198>
 800850c:	2900      	cmp	r1, #0
 800850e:	bfcc      	ite	gt
 8008510:	2201      	movgt	r2, #1
 8008512:	f1c1 0202 	rsble	r2, r1, #2
 8008516:	4413      	add	r3, r2
 8008518:	e7e0      	b.n	80084dc <_printf_float+0x198>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	055a      	lsls	r2, r3, #21
 800851e:	d407      	bmi.n	8008530 <_printf_float+0x1ec>
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	4642      	mov	r2, r8
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	d12b      	bne.n	8008586 <_printf_float+0x242>
 800852e:	e764      	b.n	80083fa <_printf_float+0xb6>
 8008530:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008534:	f240 80dd 	bls.w	80086f2 <_printf_float+0x3ae>
 8008538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800853c:	2200      	movs	r2, #0
 800853e:	2300      	movs	r3, #0
 8008540:	f7f8 fa32 	bl	80009a8 <__aeabi_dcmpeq>
 8008544:	2800      	cmp	r0, #0
 8008546:	d033      	beq.n	80085b0 <_printf_float+0x26c>
 8008548:	2301      	movs	r3, #1
 800854a:	4631      	mov	r1, r6
 800854c:	4628      	mov	r0, r5
 800854e:	4a35      	ldr	r2, [pc, #212]	; (8008624 <_printf_float+0x2e0>)
 8008550:	47b8      	blx	r7
 8008552:	3001      	adds	r0, #1
 8008554:	f43f af51 	beq.w	80083fa <_printf_float+0xb6>
 8008558:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800855c:	429a      	cmp	r2, r3
 800855e:	db02      	blt.n	8008566 <_printf_float+0x222>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	07d8      	lsls	r0, r3, #31
 8008564:	d50f      	bpl.n	8008586 <_printf_float+0x242>
 8008566:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	f43f af42 	beq.w	80083fa <_printf_float+0xb6>
 8008576:	f04f 0800 	mov.w	r8, #0
 800857a:	f104 091a 	add.w	r9, r4, #26
 800857e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008580:	3b01      	subs	r3, #1
 8008582:	4543      	cmp	r3, r8
 8008584:	dc09      	bgt.n	800859a <_printf_float+0x256>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	079b      	lsls	r3, r3, #30
 800858a:	f100 8102 	bmi.w	8008792 <_printf_float+0x44e>
 800858e:	68e0      	ldr	r0, [r4, #12]
 8008590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008592:	4298      	cmp	r0, r3
 8008594:	bfb8      	it	lt
 8008596:	4618      	movlt	r0, r3
 8008598:	e731      	b.n	80083fe <_printf_float+0xba>
 800859a:	2301      	movs	r3, #1
 800859c:	464a      	mov	r2, r9
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f af28 	beq.w	80083fa <_printf_float+0xb6>
 80085aa:	f108 0801 	add.w	r8, r8, #1
 80085ae:	e7e6      	b.n	800857e <_printf_float+0x23a>
 80085b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	dc38      	bgt.n	8008628 <_printf_float+0x2e4>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4631      	mov	r1, r6
 80085ba:	4628      	mov	r0, r5
 80085bc:	4a19      	ldr	r2, [pc, #100]	; (8008624 <_printf_float+0x2e0>)
 80085be:	47b8      	blx	r7
 80085c0:	3001      	adds	r0, #1
 80085c2:	f43f af1a 	beq.w	80083fa <_printf_float+0xb6>
 80085c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80085ca:	4313      	orrs	r3, r2
 80085cc:	d102      	bne.n	80085d4 <_printf_float+0x290>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	07d9      	lsls	r1, r3, #31
 80085d2:	d5d8      	bpl.n	8008586 <_printf_float+0x242>
 80085d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d8:	4631      	mov	r1, r6
 80085da:	4628      	mov	r0, r5
 80085dc:	47b8      	blx	r7
 80085de:	3001      	adds	r0, #1
 80085e0:	f43f af0b 	beq.w	80083fa <_printf_float+0xb6>
 80085e4:	f04f 0900 	mov.w	r9, #0
 80085e8:	f104 0a1a 	add.w	sl, r4, #26
 80085ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ee:	425b      	negs	r3, r3
 80085f0:	454b      	cmp	r3, r9
 80085f2:	dc01      	bgt.n	80085f8 <_printf_float+0x2b4>
 80085f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f6:	e794      	b.n	8008522 <_printf_float+0x1de>
 80085f8:	2301      	movs	r3, #1
 80085fa:	4652      	mov	r2, sl
 80085fc:	4631      	mov	r1, r6
 80085fe:	4628      	mov	r0, r5
 8008600:	47b8      	blx	r7
 8008602:	3001      	adds	r0, #1
 8008604:	f43f aef9 	beq.w	80083fa <_printf_float+0xb6>
 8008608:	f109 0901 	add.w	r9, r9, #1
 800860c:	e7ee      	b.n	80085ec <_printf_float+0x2a8>
 800860e:	bf00      	nop
 8008610:	7fefffff 	.word	0x7fefffff
 8008614:	0800cb4c 	.word	0x0800cb4c
 8008618:	0800cb50 	.word	0x0800cb50
 800861c:	0800cb58 	.word	0x0800cb58
 8008620:	0800cb54 	.word	0x0800cb54
 8008624:	0800cb5c 	.word	0x0800cb5c
 8008628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800862a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800862c:	429a      	cmp	r2, r3
 800862e:	bfa8      	it	ge
 8008630:	461a      	movge	r2, r3
 8008632:	2a00      	cmp	r2, #0
 8008634:	4691      	mov	r9, r2
 8008636:	dc37      	bgt.n	80086a8 <_printf_float+0x364>
 8008638:	f04f 0b00 	mov.w	fp, #0
 800863c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008640:	f104 021a 	add.w	r2, r4, #26
 8008644:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008648:	ebaa 0309 	sub.w	r3, sl, r9
 800864c:	455b      	cmp	r3, fp
 800864e:	dc33      	bgt.n	80086b8 <_printf_float+0x374>
 8008650:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008654:	429a      	cmp	r2, r3
 8008656:	db3b      	blt.n	80086d0 <_printf_float+0x38c>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	07da      	lsls	r2, r3, #31
 800865c:	d438      	bmi.n	80086d0 <_printf_float+0x38c>
 800865e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008660:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008662:	eba3 020a 	sub.w	r2, r3, sl
 8008666:	eba3 0901 	sub.w	r9, r3, r1
 800866a:	4591      	cmp	r9, r2
 800866c:	bfa8      	it	ge
 800866e:	4691      	movge	r9, r2
 8008670:	f1b9 0f00 	cmp.w	r9, #0
 8008674:	dc34      	bgt.n	80086e0 <_printf_float+0x39c>
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800867e:	f104 0a1a 	add.w	sl, r4, #26
 8008682:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008686:	1a9b      	subs	r3, r3, r2
 8008688:	eba3 0309 	sub.w	r3, r3, r9
 800868c:	4543      	cmp	r3, r8
 800868e:	f77f af7a 	ble.w	8008586 <_printf_float+0x242>
 8008692:	2301      	movs	r3, #1
 8008694:	4652      	mov	r2, sl
 8008696:	4631      	mov	r1, r6
 8008698:	4628      	mov	r0, r5
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	f43f aeac 	beq.w	80083fa <_printf_float+0xb6>
 80086a2:	f108 0801 	add.w	r8, r8, #1
 80086a6:	e7ec      	b.n	8008682 <_printf_float+0x33e>
 80086a8:	4613      	mov	r3, r2
 80086aa:	4631      	mov	r1, r6
 80086ac:	4642      	mov	r2, r8
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	d1c0      	bne.n	8008638 <_printf_float+0x2f4>
 80086b6:	e6a0      	b.n	80083fa <_printf_float+0xb6>
 80086b8:	2301      	movs	r3, #1
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	920b      	str	r2, [sp, #44]	; 0x2c
 80086c0:	47b8      	blx	r7
 80086c2:	3001      	adds	r0, #1
 80086c4:	f43f ae99 	beq.w	80083fa <_printf_float+0xb6>
 80086c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086ca:	f10b 0b01 	add.w	fp, fp, #1
 80086ce:	e7b9      	b.n	8008644 <_printf_float+0x300>
 80086d0:	4631      	mov	r1, r6
 80086d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	d1bf      	bne.n	800865e <_printf_float+0x31a>
 80086de:	e68c      	b.n	80083fa <_printf_float+0xb6>
 80086e0:	464b      	mov	r3, r9
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	eb08 020a 	add.w	r2, r8, sl
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	d1c2      	bne.n	8008676 <_printf_float+0x332>
 80086f0:	e683      	b.n	80083fa <_printf_float+0xb6>
 80086f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086f4:	2a01      	cmp	r2, #1
 80086f6:	dc01      	bgt.n	80086fc <_printf_float+0x3b8>
 80086f8:	07db      	lsls	r3, r3, #31
 80086fa:	d537      	bpl.n	800876c <_printf_float+0x428>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4642      	mov	r2, r8
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f ae77 	beq.w	80083fa <_printf_float+0xb6>
 800870c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008710:	4631      	mov	r1, r6
 8008712:	4628      	mov	r0, r5
 8008714:	47b8      	blx	r7
 8008716:	3001      	adds	r0, #1
 8008718:	f43f ae6f 	beq.w	80083fa <_printf_float+0xb6>
 800871c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008720:	2200      	movs	r2, #0
 8008722:	2300      	movs	r3, #0
 8008724:	f7f8 f940 	bl	80009a8 <__aeabi_dcmpeq>
 8008728:	b9d8      	cbnz	r0, 8008762 <_printf_float+0x41e>
 800872a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800872c:	f108 0201 	add.w	r2, r8, #1
 8008730:	3b01      	subs	r3, #1
 8008732:	4631      	mov	r1, r6
 8008734:	4628      	mov	r0, r5
 8008736:	47b8      	blx	r7
 8008738:	3001      	adds	r0, #1
 800873a:	d10e      	bne.n	800875a <_printf_float+0x416>
 800873c:	e65d      	b.n	80083fa <_printf_float+0xb6>
 800873e:	2301      	movs	r3, #1
 8008740:	464a      	mov	r2, r9
 8008742:	4631      	mov	r1, r6
 8008744:	4628      	mov	r0, r5
 8008746:	47b8      	blx	r7
 8008748:	3001      	adds	r0, #1
 800874a:	f43f ae56 	beq.w	80083fa <_printf_float+0xb6>
 800874e:	f108 0801 	add.w	r8, r8, #1
 8008752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008754:	3b01      	subs	r3, #1
 8008756:	4543      	cmp	r3, r8
 8008758:	dcf1      	bgt.n	800873e <_printf_float+0x3fa>
 800875a:	4653      	mov	r3, sl
 800875c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008760:	e6e0      	b.n	8008524 <_printf_float+0x1e0>
 8008762:	f04f 0800 	mov.w	r8, #0
 8008766:	f104 091a 	add.w	r9, r4, #26
 800876a:	e7f2      	b.n	8008752 <_printf_float+0x40e>
 800876c:	2301      	movs	r3, #1
 800876e:	4642      	mov	r2, r8
 8008770:	e7df      	b.n	8008732 <_printf_float+0x3ee>
 8008772:	2301      	movs	r3, #1
 8008774:	464a      	mov	r2, r9
 8008776:	4631      	mov	r1, r6
 8008778:	4628      	mov	r0, r5
 800877a:	47b8      	blx	r7
 800877c:	3001      	adds	r0, #1
 800877e:	f43f ae3c 	beq.w	80083fa <_printf_float+0xb6>
 8008782:	f108 0801 	add.w	r8, r8, #1
 8008786:	68e3      	ldr	r3, [r4, #12]
 8008788:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800878a:	1a5b      	subs	r3, r3, r1
 800878c:	4543      	cmp	r3, r8
 800878e:	dcf0      	bgt.n	8008772 <_printf_float+0x42e>
 8008790:	e6fd      	b.n	800858e <_printf_float+0x24a>
 8008792:	f04f 0800 	mov.w	r8, #0
 8008796:	f104 0919 	add.w	r9, r4, #25
 800879a:	e7f4      	b.n	8008786 <_printf_float+0x442>

0800879c <_printf_common>:
 800879c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a0:	4616      	mov	r6, r2
 80087a2:	4699      	mov	r9, r3
 80087a4:	688a      	ldr	r2, [r1, #8]
 80087a6:	690b      	ldr	r3, [r1, #16]
 80087a8:	4607      	mov	r7, r0
 80087aa:	4293      	cmp	r3, r2
 80087ac:	bfb8      	it	lt
 80087ae:	4613      	movlt	r3, r2
 80087b0:	6033      	str	r3, [r6, #0]
 80087b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087b6:	460c      	mov	r4, r1
 80087b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087bc:	b10a      	cbz	r2, 80087c2 <_printf_common+0x26>
 80087be:	3301      	adds	r3, #1
 80087c0:	6033      	str	r3, [r6, #0]
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	0699      	lsls	r1, r3, #26
 80087c6:	bf42      	ittt	mi
 80087c8:	6833      	ldrmi	r3, [r6, #0]
 80087ca:	3302      	addmi	r3, #2
 80087cc:	6033      	strmi	r3, [r6, #0]
 80087ce:	6825      	ldr	r5, [r4, #0]
 80087d0:	f015 0506 	ands.w	r5, r5, #6
 80087d4:	d106      	bne.n	80087e4 <_printf_common+0x48>
 80087d6:	f104 0a19 	add.w	sl, r4, #25
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	6832      	ldr	r2, [r6, #0]
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	42ab      	cmp	r3, r5
 80087e2:	dc28      	bgt.n	8008836 <_printf_common+0x9a>
 80087e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087e8:	1e13      	subs	r3, r2, #0
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	bf18      	it	ne
 80087ee:	2301      	movne	r3, #1
 80087f0:	0692      	lsls	r2, r2, #26
 80087f2:	d42d      	bmi.n	8008850 <_printf_common+0xb4>
 80087f4:	4649      	mov	r1, r9
 80087f6:	4638      	mov	r0, r7
 80087f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087fc:	47c0      	blx	r8
 80087fe:	3001      	adds	r0, #1
 8008800:	d020      	beq.n	8008844 <_printf_common+0xa8>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	68e5      	ldr	r5, [r4, #12]
 8008806:	f003 0306 	and.w	r3, r3, #6
 800880a:	2b04      	cmp	r3, #4
 800880c:	bf18      	it	ne
 800880e:	2500      	movne	r5, #0
 8008810:	6832      	ldr	r2, [r6, #0]
 8008812:	f04f 0600 	mov.w	r6, #0
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	bf08      	it	eq
 800881a:	1aad      	subeq	r5, r5, r2
 800881c:	6922      	ldr	r2, [r4, #16]
 800881e:	bf08      	it	eq
 8008820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008824:	4293      	cmp	r3, r2
 8008826:	bfc4      	itt	gt
 8008828:	1a9b      	subgt	r3, r3, r2
 800882a:	18ed      	addgt	r5, r5, r3
 800882c:	341a      	adds	r4, #26
 800882e:	42b5      	cmp	r5, r6
 8008830:	d11a      	bne.n	8008868 <_printf_common+0xcc>
 8008832:	2000      	movs	r0, #0
 8008834:	e008      	b.n	8008848 <_printf_common+0xac>
 8008836:	2301      	movs	r3, #1
 8008838:	4652      	mov	r2, sl
 800883a:	4649      	mov	r1, r9
 800883c:	4638      	mov	r0, r7
 800883e:	47c0      	blx	r8
 8008840:	3001      	adds	r0, #1
 8008842:	d103      	bne.n	800884c <_printf_common+0xb0>
 8008844:	f04f 30ff 	mov.w	r0, #4294967295
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	3501      	adds	r5, #1
 800884e:	e7c4      	b.n	80087da <_printf_common+0x3e>
 8008850:	2030      	movs	r0, #48	; 0x30
 8008852:	18e1      	adds	r1, r4, r3
 8008854:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800885e:	4422      	add	r2, r4
 8008860:	3302      	adds	r3, #2
 8008862:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008866:	e7c5      	b.n	80087f4 <_printf_common+0x58>
 8008868:	2301      	movs	r3, #1
 800886a:	4622      	mov	r2, r4
 800886c:	4649      	mov	r1, r9
 800886e:	4638      	mov	r0, r7
 8008870:	47c0      	blx	r8
 8008872:	3001      	adds	r0, #1
 8008874:	d0e6      	beq.n	8008844 <_printf_common+0xa8>
 8008876:	3601      	adds	r6, #1
 8008878:	e7d9      	b.n	800882e <_printf_common+0x92>
	...

0800887c <_printf_i>:
 800887c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	7e0f      	ldrb	r7, [r1, #24]
 8008882:	4691      	mov	r9, r2
 8008884:	2f78      	cmp	r7, #120	; 0x78
 8008886:	4680      	mov	r8, r0
 8008888:	460c      	mov	r4, r1
 800888a:	469a      	mov	sl, r3
 800888c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800888e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008892:	d807      	bhi.n	80088a4 <_printf_i+0x28>
 8008894:	2f62      	cmp	r7, #98	; 0x62
 8008896:	d80a      	bhi.n	80088ae <_printf_i+0x32>
 8008898:	2f00      	cmp	r7, #0
 800889a:	f000 80d9 	beq.w	8008a50 <_printf_i+0x1d4>
 800889e:	2f58      	cmp	r7, #88	; 0x58
 80088a0:	f000 80a4 	beq.w	80089ec <_printf_i+0x170>
 80088a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088ac:	e03a      	b.n	8008924 <_printf_i+0xa8>
 80088ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088b2:	2b15      	cmp	r3, #21
 80088b4:	d8f6      	bhi.n	80088a4 <_printf_i+0x28>
 80088b6:	a101      	add	r1, pc, #4	; (adr r1, 80088bc <_printf_i+0x40>)
 80088b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088bc:	08008915 	.word	0x08008915
 80088c0:	08008929 	.word	0x08008929
 80088c4:	080088a5 	.word	0x080088a5
 80088c8:	080088a5 	.word	0x080088a5
 80088cc:	080088a5 	.word	0x080088a5
 80088d0:	080088a5 	.word	0x080088a5
 80088d4:	08008929 	.word	0x08008929
 80088d8:	080088a5 	.word	0x080088a5
 80088dc:	080088a5 	.word	0x080088a5
 80088e0:	080088a5 	.word	0x080088a5
 80088e4:	080088a5 	.word	0x080088a5
 80088e8:	08008a37 	.word	0x08008a37
 80088ec:	08008959 	.word	0x08008959
 80088f0:	08008a19 	.word	0x08008a19
 80088f4:	080088a5 	.word	0x080088a5
 80088f8:	080088a5 	.word	0x080088a5
 80088fc:	08008a59 	.word	0x08008a59
 8008900:	080088a5 	.word	0x080088a5
 8008904:	08008959 	.word	0x08008959
 8008908:	080088a5 	.word	0x080088a5
 800890c:	080088a5 	.word	0x080088a5
 8008910:	08008a21 	.word	0x08008a21
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	1d1a      	adds	r2, r3, #4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	602a      	str	r2, [r5, #0]
 800891c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008924:	2301      	movs	r3, #1
 8008926:	e0a4      	b.n	8008a72 <_printf_i+0x1f6>
 8008928:	6820      	ldr	r0, [r4, #0]
 800892a:	6829      	ldr	r1, [r5, #0]
 800892c:	0606      	lsls	r6, r0, #24
 800892e:	f101 0304 	add.w	r3, r1, #4
 8008932:	d50a      	bpl.n	800894a <_printf_i+0xce>
 8008934:	680e      	ldr	r6, [r1, #0]
 8008936:	602b      	str	r3, [r5, #0]
 8008938:	2e00      	cmp	r6, #0
 800893a:	da03      	bge.n	8008944 <_printf_i+0xc8>
 800893c:	232d      	movs	r3, #45	; 0x2d
 800893e:	4276      	negs	r6, r6
 8008940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008944:	230a      	movs	r3, #10
 8008946:	485e      	ldr	r0, [pc, #376]	; (8008ac0 <_printf_i+0x244>)
 8008948:	e019      	b.n	800897e <_printf_i+0x102>
 800894a:	680e      	ldr	r6, [r1, #0]
 800894c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008950:	602b      	str	r3, [r5, #0]
 8008952:	bf18      	it	ne
 8008954:	b236      	sxthne	r6, r6
 8008956:	e7ef      	b.n	8008938 <_printf_i+0xbc>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	6820      	ldr	r0, [r4, #0]
 800895c:	1d19      	adds	r1, r3, #4
 800895e:	6029      	str	r1, [r5, #0]
 8008960:	0601      	lsls	r1, r0, #24
 8008962:	d501      	bpl.n	8008968 <_printf_i+0xec>
 8008964:	681e      	ldr	r6, [r3, #0]
 8008966:	e002      	b.n	800896e <_printf_i+0xf2>
 8008968:	0646      	lsls	r6, r0, #25
 800896a:	d5fb      	bpl.n	8008964 <_printf_i+0xe8>
 800896c:	881e      	ldrh	r6, [r3, #0]
 800896e:	2f6f      	cmp	r7, #111	; 0x6f
 8008970:	bf0c      	ite	eq
 8008972:	2308      	moveq	r3, #8
 8008974:	230a      	movne	r3, #10
 8008976:	4852      	ldr	r0, [pc, #328]	; (8008ac0 <_printf_i+0x244>)
 8008978:	2100      	movs	r1, #0
 800897a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800897e:	6865      	ldr	r5, [r4, #4]
 8008980:	2d00      	cmp	r5, #0
 8008982:	bfa8      	it	ge
 8008984:	6821      	ldrge	r1, [r4, #0]
 8008986:	60a5      	str	r5, [r4, #8]
 8008988:	bfa4      	itt	ge
 800898a:	f021 0104 	bicge.w	r1, r1, #4
 800898e:	6021      	strge	r1, [r4, #0]
 8008990:	b90e      	cbnz	r6, 8008996 <_printf_i+0x11a>
 8008992:	2d00      	cmp	r5, #0
 8008994:	d04d      	beq.n	8008a32 <_printf_i+0x1b6>
 8008996:	4615      	mov	r5, r2
 8008998:	fbb6 f1f3 	udiv	r1, r6, r3
 800899c:	fb03 6711 	mls	r7, r3, r1, r6
 80089a0:	5dc7      	ldrb	r7, [r0, r7]
 80089a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089a6:	4637      	mov	r7, r6
 80089a8:	42bb      	cmp	r3, r7
 80089aa:	460e      	mov	r6, r1
 80089ac:	d9f4      	bls.n	8008998 <_printf_i+0x11c>
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d10b      	bne.n	80089ca <_printf_i+0x14e>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	07de      	lsls	r6, r3, #31
 80089b6:	d508      	bpl.n	80089ca <_printf_i+0x14e>
 80089b8:	6923      	ldr	r3, [r4, #16]
 80089ba:	6861      	ldr	r1, [r4, #4]
 80089bc:	4299      	cmp	r1, r3
 80089be:	bfde      	ittt	le
 80089c0:	2330      	movle	r3, #48	; 0x30
 80089c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089ca:	1b52      	subs	r2, r2, r5
 80089cc:	6122      	str	r2, [r4, #16]
 80089ce:	464b      	mov	r3, r9
 80089d0:	4621      	mov	r1, r4
 80089d2:	4640      	mov	r0, r8
 80089d4:	f8cd a000 	str.w	sl, [sp]
 80089d8:	aa03      	add	r2, sp, #12
 80089da:	f7ff fedf 	bl	800879c <_printf_common>
 80089de:	3001      	adds	r0, #1
 80089e0:	d14c      	bne.n	8008a7c <_printf_i+0x200>
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295
 80089e6:	b004      	add	sp, #16
 80089e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ec:	4834      	ldr	r0, [pc, #208]	; (8008ac0 <_printf_i+0x244>)
 80089ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089f2:	6829      	ldr	r1, [r5, #0]
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80089fa:	6029      	str	r1, [r5, #0]
 80089fc:	061d      	lsls	r5, r3, #24
 80089fe:	d514      	bpl.n	8008a2a <_printf_i+0x1ae>
 8008a00:	07df      	lsls	r7, r3, #31
 8008a02:	bf44      	itt	mi
 8008a04:	f043 0320 	orrmi.w	r3, r3, #32
 8008a08:	6023      	strmi	r3, [r4, #0]
 8008a0a:	b91e      	cbnz	r6, 8008a14 <_printf_i+0x198>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	f023 0320 	bic.w	r3, r3, #32
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	2310      	movs	r3, #16
 8008a16:	e7af      	b.n	8008978 <_printf_i+0xfc>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	f043 0320 	orr.w	r3, r3, #32
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	2378      	movs	r3, #120	; 0x78
 8008a22:	4828      	ldr	r0, [pc, #160]	; (8008ac4 <_printf_i+0x248>)
 8008a24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a28:	e7e3      	b.n	80089f2 <_printf_i+0x176>
 8008a2a:	0659      	lsls	r1, r3, #25
 8008a2c:	bf48      	it	mi
 8008a2e:	b2b6      	uxthmi	r6, r6
 8008a30:	e7e6      	b.n	8008a00 <_printf_i+0x184>
 8008a32:	4615      	mov	r5, r2
 8008a34:	e7bb      	b.n	80089ae <_printf_i+0x132>
 8008a36:	682b      	ldr	r3, [r5, #0]
 8008a38:	6826      	ldr	r6, [r4, #0]
 8008a3a:	1d18      	adds	r0, r3, #4
 8008a3c:	6961      	ldr	r1, [r4, #20]
 8008a3e:	6028      	str	r0, [r5, #0]
 8008a40:	0635      	lsls	r5, r6, #24
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	d501      	bpl.n	8008a4a <_printf_i+0x1ce>
 8008a46:	6019      	str	r1, [r3, #0]
 8008a48:	e002      	b.n	8008a50 <_printf_i+0x1d4>
 8008a4a:	0670      	lsls	r0, r6, #25
 8008a4c:	d5fb      	bpl.n	8008a46 <_printf_i+0x1ca>
 8008a4e:	8019      	strh	r1, [r3, #0]
 8008a50:	2300      	movs	r3, #0
 8008a52:	4615      	mov	r5, r2
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	e7ba      	b.n	80089ce <_printf_i+0x152>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	1d1a      	adds	r2, r3, #4
 8008a5e:	602a      	str	r2, [r5, #0]
 8008a60:	681d      	ldr	r5, [r3, #0]
 8008a62:	6862      	ldr	r2, [r4, #4]
 8008a64:	4628      	mov	r0, r5
 8008a66:	f002 faed 	bl	800b044 <memchr>
 8008a6a:	b108      	cbz	r0, 8008a70 <_printf_i+0x1f4>
 8008a6c:	1b40      	subs	r0, r0, r5
 8008a6e:	6060      	str	r0, [r4, #4]
 8008a70:	6863      	ldr	r3, [r4, #4]
 8008a72:	6123      	str	r3, [r4, #16]
 8008a74:	2300      	movs	r3, #0
 8008a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a7a:	e7a8      	b.n	80089ce <_printf_i+0x152>
 8008a7c:	462a      	mov	r2, r5
 8008a7e:	4649      	mov	r1, r9
 8008a80:	4640      	mov	r0, r8
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	47d0      	blx	sl
 8008a86:	3001      	adds	r0, #1
 8008a88:	d0ab      	beq.n	80089e2 <_printf_i+0x166>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	079b      	lsls	r3, r3, #30
 8008a8e:	d413      	bmi.n	8008ab8 <_printf_i+0x23c>
 8008a90:	68e0      	ldr	r0, [r4, #12]
 8008a92:	9b03      	ldr	r3, [sp, #12]
 8008a94:	4298      	cmp	r0, r3
 8008a96:	bfb8      	it	lt
 8008a98:	4618      	movlt	r0, r3
 8008a9a:	e7a4      	b.n	80089e6 <_printf_i+0x16a>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4632      	mov	r2, r6
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	47d0      	blx	sl
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d09b      	beq.n	80089e2 <_printf_i+0x166>
 8008aaa:	3501      	adds	r5, #1
 8008aac:	68e3      	ldr	r3, [r4, #12]
 8008aae:	9903      	ldr	r1, [sp, #12]
 8008ab0:	1a5b      	subs	r3, r3, r1
 8008ab2:	42ab      	cmp	r3, r5
 8008ab4:	dcf2      	bgt.n	8008a9c <_printf_i+0x220>
 8008ab6:	e7eb      	b.n	8008a90 <_printf_i+0x214>
 8008ab8:	2500      	movs	r5, #0
 8008aba:	f104 0619 	add.w	r6, r4, #25
 8008abe:	e7f5      	b.n	8008aac <_printf_i+0x230>
 8008ac0:	0800cb5e 	.word	0x0800cb5e
 8008ac4:	0800cb6f 	.word	0x0800cb6f

08008ac8 <_scanf_float>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	b087      	sub	sp, #28
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	688b      	ldr	r3, [r1, #8]
 8008ad2:	4617      	mov	r7, r2
 8008ad4:	1e5a      	subs	r2, r3, #1
 8008ad6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008ada:	bf85      	ittet	hi
 8008adc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008ae0:	195b      	addhi	r3, r3, r5
 8008ae2:	2300      	movls	r3, #0
 8008ae4:	9302      	strhi	r3, [sp, #8]
 8008ae6:	bf88      	it	hi
 8008ae8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008aec:	468b      	mov	fp, r1
 8008aee:	f04f 0500 	mov.w	r5, #0
 8008af2:	bf8c      	ite	hi
 8008af4:	608b      	strhi	r3, [r1, #8]
 8008af6:	9302      	strls	r3, [sp, #8]
 8008af8:	680b      	ldr	r3, [r1, #0]
 8008afa:	4680      	mov	r8, r0
 8008afc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008b00:	f84b 3b1c 	str.w	r3, [fp], #28
 8008b04:	460c      	mov	r4, r1
 8008b06:	465e      	mov	r6, fp
 8008b08:	46aa      	mov	sl, r5
 8008b0a:	46a9      	mov	r9, r5
 8008b0c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b10:	9501      	str	r5, [sp, #4]
 8008b12:	68a2      	ldr	r2, [r4, #8]
 8008b14:	b152      	cbz	r2, 8008b2c <_scanf_float+0x64>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	2b4e      	cmp	r3, #78	; 0x4e
 8008b1c:	d864      	bhi.n	8008be8 <_scanf_float+0x120>
 8008b1e:	2b40      	cmp	r3, #64	; 0x40
 8008b20:	d83c      	bhi.n	8008b9c <_scanf_float+0xd4>
 8008b22:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008b26:	b2c8      	uxtb	r0, r1
 8008b28:	280e      	cmp	r0, #14
 8008b2a:	d93a      	bls.n	8008ba2 <_scanf_float+0xda>
 8008b2c:	f1b9 0f00 	cmp.w	r9, #0
 8008b30:	d003      	beq.n	8008b3a <_scanf_float+0x72>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b3e:	f1ba 0f01 	cmp.w	sl, #1
 8008b42:	f200 8113 	bhi.w	8008d6c <_scanf_float+0x2a4>
 8008b46:	455e      	cmp	r6, fp
 8008b48:	f200 8105 	bhi.w	8008d56 <_scanf_float+0x28e>
 8008b4c:	2501      	movs	r5, #1
 8008b4e:	4628      	mov	r0, r5
 8008b50:	b007      	add	sp, #28
 8008b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008b5a:	2a0d      	cmp	r2, #13
 8008b5c:	d8e6      	bhi.n	8008b2c <_scanf_float+0x64>
 8008b5e:	a101      	add	r1, pc, #4	; (adr r1, 8008b64 <_scanf_float+0x9c>)
 8008b60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b64:	08008ca3 	.word	0x08008ca3
 8008b68:	08008b2d 	.word	0x08008b2d
 8008b6c:	08008b2d 	.word	0x08008b2d
 8008b70:	08008b2d 	.word	0x08008b2d
 8008b74:	08008d03 	.word	0x08008d03
 8008b78:	08008cdb 	.word	0x08008cdb
 8008b7c:	08008b2d 	.word	0x08008b2d
 8008b80:	08008b2d 	.word	0x08008b2d
 8008b84:	08008cb1 	.word	0x08008cb1
 8008b88:	08008b2d 	.word	0x08008b2d
 8008b8c:	08008b2d 	.word	0x08008b2d
 8008b90:	08008b2d 	.word	0x08008b2d
 8008b94:	08008b2d 	.word	0x08008b2d
 8008b98:	08008c69 	.word	0x08008c69
 8008b9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ba0:	e7db      	b.n	8008b5a <_scanf_float+0x92>
 8008ba2:	290e      	cmp	r1, #14
 8008ba4:	d8c2      	bhi.n	8008b2c <_scanf_float+0x64>
 8008ba6:	a001      	add	r0, pc, #4	; (adr r0, 8008bac <_scanf_float+0xe4>)
 8008ba8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008bac:	08008c5b 	.word	0x08008c5b
 8008bb0:	08008b2d 	.word	0x08008b2d
 8008bb4:	08008c5b 	.word	0x08008c5b
 8008bb8:	08008cef 	.word	0x08008cef
 8008bbc:	08008b2d 	.word	0x08008b2d
 8008bc0:	08008c09 	.word	0x08008c09
 8008bc4:	08008c45 	.word	0x08008c45
 8008bc8:	08008c45 	.word	0x08008c45
 8008bcc:	08008c45 	.word	0x08008c45
 8008bd0:	08008c45 	.word	0x08008c45
 8008bd4:	08008c45 	.word	0x08008c45
 8008bd8:	08008c45 	.word	0x08008c45
 8008bdc:	08008c45 	.word	0x08008c45
 8008be0:	08008c45 	.word	0x08008c45
 8008be4:	08008c45 	.word	0x08008c45
 8008be8:	2b6e      	cmp	r3, #110	; 0x6e
 8008bea:	d809      	bhi.n	8008c00 <_scanf_float+0x138>
 8008bec:	2b60      	cmp	r3, #96	; 0x60
 8008bee:	d8b2      	bhi.n	8008b56 <_scanf_float+0x8e>
 8008bf0:	2b54      	cmp	r3, #84	; 0x54
 8008bf2:	d077      	beq.n	8008ce4 <_scanf_float+0x21c>
 8008bf4:	2b59      	cmp	r3, #89	; 0x59
 8008bf6:	d199      	bne.n	8008b2c <_scanf_float+0x64>
 8008bf8:	2d07      	cmp	r5, #7
 8008bfa:	d197      	bne.n	8008b2c <_scanf_float+0x64>
 8008bfc:	2508      	movs	r5, #8
 8008bfe:	e029      	b.n	8008c54 <_scanf_float+0x18c>
 8008c00:	2b74      	cmp	r3, #116	; 0x74
 8008c02:	d06f      	beq.n	8008ce4 <_scanf_float+0x21c>
 8008c04:	2b79      	cmp	r3, #121	; 0x79
 8008c06:	e7f6      	b.n	8008bf6 <_scanf_float+0x12e>
 8008c08:	6821      	ldr	r1, [r4, #0]
 8008c0a:	05c8      	lsls	r0, r1, #23
 8008c0c:	d51a      	bpl.n	8008c44 <_scanf_float+0x17c>
 8008c0e:	9b02      	ldr	r3, [sp, #8]
 8008c10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008c14:	6021      	str	r1, [r4, #0]
 8008c16:	f109 0901 	add.w	r9, r9, #1
 8008c1a:	b11b      	cbz	r3, 8008c24 <_scanf_float+0x15c>
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	3201      	adds	r2, #1
 8008c20:	9302      	str	r3, [sp, #8]
 8008c22:	60a2      	str	r2, [r4, #8]
 8008c24:	68a3      	ldr	r3, [r4, #8]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	6123      	str	r3, [r4, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	607b      	str	r3, [r7, #4]
 8008c38:	f340 8084 	ble.w	8008d44 <_scanf_float+0x27c>
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	603b      	str	r3, [r7, #0]
 8008c42:	e766      	b.n	8008b12 <_scanf_float+0x4a>
 8008c44:	eb1a 0f05 	cmn.w	sl, r5
 8008c48:	f47f af70 	bne.w	8008b2c <_scanf_float+0x64>
 8008c4c:	6822      	ldr	r2, [r4, #0]
 8008c4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008c52:	6022      	str	r2, [r4, #0]
 8008c54:	f806 3b01 	strb.w	r3, [r6], #1
 8008c58:	e7e4      	b.n	8008c24 <_scanf_float+0x15c>
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	0610      	lsls	r0, r2, #24
 8008c5e:	f57f af65 	bpl.w	8008b2c <_scanf_float+0x64>
 8008c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c66:	e7f4      	b.n	8008c52 <_scanf_float+0x18a>
 8008c68:	f1ba 0f00 	cmp.w	sl, #0
 8008c6c:	d10e      	bne.n	8008c8c <_scanf_float+0x1c4>
 8008c6e:	f1b9 0f00 	cmp.w	r9, #0
 8008c72:	d10e      	bne.n	8008c92 <_scanf_float+0x1ca>
 8008c74:	6822      	ldr	r2, [r4, #0]
 8008c76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008c7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008c7e:	d108      	bne.n	8008c92 <_scanf_float+0x1ca>
 8008c80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c84:	f04f 0a01 	mov.w	sl, #1
 8008c88:	6022      	str	r2, [r4, #0]
 8008c8a:	e7e3      	b.n	8008c54 <_scanf_float+0x18c>
 8008c8c:	f1ba 0f02 	cmp.w	sl, #2
 8008c90:	d055      	beq.n	8008d3e <_scanf_float+0x276>
 8008c92:	2d01      	cmp	r5, #1
 8008c94:	d002      	beq.n	8008c9c <_scanf_float+0x1d4>
 8008c96:	2d04      	cmp	r5, #4
 8008c98:	f47f af48 	bne.w	8008b2c <_scanf_float+0x64>
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	b2ed      	uxtb	r5, r5
 8008ca0:	e7d8      	b.n	8008c54 <_scanf_float+0x18c>
 8008ca2:	f1ba 0f01 	cmp.w	sl, #1
 8008ca6:	f47f af41 	bne.w	8008b2c <_scanf_float+0x64>
 8008caa:	f04f 0a02 	mov.w	sl, #2
 8008cae:	e7d1      	b.n	8008c54 <_scanf_float+0x18c>
 8008cb0:	b97d      	cbnz	r5, 8008cd2 <_scanf_float+0x20a>
 8008cb2:	f1b9 0f00 	cmp.w	r9, #0
 8008cb6:	f47f af3c 	bne.w	8008b32 <_scanf_float+0x6a>
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008cc0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008cc4:	f47f af39 	bne.w	8008b3a <_scanf_float+0x72>
 8008cc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ccc:	2501      	movs	r5, #1
 8008cce:	6022      	str	r2, [r4, #0]
 8008cd0:	e7c0      	b.n	8008c54 <_scanf_float+0x18c>
 8008cd2:	2d03      	cmp	r5, #3
 8008cd4:	d0e2      	beq.n	8008c9c <_scanf_float+0x1d4>
 8008cd6:	2d05      	cmp	r5, #5
 8008cd8:	e7de      	b.n	8008c98 <_scanf_float+0x1d0>
 8008cda:	2d02      	cmp	r5, #2
 8008cdc:	f47f af26 	bne.w	8008b2c <_scanf_float+0x64>
 8008ce0:	2503      	movs	r5, #3
 8008ce2:	e7b7      	b.n	8008c54 <_scanf_float+0x18c>
 8008ce4:	2d06      	cmp	r5, #6
 8008ce6:	f47f af21 	bne.w	8008b2c <_scanf_float+0x64>
 8008cea:	2507      	movs	r5, #7
 8008cec:	e7b2      	b.n	8008c54 <_scanf_float+0x18c>
 8008cee:	6822      	ldr	r2, [r4, #0]
 8008cf0:	0591      	lsls	r1, r2, #22
 8008cf2:	f57f af1b 	bpl.w	8008b2c <_scanf_float+0x64>
 8008cf6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008cfa:	6022      	str	r2, [r4, #0]
 8008cfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d00:	e7a8      	b.n	8008c54 <_scanf_float+0x18c>
 8008d02:	6822      	ldr	r2, [r4, #0]
 8008d04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008d08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008d0c:	d006      	beq.n	8008d1c <_scanf_float+0x254>
 8008d0e:	0550      	lsls	r0, r2, #21
 8008d10:	f57f af0c 	bpl.w	8008b2c <_scanf_float+0x64>
 8008d14:	f1b9 0f00 	cmp.w	r9, #0
 8008d18:	f43f af0f 	beq.w	8008b3a <_scanf_float+0x72>
 8008d1c:	0591      	lsls	r1, r2, #22
 8008d1e:	bf58      	it	pl
 8008d20:	9901      	ldrpl	r1, [sp, #4]
 8008d22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d26:	bf58      	it	pl
 8008d28:	eba9 0101 	subpl.w	r1, r9, r1
 8008d2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008d30:	f04f 0900 	mov.w	r9, #0
 8008d34:	bf58      	it	pl
 8008d36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d3a:	6022      	str	r2, [r4, #0]
 8008d3c:	e78a      	b.n	8008c54 <_scanf_float+0x18c>
 8008d3e:	f04f 0a03 	mov.w	sl, #3
 8008d42:	e787      	b.n	8008c54 <_scanf_float+0x18c>
 8008d44:	4639      	mov	r1, r7
 8008d46:	4640      	mov	r0, r8
 8008d48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d4c:	4798      	blx	r3
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f43f aedf 	beq.w	8008b12 <_scanf_float+0x4a>
 8008d54:	e6ea      	b.n	8008b2c <_scanf_float+0x64>
 8008d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d5a:	463a      	mov	r2, r7
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d62:	4798      	blx	r3
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	6123      	str	r3, [r4, #16]
 8008d6a:	e6ec      	b.n	8008b46 <_scanf_float+0x7e>
 8008d6c:	1e6b      	subs	r3, r5, #1
 8008d6e:	2b06      	cmp	r3, #6
 8008d70:	d825      	bhi.n	8008dbe <_scanf_float+0x2f6>
 8008d72:	2d02      	cmp	r5, #2
 8008d74:	d836      	bhi.n	8008de4 <_scanf_float+0x31c>
 8008d76:	455e      	cmp	r6, fp
 8008d78:	f67f aee8 	bls.w	8008b4c <_scanf_float+0x84>
 8008d7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d80:	463a      	mov	r2, r7
 8008d82:	4640      	mov	r0, r8
 8008d84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d88:	4798      	blx	r3
 8008d8a:	6923      	ldr	r3, [r4, #16]
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	e7f1      	b.n	8008d76 <_scanf_float+0x2ae>
 8008d92:	9802      	ldr	r0, [sp, #8]
 8008d94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008d9c:	463a      	mov	r2, r7
 8008d9e:	9002      	str	r0, [sp, #8]
 8008da0:	4640      	mov	r0, r8
 8008da2:	4798      	blx	r3
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dae:	fa5f fa8a 	uxtb.w	sl, sl
 8008db2:	f1ba 0f02 	cmp.w	sl, #2
 8008db6:	d1ec      	bne.n	8008d92 <_scanf_float+0x2ca>
 8008db8:	3d03      	subs	r5, #3
 8008dba:	b2ed      	uxtb	r5, r5
 8008dbc:	1b76      	subs	r6, r6, r5
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	05da      	lsls	r2, r3, #23
 8008dc2:	d52f      	bpl.n	8008e24 <_scanf_float+0x35c>
 8008dc4:	055b      	lsls	r3, r3, #21
 8008dc6:	d510      	bpl.n	8008dea <_scanf_float+0x322>
 8008dc8:	455e      	cmp	r6, fp
 8008dca:	f67f aebf 	bls.w	8008b4c <_scanf_float+0x84>
 8008dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dd2:	463a      	mov	r2, r7
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dda:	4798      	blx	r3
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	e7f1      	b.n	8008dc8 <_scanf_float+0x300>
 8008de4:	46aa      	mov	sl, r5
 8008de6:	9602      	str	r6, [sp, #8]
 8008de8:	e7df      	b.n	8008daa <_scanf_float+0x2e2>
 8008dea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	2965      	cmp	r1, #101	; 0x65
 8008df2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008df6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	d00c      	beq.n	8008e18 <_scanf_float+0x350>
 8008dfe:	2945      	cmp	r1, #69	; 0x45
 8008e00:	d00a      	beq.n	8008e18 <_scanf_float+0x350>
 8008e02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e06:	463a      	mov	r2, r7
 8008e08:	4640      	mov	r0, r8
 8008e0a:	4798      	blx	r3
 8008e0c:	6923      	ldr	r3, [r4, #16]
 8008e0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e12:	3b01      	subs	r3, #1
 8008e14:	1eb5      	subs	r5, r6, #2
 8008e16:	6123      	str	r3, [r4, #16]
 8008e18:	463a      	mov	r2, r7
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e20:	4798      	blx	r3
 8008e22:	462e      	mov	r6, r5
 8008e24:	6825      	ldr	r5, [r4, #0]
 8008e26:	f015 0510 	ands.w	r5, r5, #16
 8008e2a:	d155      	bne.n	8008ed8 <_scanf_float+0x410>
 8008e2c:	7035      	strb	r5, [r6, #0]
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e38:	d11b      	bne.n	8008e72 <_scanf_float+0x3aa>
 8008e3a:	9b01      	ldr	r3, [sp, #4]
 8008e3c:	454b      	cmp	r3, r9
 8008e3e:	eba3 0209 	sub.w	r2, r3, r9
 8008e42:	d123      	bne.n	8008e8c <_scanf_float+0x3c4>
 8008e44:	2200      	movs	r2, #0
 8008e46:	4659      	mov	r1, fp
 8008e48:	4640      	mov	r0, r8
 8008e4a:	f000 fe79 	bl	8009b40 <_strtod_r>
 8008e4e:	6822      	ldr	r2, [r4, #0]
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	f012 0f02 	tst.w	r2, #2
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	d021      	beq.n	8008ea2 <_scanf_float+0x3da>
 8008e5e:	1d1a      	adds	r2, r3, #4
 8008e60:	9903      	ldr	r1, [sp, #12]
 8008e62:	600a      	str	r2, [r1, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	e9c3 6700 	strd	r6, r7, [r3]
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	60e3      	str	r3, [r4, #12]
 8008e70:	e66d      	b.n	8008b4e <_scanf_float+0x86>
 8008e72:	9b04      	ldr	r3, [sp, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d0e5      	beq.n	8008e44 <_scanf_float+0x37c>
 8008e78:	9905      	ldr	r1, [sp, #20]
 8008e7a:	230a      	movs	r3, #10
 8008e7c:	462a      	mov	r2, r5
 8008e7e:	4640      	mov	r0, r8
 8008e80:	3101      	adds	r1, #1
 8008e82:	f000 fedf 	bl	8009c44 <_strtol_r>
 8008e86:	9b04      	ldr	r3, [sp, #16]
 8008e88:	9e05      	ldr	r6, [sp, #20]
 8008e8a:	1ac2      	subs	r2, r0, r3
 8008e8c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008e90:	429e      	cmp	r6, r3
 8008e92:	bf28      	it	cs
 8008e94:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008e98:	4630      	mov	r0, r6
 8008e9a:	4910      	ldr	r1, [pc, #64]	; (8008edc <_scanf_float+0x414>)
 8008e9c:	f000 f826 	bl	8008eec <siprintf>
 8008ea0:	e7d0      	b.n	8008e44 <_scanf_float+0x37c>
 8008ea2:	f012 0f04 	tst.w	r2, #4
 8008ea6:	f103 0204 	add.w	r2, r3, #4
 8008eaa:	d1d9      	bne.n	8008e60 <_scanf_float+0x398>
 8008eac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008eb0:	f8cc 2000 	str.w	r2, [ip]
 8008eb4:	f8d3 8000 	ldr.w	r8, [r3]
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	f7f7 fda6 	bl	8000a0c <__aeabi_dcmpun>
 8008ec0:	b128      	cbz	r0, 8008ece <_scanf_float+0x406>
 8008ec2:	4807      	ldr	r0, [pc, #28]	; (8008ee0 <_scanf_float+0x418>)
 8008ec4:	f000 f80e 	bl	8008ee4 <nanf>
 8008ec8:	f8c8 0000 	str.w	r0, [r8]
 8008ecc:	e7cd      	b.n	8008e6a <_scanf_float+0x3a2>
 8008ece:	4630      	mov	r0, r6
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	f7f7 fdf9 	bl	8000ac8 <__aeabi_d2f>
 8008ed6:	e7f7      	b.n	8008ec8 <_scanf_float+0x400>
 8008ed8:	2500      	movs	r5, #0
 8008eda:	e638      	b.n	8008b4e <_scanf_float+0x86>
 8008edc:	0800cb80 	.word	0x0800cb80
 8008ee0:	0800cf88 	.word	0x0800cf88

08008ee4 <nanf>:
 8008ee4:	4800      	ldr	r0, [pc, #0]	; (8008ee8 <nanf+0x4>)
 8008ee6:	4770      	bx	lr
 8008ee8:	7fc00000 	.word	0x7fc00000

08008eec <siprintf>:
 8008eec:	b40e      	push	{r1, r2, r3}
 8008eee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ef2:	b500      	push	{lr}
 8008ef4:	b09c      	sub	sp, #112	; 0x70
 8008ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ef8:	9002      	str	r0, [sp, #8]
 8008efa:	9006      	str	r0, [sp, #24]
 8008efc:	9107      	str	r1, [sp, #28]
 8008efe:	9104      	str	r1, [sp, #16]
 8008f00:	4808      	ldr	r0, [pc, #32]	; (8008f24 <siprintf+0x38>)
 8008f02:	4909      	ldr	r1, [pc, #36]	; (8008f28 <siprintf+0x3c>)
 8008f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f08:	9105      	str	r1, [sp, #20]
 8008f0a:	6800      	ldr	r0, [r0, #0]
 8008f0c:	a902      	add	r1, sp, #8
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	f002 feb8 	bl	800bc84 <_svfiprintf_r>
 8008f14:	2200      	movs	r2, #0
 8008f16:	9b02      	ldr	r3, [sp, #8]
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	b01c      	add	sp, #112	; 0x70
 8008f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f20:	b003      	add	sp, #12
 8008f22:	4770      	bx	lr
 8008f24:	20000024 	.word	0x20000024
 8008f28:	ffff0208 	.word	0xffff0208

08008f2c <sulp>:
 8008f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f30:	460f      	mov	r7, r1
 8008f32:	4690      	mov	r8, r2
 8008f34:	f002 fc12 	bl	800b75c <__ulp>
 8008f38:	4604      	mov	r4, r0
 8008f3a:	460d      	mov	r5, r1
 8008f3c:	f1b8 0f00 	cmp.w	r8, #0
 8008f40:	d011      	beq.n	8008f66 <sulp+0x3a>
 8008f42:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008f46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	dd0b      	ble.n	8008f66 <sulp+0x3a>
 8008f4e:	2400      	movs	r4, #0
 8008f50:	051b      	lsls	r3, r3, #20
 8008f52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	f7f7 fabb 	bl	80004d8 <__aeabi_dmul>
 8008f62:	4604      	mov	r4, r0
 8008f64:	460d      	mov	r5, r1
 8008f66:	4620      	mov	r0, r4
 8008f68:	4629      	mov	r1, r5
 8008f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008f70 <_strtod_l>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	469b      	mov	fp, r3
 8008f76:	2300      	movs	r3, #0
 8008f78:	b09f      	sub	sp, #124	; 0x7c
 8008f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f7c:	4b9e      	ldr	r3, [pc, #632]	; (80091f8 <_strtod_l+0x288>)
 8008f7e:	4682      	mov	sl, r0
 8008f80:	681f      	ldr	r7, [r3, #0]
 8008f82:	460e      	mov	r6, r1
 8008f84:	4638      	mov	r0, r7
 8008f86:	9215      	str	r2, [sp, #84]	; 0x54
 8008f88:	f7f7 f8e2 	bl	8000150 <strlen>
 8008f8c:	f04f 0800 	mov.w	r8, #0
 8008f90:	4604      	mov	r4, r0
 8008f92:	f04f 0900 	mov.w	r9, #0
 8008f96:	9619      	str	r6, [sp, #100]	; 0x64
 8008f98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f9a:	781a      	ldrb	r2, [r3, #0]
 8008f9c:	2a2b      	cmp	r2, #43	; 0x2b
 8008f9e:	d04c      	beq.n	800903a <_strtod_l+0xca>
 8008fa0:	d83a      	bhi.n	8009018 <_strtod_l+0xa8>
 8008fa2:	2a0d      	cmp	r2, #13
 8008fa4:	d833      	bhi.n	800900e <_strtod_l+0x9e>
 8008fa6:	2a08      	cmp	r2, #8
 8008fa8:	d833      	bhi.n	8009012 <_strtod_l+0xa2>
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	d03d      	beq.n	800902a <_strtod_l+0xba>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	930a      	str	r3, [sp, #40]	; 0x28
 8008fb2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008fb4:	782b      	ldrb	r3, [r5, #0]
 8008fb6:	2b30      	cmp	r3, #48	; 0x30
 8008fb8:	f040 80aa 	bne.w	8009110 <_strtod_l+0x1a0>
 8008fbc:	786b      	ldrb	r3, [r5, #1]
 8008fbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008fc2:	2b58      	cmp	r3, #88	; 0x58
 8008fc4:	d166      	bne.n	8009094 <_strtod_l+0x124>
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc8:	4650      	mov	r0, sl
 8008fca:	9301      	str	r3, [sp, #4]
 8008fcc:	ab1a      	add	r3, sp, #104	; 0x68
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	4a8a      	ldr	r2, [pc, #552]	; (80091fc <_strtod_l+0x28c>)
 8008fd2:	f8cd b008 	str.w	fp, [sp, #8]
 8008fd6:	ab1b      	add	r3, sp, #108	; 0x6c
 8008fd8:	a919      	add	r1, sp, #100	; 0x64
 8008fda:	f001 fd17 	bl	800aa0c <__gethex>
 8008fde:	f010 0607 	ands.w	r6, r0, #7
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	d005      	beq.n	8008ff2 <_strtod_l+0x82>
 8008fe6:	2e06      	cmp	r6, #6
 8008fe8:	d129      	bne.n	800903e <_strtod_l+0xce>
 8008fea:	2300      	movs	r3, #0
 8008fec:	3501      	adds	r5, #1
 8008fee:	9519      	str	r5, [sp, #100]	; 0x64
 8008ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f040 858a 	bne.w	8009b0e <_strtod_l+0xb9e>
 8008ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ffc:	b1d3      	cbz	r3, 8009034 <_strtod_l+0xc4>
 8008ffe:	4642      	mov	r2, r8
 8009000:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009004:	4610      	mov	r0, r2
 8009006:	4619      	mov	r1, r3
 8009008:	b01f      	add	sp, #124	; 0x7c
 800900a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900e:	2a20      	cmp	r2, #32
 8009010:	d1cd      	bne.n	8008fae <_strtod_l+0x3e>
 8009012:	3301      	adds	r3, #1
 8009014:	9319      	str	r3, [sp, #100]	; 0x64
 8009016:	e7bf      	b.n	8008f98 <_strtod_l+0x28>
 8009018:	2a2d      	cmp	r2, #45	; 0x2d
 800901a:	d1c8      	bne.n	8008fae <_strtod_l+0x3e>
 800901c:	2201      	movs	r2, #1
 800901e:	920a      	str	r2, [sp, #40]	; 0x28
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	9219      	str	r2, [sp, #100]	; 0x64
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1c3      	bne.n	8008fb2 <_strtod_l+0x42>
 800902a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800902c:	9619      	str	r6, [sp, #100]	; 0x64
 800902e:	2b00      	cmp	r3, #0
 8009030:	f040 856b 	bne.w	8009b0a <_strtod_l+0xb9a>
 8009034:	4642      	mov	r2, r8
 8009036:	464b      	mov	r3, r9
 8009038:	e7e4      	b.n	8009004 <_strtod_l+0x94>
 800903a:	2200      	movs	r2, #0
 800903c:	e7ef      	b.n	800901e <_strtod_l+0xae>
 800903e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009040:	b13a      	cbz	r2, 8009052 <_strtod_l+0xe2>
 8009042:	2135      	movs	r1, #53	; 0x35
 8009044:	a81c      	add	r0, sp, #112	; 0x70
 8009046:	f002 fc8d 	bl	800b964 <__copybits>
 800904a:	4650      	mov	r0, sl
 800904c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800904e:	f002 f855 	bl	800b0fc <_Bfree>
 8009052:	3e01      	subs	r6, #1
 8009054:	2e04      	cmp	r6, #4
 8009056:	d806      	bhi.n	8009066 <_strtod_l+0xf6>
 8009058:	e8df f006 	tbb	[pc, r6]
 800905c:	1714030a 	.word	0x1714030a
 8009060:	0a          	.byte	0x0a
 8009061:	00          	.byte	0x00
 8009062:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009066:	0721      	lsls	r1, r4, #28
 8009068:	d5c3      	bpl.n	8008ff2 <_strtod_l+0x82>
 800906a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800906e:	e7c0      	b.n	8008ff2 <_strtod_l+0x82>
 8009070:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009072:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009076:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800907a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800907e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009082:	e7f0      	b.n	8009066 <_strtod_l+0xf6>
 8009084:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009200 <_strtod_l+0x290>
 8009088:	e7ed      	b.n	8009066 <_strtod_l+0xf6>
 800908a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800908e:	f04f 38ff 	mov.w	r8, #4294967295
 8009092:	e7e8      	b.n	8009066 <_strtod_l+0xf6>
 8009094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	9219      	str	r2, [sp, #100]	; 0x64
 800909a:	785b      	ldrb	r3, [r3, #1]
 800909c:	2b30      	cmp	r3, #48	; 0x30
 800909e:	d0f9      	beq.n	8009094 <_strtod_l+0x124>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0a6      	beq.n	8008ff2 <_strtod_l+0x82>
 80090a4:	2301      	movs	r3, #1
 80090a6:	9307      	str	r3, [sp, #28]
 80090a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090aa:	220a      	movs	r2, #10
 80090ac:	9308      	str	r3, [sp, #32]
 80090ae:	2300      	movs	r3, #0
 80090b0:	469b      	mov	fp, r3
 80090b2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80090b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80090b8:	7805      	ldrb	r5, [r0, #0]
 80090ba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80090be:	b2d9      	uxtb	r1, r3
 80090c0:	2909      	cmp	r1, #9
 80090c2:	d927      	bls.n	8009114 <_strtod_l+0x1a4>
 80090c4:	4622      	mov	r2, r4
 80090c6:	4639      	mov	r1, r7
 80090c8:	f002 fef2 	bl	800beb0 <strncmp>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d033      	beq.n	8009138 <_strtod_l+0x1c8>
 80090d0:	2000      	movs	r0, #0
 80090d2:	462a      	mov	r2, r5
 80090d4:	465c      	mov	r4, fp
 80090d6:	4603      	mov	r3, r0
 80090d8:	9004      	str	r0, [sp, #16]
 80090da:	2a65      	cmp	r2, #101	; 0x65
 80090dc:	d001      	beq.n	80090e2 <_strtod_l+0x172>
 80090de:	2a45      	cmp	r2, #69	; 0x45
 80090e0:	d114      	bne.n	800910c <_strtod_l+0x19c>
 80090e2:	b91c      	cbnz	r4, 80090ec <_strtod_l+0x17c>
 80090e4:	9a07      	ldr	r2, [sp, #28]
 80090e6:	4302      	orrs	r2, r0
 80090e8:	d09f      	beq.n	800902a <_strtod_l+0xba>
 80090ea:	2400      	movs	r4, #0
 80090ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80090ee:	1c72      	adds	r2, r6, #1
 80090f0:	9219      	str	r2, [sp, #100]	; 0x64
 80090f2:	7872      	ldrb	r2, [r6, #1]
 80090f4:	2a2b      	cmp	r2, #43	; 0x2b
 80090f6:	d079      	beq.n	80091ec <_strtod_l+0x27c>
 80090f8:	2a2d      	cmp	r2, #45	; 0x2d
 80090fa:	f000 8083 	beq.w	8009204 <_strtod_l+0x294>
 80090fe:	2700      	movs	r7, #0
 8009100:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009104:	2909      	cmp	r1, #9
 8009106:	f240 8083 	bls.w	8009210 <_strtod_l+0x2a0>
 800910a:	9619      	str	r6, [sp, #100]	; 0x64
 800910c:	2500      	movs	r5, #0
 800910e:	e09f      	b.n	8009250 <_strtod_l+0x2e0>
 8009110:	2300      	movs	r3, #0
 8009112:	e7c8      	b.n	80090a6 <_strtod_l+0x136>
 8009114:	f1bb 0f08 	cmp.w	fp, #8
 8009118:	bfd5      	itete	le
 800911a:	9906      	ldrle	r1, [sp, #24]
 800911c:	9905      	ldrgt	r1, [sp, #20]
 800911e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009122:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009126:	f100 0001 	add.w	r0, r0, #1
 800912a:	bfd4      	ite	le
 800912c:	9306      	strle	r3, [sp, #24]
 800912e:	9305      	strgt	r3, [sp, #20]
 8009130:	f10b 0b01 	add.w	fp, fp, #1
 8009134:	9019      	str	r0, [sp, #100]	; 0x64
 8009136:	e7be      	b.n	80090b6 <_strtod_l+0x146>
 8009138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800913a:	191a      	adds	r2, r3, r4
 800913c:	9219      	str	r2, [sp, #100]	; 0x64
 800913e:	5d1a      	ldrb	r2, [r3, r4]
 8009140:	f1bb 0f00 	cmp.w	fp, #0
 8009144:	d036      	beq.n	80091b4 <_strtod_l+0x244>
 8009146:	465c      	mov	r4, fp
 8009148:	9004      	str	r0, [sp, #16]
 800914a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800914e:	2b09      	cmp	r3, #9
 8009150:	d912      	bls.n	8009178 <_strtod_l+0x208>
 8009152:	2301      	movs	r3, #1
 8009154:	e7c1      	b.n	80090da <_strtod_l+0x16a>
 8009156:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009158:	3001      	adds	r0, #1
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	9219      	str	r2, [sp, #100]	; 0x64
 800915e:	785a      	ldrb	r2, [r3, #1]
 8009160:	2a30      	cmp	r2, #48	; 0x30
 8009162:	d0f8      	beq.n	8009156 <_strtod_l+0x1e6>
 8009164:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009168:	2b08      	cmp	r3, #8
 800916a:	f200 84d5 	bhi.w	8009b18 <_strtod_l+0xba8>
 800916e:	9004      	str	r0, [sp, #16]
 8009170:	2000      	movs	r0, #0
 8009172:	4604      	mov	r4, r0
 8009174:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009176:	9308      	str	r3, [sp, #32]
 8009178:	3a30      	subs	r2, #48	; 0x30
 800917a:	f100 0301 	add.w	r3, r0, #1
 800917e:	d013      	beq.n	80091a8 <_strtod_l+0x238>
 8009180:	9904      	ldr	r1, [sp, #16]
 8009182:	1905      	adds	r5, r0, r4
 8009184:	4419      	add	r1, r3
 8009186:	9104      	str	r1, [sp, #16]
 8009188:	4623      	mov	r3, r4
 800918a:	210a      	movs	r1, #10
 800918c:	42ab      	cmp	r3, r5
 800918e:	d113      	bne.n	80091b8 <_strtod_l+0x248>
 8009190:	1823      	adds	r3, r4, r0
 8009192:	2b08      	cmp	r3, #8
 8009194:	f104 0401 	add.w	r4, r4, #1
 8009198:	4404      	add	r4, r0
 800919a:	dc1b      	bgt.n	80091d4 <_strtod_l+0x264>
 800919c:	230a      	movs	r3, #10
 800919e:	9906      	ldr	r1, [sp, #24]
 80091a0:	fb03 2301 	mla	r3, r3, r1, r2
 80091a4:	9306      	str	r3, [sp, #24]
 80091a6:	2300      	movs	r3, #0
 80091a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80091aa:	4618      	mov	r0, r3
 80091ac:	1c51      	adds	r1, r2, #1
 80091ae:	9119      	str	r1, [sp, #100]	; 0x64
 80091b0:	7852      	ldrb	r2, [r2, #1]
 80091b2:	e7ca      	b.n	800914a <_strtod_l+0x1da>
 80091b4:	4658      	mov	r0, fp
 80091b6:	e7d3      	b.n	8009160 <_strtod_l+0x1f0>
 80091b8:	2b08      	cmp	r3, #8
 80091ba:	dc04      	bgt.n	80091c6 <_strtod_l+0x256>
 80091bc:	9f06      	ldr	r7, [sp, #24]
 80091be:	434f      	muls	r7, r1
 80091c0:	9706      	str	r7, [sp, #24]
 80091c2:	3301      	adds	r3, #1
 80091c4:	e7e2      	b.n	800918c <_strtod_l+0x21c>
 80091c6:	1c5f      	adds	r7, r3, #1
 80091c8:	2f10      	cmp	r7, #16
 80091ca:	bfde      	ittt	le
 80091cc:	9f05      	ldrle	r7, [sp, #20]
 80091ce:	434f      	mulle	r7, r1
 80091d0:	9705      	strle	r7, [sp, #20]
 80091d2:	e7f6      	b.n	80091c2 <_strtod_l+0x252>
 80091d4:	2c10      	cmp	r4, #16
 80091d6:	bfdf      	itttt	le
 80091d8:	230a      	movle	r3, #10
 80091da:	9905      	ldrle	r1, [sp, #20]
 80091dc:	fb03 2301 	mlale	r3, r3, r1, r2
 80091e0:	9305      	strle	r3, [sp, #20]
 80091e2:	e7e0      	b.n	80091a6 <_strtod_l+0x236>
 80091e4:	2300      	movs	r3, #0
 80091e6:	9304      	str	r3, [sp, #16]
 80091e8:	2301      	movs	r3, #1
 80091ea:	e77b      	b.n	80090e4 <_strtod_l+0x174>
 80091ec:	2700      	movs	r7, #0
 80091ee:	1cb2      	adds	r2, r6, #2
 80091f0:	9219      	str	r2, [sp, #100]	; 0x64
 80091f2:	78b2      	ldrb	r2, [r6, #2]
 80091f4:	e784      	b.n	8009100 <_strtod_l+0x190>
 80091f6:	bf00      	nop
 80091f8:	0800cdd0 	.word	0x0800cdd0
 80091fc:	0800cb88 	.word	0x0800cb88
 8009200:	7ff00000 	.word	0x7ff00000
 8009204:	2701      	movs	r7, #1
 8009206:	e7f2      	b.n	80091ee <_strtod_l+0x27e>
 8009208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800920a:	1c51      	adds	r1, r2, #1
 800920c:	9119      	str	r1, [sp, #100]	; 0x64
 800920e:	7852      	ldrb	r2, [r2, #1]
 8009210:	2a30      	cmp	r2, #48	; 0x30
 8009212:	d0f9      	beq.n	8009208 <_strtod_l+0x298>
 8009214:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009218:	2908      	cmp	r1, #8
 800921a:	f63f af77 	bhi.w	800910c <_strtod_l+0x19c>
 800921e:	f04f 0e0a 	mov.w	lr, #10
 8009222:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009226:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009228:	9209      	str	r2, [sp, #36]	; 0x24
 800922a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800922c:	1c51      	adds	r1, r2, #1
 800922e:	9119      	str	r1, [sp, #100]	; 0x64
 8009230:	7852      	ldrb	r2, [r2, #1]
 8009232:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009236:	2d09      	cmp	r5, #9
 8009238:	d935      	bls.n	80092a6 <_strtod_l+0x336>
 800923a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800923c:	1b49      	subs	r1, r1, r5
 800923e:	2908      	cmp	r1, #8
 8009240:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009244:	dc02      	bgt.n	800924c <_strtod_l+0x2dc>
 8009246:	4565      	cmp	r5, ip
 8009248:	bfa8      	it	ge
 800924a:	4665      	movge	r5, ip
 800924c:	b107      	cbz	r7, 8009250 <_strtod_l+0x2e0>
 800924e:	426d      	negs	r5, r5
 8009250:	2c00      	cmp	r4, #0
 8009252:	d14c      	bne.n	80092ee <_strtod_l+0x37e>
 8009254:	9907      	ldr	r1, [sp, #28]
 8009256:	4301      	orrs	r1, r0
 8009258:	f47f aecb 	bne.w	8008ff2 <_strtod_l+0x82>
 800925c:	2b00      	cmp	r3, #0
 800925e:	f47f aee4 	bne.w	800902a <_strtod_l+0xba>
 8009262:	2a69      	cmp	r2, #105	; 0x69
 8009264:	d026      	beq.n	80092b4 <_strtod_l+0x344>
 8009266:	dc23      	bgt.n	80092b0 <_strtod_l+0x340>
 8009268:	2a49      	cmp	r2, #73	; 0x49
 800926a:	d023      	beq.n	80092b4 <_strtod_l+0x344>
 800926c:	2a4e      	cmp	r2, #78	; 0x4e
 800926e:	f47f aedc 	bne.w	800902a <_strtod_l+0xba>
 8009272:	499d      	ldr	r1, [pc, #628]	; (80094e8 <_strtod_l+0x578>)
 8009274:	a819      	add	r0, sp, #100	; 0x64
 8009276:	f001 fe17 	bl	800aea8 <__match>
 800927a:	2800      	cmp	r0, #0
 800927c:	f43f aed5 	beq.w	800902a <_strtod_l+0xba>
 8009280:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b28      	cmp	r3, #40	; 0x28
 8009286:	d12c      	bne.n	80092e2 <_strtod_l+0x372>
 8009288:	4998      	ldr	r1, [pc, #608]	; (80094ec <_strtod_l+0x57c>)
 800928a:	aa1c      	add	r2, sp, #112	; 0x70
 800928c:	a819      	add	r0, sp, #100	; 0x64
 800928e:	f001 fe1f 	bl	800aed0 <__hexnan>
 8009292:	2805      	cmp	r0, #5
 8009294:	d125      	bne.n	80092e2 <_strtod_l+0x372>
 8009296:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009298:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800929c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80092a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80092a4:	e6a5      	b.n	8008ff2 <_strtod_l+0x82>
 80092a6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80092aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80092ae:	e7bc      	b.n	800922a <_strtod_l+0x2ba>
 80092b0:	2a6e      	cmp	r2, #110	; 0x6e
 80092b2:	e7dc      	b.n	800926e <_strtod_l+0x2fe>
 80092b4:	498e      	ldr	r1, [pc, #568]	; (80094f0 <_strtod_l+0x580>)
 80092b6:	a819      	add	r0, sp, #100	; 0x64
 80092b8:	f001 fdf6 	bl	800aea8 <__match>
 80092bc:	2800      	cmp	r0, #0
 80092be:	f43f aeb4 	beq.w	800902a <_strtod_l+0xba>
 80092c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092c4:	498b      	ldr	r1, [pc, #556]	; (80094f4 <_strtod_l+0x584>)
 80092c6:	3b01      	subs	r3, #1
 80092c8:	a819      	add	r0, sp, #100	; 0x64
 80092ca:	9319      	str	r3, [sp, #100]	; 0x64
 80092cc:	f001 fdec 	bl	800aea8 <__match>
 80092d0:	b910      	cbnz	r0, 80092d8 <_strtod_l+0x368>
 80092d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092d4:	3301      	adds	r3, #1
 80092d6:	9319      	str	r3, [sp, #100]	; 0x64
 80092d8:	f04f 0800 	mov.w	r8, #0
 80092dc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80094f8 <_strtod_l+0x588>
 80092e0:	e687      	b.n	8008ff2 <_strtod_l+0x82>
 80092e2:	4886      	ldr	r0, [pc, #536]	; (80094fc <_strtod_l+0x58c>)
 80092e4:	f002 fdce 	bl	800be84 <nan>
 80092e8:	4680      	mov	r8, r0
 80092ea:	4689      	mov	r9, r1
 80092ec:	e681      	b.n	8008ff2 <_strtod_l+0x82>
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	f1bb 0f00 	cmp.w	fp, #0
 80092f4:	bf08      	it	eq
 80092f6:	46a3      	moveq	fp, r4
 80092f8:	1aeb      	subs	r3, r5, r3
 80092fa:	2c10      	cmp	r4, #16
 80092fc:	9806      	ldr	r0, [sp, #24]
 80092fe:	4626      	mov	r6, r4
 8009300:	9307      	str	r3, [sp, #28]
 8009302:	bfa8      	it	ge
 8009304:	2610      	movge	r6, #16
 8009306:	f7f7 f86d 	bl	80003e4 <__aeabi_ui2d>
 800930a:	2c09      	cmp	r4, #9
 800930c:	4680      	mov	r8, r0
 800930e:	4689      	mov	r9, r1
 8009310:	dd13      	ble.n	800933a <_strtod_l+0x3ca>
 8009312:	4b7b      	ldr	r3, [pc, #492]	; (8009500 <_strtod_l+0x590>)
 8009314:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009318:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800931c:	f7f7 f8dc 	bl	80004d8 <__aeabi_dmul>
 8009320:	4680      	mov	r8, r0
 8009322:	9805      	ldr	r0, [sp, #20]
 8009324:	4689      	mov	r9, r1
 8009326:	f7f7 f85d 	bl	80003e4 <__aeabi_ui2d>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4640      	mov	r0, r8
 8009330:	4649      	mov	r1, r9
 8009332:	f7f6 ff1b 	bl	800016c <__adddf3>
 8009336:	4680      	mov	r8, r0
 8009338:	4689      	mov	r9, r1
 800933a:	2c0f      	cmp	r4, #15
 800933c:	dc36      	bgt.n	80093ac <_strtod_l+0x43c>
 800933e:	9b07      	ldr	r3, [sp, #28]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f43f ae56 	beq.w	8008ff2 <_strtod_l+0x82>
 8009346:	dd22      	ble.n	800938e <_strtod_l+0x41e>
 8009348:	2b16      	cmp	r3, #22
 800934a:	dc09      	bgt.n	8009360 <_strtod_l+0x3f0>
 800934c:	496c      	ldr	r1, [pc, #432]	; (8009500 <_strtod_l+0x590>)
 800934e:	4642      	mov	r2, r8
 8009350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009354:	464b      	mov	r3, r9
 8009356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800935a:	f7f7 f8bd 	bl	80004d8 <__aeabi_dmul>
 800935e:	e7c3      	b.n	80092e8 <_strtod_l+0x378>
 8009360:	9a07      	ldr	r2, [sp, #28]
 8009362:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009366:	4293      	cmp	r3, r2
 8009368:	db20      	blt.n	80093ac <_strtod_l+0x43c>
 800936a:	4d65      	ldr	r5, [pc, #404]	; (8009500 <_strtod_l+0x590>)
 800936c:	f1c4 040f 	rsb	r4, r4, #15
 8009370:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009374:	4642      	mov	r2, r8
 8009376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800937a:	464b      	mov	r3, r9
 800937c:	f7f7 f8ac 	bl	80004d8 <__aeabi_dmul>
 8009380:	9b07      	ldr	r3, [sp, #28]
 8009382:	1b1c      	subs	r4, r3, r4
 8009384:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009388:	e9d5 2300 	ldrd	r2, r3, [r5]
 800938c:	e7e5      	b.n	800935a <_strtod_l+0x3ea>
 800938e:	9b07      	ldr	r3, [sp, #28]
 8009390:	3316      	adds	r3, #22
 8009392:	db0b      	blt.n	80093ac <_strtod_l+0x43c>
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	4640      	mov	r0, r8
 8009398:	1b5d      	subs	r5, r3, r5
 800939a:	4b59      	ldr	r3, [pc, #356]	; (8009500 <_strtod_l+0x590>)
 800939c:	4649      	mov	r1, r9
 800939e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80093a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093a6:	f7f7 f9c1 	bl	800072c <__aeabi_ddiv>
 80093aa:	e79d      	b.n	80092e8 <_strtod_l+0x378>
 80093ac:	9b07      	ldr	r3, [sp, #28]
 80093ae:	1ba6      	subs	r6, r4, r6
 80093b0:	441e      	add	r6, r3
 80093b2:	2e00      	cmp	r6, #0
 80093b4:	dd74      	ble.n	80094a0 <_strtod_l+0x530>
 80093b6:	f016 030f 	ands.w	r3, r6, #15
 80093ba:	d00a      	beq.n	80093d2 <_strtod_l+0x462>
 80093bc:	4950      	ldr	r1, [pc, #320]	; (8009500 <_strtod_l+0x590>)
 80093be:	4642      	mov	r2, r8
 80093c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093c8:	464b      	mov	r3, r9
 80093ca:	f7f7 f885 	bl	80004d8 <__aeabi_dmul>
 80093ce:	4680      	mov	r8, r0
 80093d0:	4689      	mov	r9, r1
 80093d2:	f036 060f 	bics.w	r6, r6, #15
 80093d6:	d052      	beq.n	800947e <_strtod_l+0x50e>
 80093d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80093dc:	dd27      	ble.n	800942e <_strtod_l+0x4be>
 80093de:	f04f 0b00 	mov.w	fp, #0
 80093e2:	f8cd b010 	str.w	fp, [sp, #16]
 80093e6:	f8cd b020 	str.w	fp, [sp, #32]
 80093ea:	f8cd b018 	str.w	fp, [sp, #24]
 80093ee:	2322      	movs	r3, #34	; 0x22
 80093f0:	f04f 0800 	mov.w	r8, #0
 80093f4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80094f8 <_strtod_l+0x588>
 80093f8:	f8ca 3000 	str.w	r3, [sl]
 80093fc:	9b08      	ldr	r3, [sp, #32]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f43f adf7 	beq.w	8008ff2 <_strtod_l+0x82>
 8009404:	4650      	mov	r0, sl
 8009406:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009408:	f001 fe78 	bl	800b0fc <_Bfree>
 800940c:	4650      	mov	r0, sl
 800940e:	9906      	ldr	r1, [sp, #24]
 8009410:	f001 fe74 	bl	800b0fc <_Bfree>
 8009414:	4650      	mov	r0, sl
 8009416:	9904      	ldr	r1, [sp, #16]
 8009418:	f001 fe70 	bl	800b0fc <_Bfree>
 800941c:	4650      	mov	r0, sl
 800941e:	9908      	ldr	r1, [sp, #32]
 8009420:	f001 fe6c 	bl	800b0fc <_Bfree>
 8009424:	4659      	mov	r1, fp
 8009426:	4650      	mov	r0, sl
 8009428:	f001 fe68 	bl	800b0fc <_Bfree>
 800942c:	e5e1      	b.n	8008ff2 <_strtod_l+0x82>
 800942e:	4b35      	ldr	r3, [pc, #212]	; (8009504 <_strtod_l+0x594>)
 8009430:	4640      	mov	r0, r8
 8009432:	9305      	str	r3, [sp, #20]
 8009434:	2300      	movs	r3, #0
 8009436:	4649      	mov	r1, r9
 8009438:	461f      	mov	r7, r3
 800943a:	1136      	asrs	r6, r6, #4
 800943c:	2e01      	cmp	r6, #1
 800943e:	dc21      	bgt.n	8009484 <_strtod_l+0x514>
 8009440:	b10b      	cbz	r3, 8009446 <_strtod_l+0x4d6>
 8009442:	4680      	mov	r8, r0
 8009444:	4689      	mov	r9, r1
 8009446:	4b2f      	ldr	r3, [pc, #188]	; (8009504 <_strtod_l+0x594>)
 8009448:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800944c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009450:	4642      	mov	r2, r8
 8009452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009456:	464b      	mov	r3, r9
 8009458:	f7f7 f83e 	bl	80004d8 <__aeabi_dmul>
 800945c:	4b26      	ldr	r3, [pc, #152]	; (80094f8 <_strtod_l+0x588>)
 800945e:	460a      	mov	r2, r1
 8009460:	400b      	ands	r3, r1
 8009462:	4929      	ldr	r1, [pc, #164]	; (8009508 <_strtod_l+0x598>)
 8009464:	4680      	mov	r8, r0
 8009466:	428b      	cmp	r3, r1
 8009468:	d8b9      	bhi.n	80093de <_strtod_l+0x46e>
 800946a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800946e:	428b      	cmp	r3, r1
 8009470:	bf86      	itte	hi
 8009472:	f04f 38ff 	movhi.w	r8, #4294967295
 8009476:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800950c <_strtod_l+0x59c>
 800947a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800947e:	2300      	movs	r3, #0
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	e07f      	b.n	8009584 <_strtod_l+0x614>
 8009484:	07f2      	lsls	r2, r6, #31
 8009486:	d505      	bpl.n	8009494 <_strtod_l+0x524>
 8009488:	9b05      	ldr	r3, [sp, #20]
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f7f7 f823 	bl	80004d8 <__aeabi_dmul>
 8009492:	2301      	movs	r3, #1
 8009494:	9a05      	ldr	r2, [sp, #20]
 8009496:	3701      	adds	r7, #1
 8009498:	3208      	adds	r2, #8
 800949a:	1076      	asrs	r6, r6, #1
 800949c:	9205      	str	r2, [sp, #20]
 800949e:	e7cd      	b.n	800943c <_strtod_l+0x4cc>
 80094a0:	d0ed      	beq.n	800947e <_strtod_l+0x50e>
 80094a2:	4276      	negs	r6, r6
 80094a4:	f016 020f 	ands.w	r2, r6, #15
 80094a8:	d00a      	beq.n	80094c0 <_strtod_l+0x550>
 80094aa:	4b15      	ldr	r3, [pc, #84]	; (8009500 <_strtod_l+0x590>)
 80094ac:	4640      	mov	r0, r8
 80094ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094b2:	4649      	mov	r1, r9
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f7f7 f938 	bl	800072c <__aeabi_ddiv>
 80094bc:	4680      	mov	r8, r0
 80094be:	4689      	mov	r9, r1
 80094c0:	1136      	asrs	r6, r6, #4
 80094c2:	d0dc      	beq.n	800947e <_strtod_l+0x50e>
 80094c4:	2e1f      	cmp	r6, #31
 80094c6:	dd23      	ble.n	8009510 <_strtod_l+0x5a0>
 80094c8:	f04f 0b00 	mov.w	fp, #0
 80094cc:	f8cd b010 	str.w	fp, [sp, #16]
 80094d0:	f8cd b020 	str.w	fp, [sp, #32]
 80094d4:	f8cd b018 	str.w	fp, [sp, #24]
 80094d8:	2322      	movs	r3, #34	; 0x22
 80094da:	f04f 0800 	mov.w	r8, #0
 80094de:	f04f 0900 	mov.w	r9, #0
 80094e2:	f8ca 3000 	str.w	r3, [sl]
 80094e6:	e789      	b.n	80093fc <_strtod_l+0x48c>
 80094e8:	0800cb59 	.word	0x0800cb59
 80094ec:	0800cb9c 	.word	0x0800cb9c
 80094f0:	0800cb51 	.word	0x0800cb51
 80094f4:	0800ccdc 	.word	0x0800ccdc
 80094f8:	7ff00000 	.word	0x7ff00000
 80094fc:	0800cf88 	.word	0x0800cf88
 8009500:	0800ce68 	.word	0x0800ce68
 8009504:	0800ce40 	.word	0x0800ce40
 8009508:	7ca00000 	.word	0x7ca00000
 800950c:	7fefffff 	.word	0x7fefffff
 8009510:	f016 0310 	ands.w	r3, r6, #16
 8009514:	bf18      	it	ne
 8009516:	236a      	movne	r3, #106	; 0x6a
 8009518:	4640      	mov	r0, r8
 800951a:	9305      	str	r3, [sp, #20]
 800951c:	4649      	mov	r1, r9
 800951e:	2300      	movs	r3, #0
 8009520:	4fb0      	ldr	r7, [pc, #704]	; (80097e4 <_strtod_l+0x874>)
 8009522:	07f2      	lsls	r2, r6, #31
 8009524:	d504      	bpl.n	8009530 <_strtod_l+0x5c0>
 8009526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952a:	f7f6 ffd5 	bl	80004d8 <__aeabi_dmul>
 800952e:	2301      	movs	r3, #1
 8009530:	1076      	asrs	r6, r6, #1
 8009532:	f107 0708 	add.w	r7, r7, #8
 8009536:	d1f4      	bne.n	8009522 <_strtod_l+0x5b2>
 8009538:	b10b      	cbz	r3, 800953e <_strtod_l+0x5ce>
 800953a:	4680      	mov	r8, r0
 800953c:	4689      	mov	r9, r1
 800953e:	9b05      	ldr	r3, [sp, #20]
 8009540:	b1c3      	cbz	r3, 8009574 <_strtod_l+0x604>
 8009542:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009546:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800954a:	2b00      	cmp	r3, #0
 800954c:	4649      	mov	r1, r9
 800954e:	dd11      	ble.n	8009574 <_strtod_l+0x604>
 8009550:	2b1f      	cmp	r3, #31
 8009552:	f340 8127 	ble.w	80097a4 <_strtod_l+0x834>
 8009556:	2b34      	cmp	r3, #52	; 0x34
 8009558:	bfd8      	it	le
 800955a:	f04f 33ff 	movle.w	r3, #4294967295
 800955e:	f04f 0800 	mov.w	r8, #0
 8009562:	bfcf      	iteee	gt
 8009564:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009568:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800956c:	fa03 f202 	lslle.w	r2, r3, r2
 8009570:	ea02 0901 	andle.w	r9, r2, r1
 8009574:	2200      	movs	r2, #0
 8009576:	2300      	movs	r3, #0
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	f7f7 fa14 	bl	80009a8 <__aeabi_dcmpeq>
 8009580:	2800      	cmp	r0, #0
 8009582:	d1a1      	bne.n	80094c8 <_strtod_l+0x558>
 8009584:	9b06      	ldr	r3, [sp, #24]
 8009586:	465a      	mov	r2, fp
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	4650      	mov	r0, sl
 800958c:	4623      	mov	r3, r4
 800958e:	9908      	ldr	r1, [sp, #32]
 8009590:	f001 fe1c 	bl	800b1cc <__s2b>
 8009594:	9008      	str	r0, [sp, #32]
 8009596:	2800      	cmp	r0, #0
 8009598:	f43f af21 	beq.w	80093de <_strtod_l+0x46e>
 800959c:	9b04      	ldr	r3, [sp, #16]
 800959e:	f04f 0b00 	mov.w	fp, #0
 80095a2:	1b5d      	subs	r5, r3, r5
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	f8cd b010 	str.w	fp, [sp, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	bfb4      	ite	lt
 80095ae:	462b      	movlt	r3, r5
 80095b0:	2300      	movge	r3, #0
 80095b2:	930e      	str	r3, [sp, #56]	; 0x38
 80095b4:	9b07      	ldr	r3, [sp, #28]
 80095b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80095ba:	9314      	str	r3, [sp, #80]	; 0x50
 80095bc:	9b08      	ldr	r3, [sp, #32]
 80095be:	4650      	mov	r0, sl
 80095c0:	6859      	ldr	r1, [r3, #4]
 80095c2:	f001 fd5b 	bl	800b07c <_Balloc>
 80095c6:	9006      	str	r0, [sp, #24]
 80095c8:	2800      	cmp	r0, #0
 80095ca:	f43f af10 	beq.w	80093ee <_strtod_l+0x47e>
 80095ce:	9b08      	ldr	r3, [sp, #32]
 80095d0:	300c      	adds	r0, #12
 80095d2:	691a      	ldr	r2, [r3, #16]
 80095d4:	f103 010c 	add.w	r1, r3, #12
 80095d8:	3202      	adds	r2, #2
 80095da:	0092      	lsls	r2, r2, #2
 80095dc:	f001 fd40 	bl	800b060 <memcpy>
 80095e0:	ab1c      	add	r3, sp, #112	; 0x70
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	ab1b      	add	r3, sp, #108	; 0x6c
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	4642      	mov	r2, r8
 80095ea:	464b      	mov	r3, r9
 80095ec:	4650      	mov	r0, sl
 80095ee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80095f2:	f002 f92d 	bl	800b850 <__d2b>
 80095f6:	901a      	str	r0, [sp, #104]	; 0x68
 80095f8:	2800      	cmp	r0, #0
 80095fa:	f43f aef8 	beq.w	80093ee <_strtod_l+0x47e>
 80095fe:	2101      	movs	r1, #1
 8009600:	4650      	mov	r0, sl
 8009602:	f001 fe7b 	bl	800b2fc <__i2b>
 8009606:	4603      	mov	r3, r0
 8009608:	9004      	str	r0, [sp, #16]
 800960a:	2800      	cmp	r0, #0
 800960c:	f43f aeef 	beq.w	80093ee <_strtod_l+0x47e>
 8009610:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009612:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009614:	2d00      	cmp	r5, #0
 8009616:	bfab      	itete	ge
 8009618:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800961a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800961c:	18ee      	addge	r6, r5, r3
 800961e:	1b5c      	sublt	r4, r3, r5
 8009620:	9b05      	ldr	r3, [sp, #20]
 8009622:	bfa8      	it	ge
 8009624:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009626:	eba5 0503 	sub.w	r5, r5, r3
 800962a:	4415      	add	r5, r2
 800962c:	4b6e      	ldr	r3, [pc, #440]	; (80097e8 <_strtod_l+0x878>)
 800962e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009632:	bfb8      	it	lt
 8009634:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009636:	429d      	cmp	r5, r3
 8009638:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800963c:	f280 80c4 	bge.w	80097c8 <_strtod_l+0x858>
 8009640:	1b5b      	subs	r3, r3, r5
 8009642:	2b1f      	cmp	r3, #31
 8009644:	f04f 0701 	mov.w	r7, #1
 8009648:	eba2 0203 	sub.w	r2, r2, r3
 800964c:	f300 80b1 	bgt.w	80097b2 <_strtod_l+0x842>
 8009650:	2500      	movs	r5, #0
 8009652:	fa07 f303 	lsl.w	r3, r7, r3
 8009656:	930f      	str	r3, [sp, #60]	; 0x3c
 8009658:	18b7      	adds	r7, r6, r2
 800965a:	9b05      	ldr	r3, [sp, #20]
 800965c:	42be      	cmp	r6, r7
 800965e:	4414      	add	r4, r2
 8009660:	441c      	add	r4, r3
 8009662:	4633      	mov	r3, r6
 8009664:	bfa8      	it	ge
 8009666:	463b      	movge	r3, r7
 8009668:	42a3      	cmp	r3, r4
 800966a:	bfa8      	it	ge
 800966c:	4623      	movge	r3, r4
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfc2      	ittt	gt
 8009672:	1aff      	subgt	r7, r7, r3
 8009674:	1ae4      	subgt	r4, r4, r3
 8009676:	1af6      	subgt	r6, r6, r3
 8009678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800967a:	2b00      	cmp	r3, #0
 800967c:	dd17      	ble.n	80096ae <_strtod_l+0x73e>
 800967e:	461a      	mov	r2, r3
 8009680:	4650      	mov	r0, sl
 8009682:	9904      	ldr	r1, [sp, #16]
 8009684:	f001 fef8 	bl	800b478 <__pow5mult>
 8009688:	9004      	str	r0, [sp, #16]
 800968a:	2800      	cmp	r0, #0
 800968c:	f43f aeaf 	beq.w	80093ee <_strtod_l+0x47e>
 8009690:	4601      	mov	r1, r0
 8009692:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009694:	4650      	mov	r0, sl
 8009696:	f001 fe47 	bl	800b328 <__multiply>
 800969a:	9009      	str	r0, [sp, #36]	; 0x24
 800969c:	2800      	cmp	r0, #0
 800969e:	f43f aea6 	beq.w	80093ee <_strtod_l+0x47e>
 80096a2:	4650      	mov	r0, sl
 80096a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096a6:	f001 fd29 	bl	800b0fc <_Bfree>
 80096aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ac:	931a      	str	r3, [sp, #104]	; 0x68
 80096ae:	2f00      	cmp	r7, #0
 80096b0:	f300 808e 	bgt.w	80097d0 <_strtod_l+0x860>
 80096b4:	9b07      	ldr	r3, [sp, #28]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	dd08      	ble.n	80096cc <_strtod_l+0x75c>
 80096ba:	4650      	mov	r0, sl
 80096bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096be:	9906      	ldr	r1, [sp, #24]
 80096c0:	f001 feda 	bl	800b478 <__pow5mult>
 80096c4:	9006      	str	r0, [sp, #24]
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f43f ae91 	beq.w	80093ee <_strtod_l+0x47e>
 80096cc:	2c00      	cmp	r4, #0
 80096ce:	dd08      	ble.n	80096e2 <_strtod_l+0x772>
 80096d0:	4622      	mov	r2, r4
 80096d2:	4650      	mov	r0, sl
 80096d4:	9906      	ldr	r1, [sp, #24]
 80096d6:	f001 ff29 	bl	800b52c <__lshift>
 80096da:	9006      	str	r0, [sp, #24]
 80096dc:	2800      	cmp	r0, #0
 80096de:	f43f ae86 	beq.w	80093ee <_strtod_l+0x47e>
 80096e2:	2e00      	cmp	r6, #0
 80096e4:	dd08      	ble.n	80096f8 <_strtod_l+0x788>
 80096e6:	4632      	mov	r2, r6
 80096e8:	4650      	mov	r0, sl
 80096ea:	9904      	ldr	r1, [sp, #16]
 80096ec:	f001 ff1e 	bl	800b52c <__lshift>
 80096f0:	9004      	str	r0, [sp, #16]
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f43f ae7b 	beq.w	80093ee <_strtod_l+0x47e>
 80096f8:	4650      	mov	r0, sl
 80096fa:	9a06      	ldr	r2, [sp, #24]
 80096fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096fe:	f001 ffa1 	bl	800b644 <__mdiff>
 8009702:	4683      	mov	fp, r0
 8009704:	2800      	cmp	r0, #0
 8009706:	f43f ae72 	beq.w	80093ee <_strtod_l+0x47e>
 800970a:	2400      	movs	r4, #0
 800970c:	68c3      	ldr	r3, [r0, #12]
 800970e:	9904      	ldr	r1, [sp, #16]
 8009710:	60c4      	str	r4, [r0, #12]
 8009712:	930b      	str	r3, [sp, #44]	; 0x2c
 8009714:	f001 ff7a 	bl	800b60c <__mcmp>
 8009718:	42a0      	cmp	r0, r4
 800971a:	da6b      	bge.n	80097f4 <_strtod_l+0x884>
 800971c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800971e:	ea53 0308 	orrs.w	r3, r3, r8
 8009722:	f040 8091 	bne.w	8009848 <_strtod_l+0x8d8>
 8009726:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800972a:	2b00      	cmp	r3, #0
 800972c:	f040 808c 	bne.w	8009848 <_strtod_l+0x8d8>
 8009730:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009734:	0d1b      	lsrs	r3, r3, #20
 8009736:	051b      	lsls	r3, r3, #20
 8009738:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800973c:	f240 8084 	bls.w	8009848 <_strtod_l+0x8d8>
 8009740:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009744:	b91b      	cbnz	r3, 800974e <_strtod_l+0x7de>
 8009746:	f8db 3010 	ldr.w	r3, [fp, #16]
 800974a:	2b01      	cmp	r3, #1
 800974c:	dd7c      	ble.n	8009848 <_strtod_l+0x8d8>
 800974e:	4659      	mov	r1, fp
 8009750:	2201      	movs	r2, #1
 8009752:	4650      	mov	r0, sl
 8009754:	f001 feea 	bl	800b52c <__lshift>
 8009758:	9904      	ldr	r1, [sp, #16]
 800975a:	4683      	mov	fp, r0
 800975c:	f001 ff56 	bl	800b60c <__mcmp>
 8009760:	2800      	cmp	r0, #0
 8009762:	dd71      	ble.n	8009848 <_strtod_l+0x8d8>
 8009764:	9905      	ldr	r1, [sp, #20]
 8009766:	464b      	mov	r3, r9
 8009768:	4a20      	ldr	r2, [pc, #128]	; (80097ec <_strtod_l+0x87c>)
 800976a:	2900      	cmp	r1, #0
 800976c:	f000 808c 	beq.w	8009888 <_strtod_l+0x918>
 8009770:	ea02 0109 	and.w	r1, r2, r9
 8009774:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009778:	f300 8086 	bgt.w	8009888 <_strtod_l+0x918>
 800977c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009780:	f77f aeaa 	ble.w	80094d8 <_strtod_l+0x568>
 8009784:	4640      	mov	r0, r8
 8009786:	4649      	mov	r1, r9
 8009788:	4b19      	ldr	r3, [pc, #100]	; (80097f0 <_strtod_l+0x880>)
 800978a:	2200      	movs	r2, #0
 800978c:	f7f6 fea4 	bl	80004d8 <__aeabi_dmul>
 8009790:	460b      	mov	r3, r1
 8009792:	4303      	orrs	r3, r0
 8009794:	bf08      	it	eq
 8009796:	2322      	moveq	r3, #34	; 0x22
 8009798:	4680      	mov	r8, r0
 800979a:	4689      	mov	r9, r1
 800979c:	bf08      	it	eq
 800979e:	f8ca 3000 	streq.w	r3, [sl]
 80097a2:	e62f      	b.n	8009404 <_strtod_l+0x494>
 80097a4:	f04f 32ff 	mov.w	r2, #4294967295
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	ea03 0808 	and.w	r8, r3, r8
 80097b0:	e6e0      	b.n	8009574 <_strtod_l+0x604>
 80097b2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80097b6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80097ba:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80097be:	35e2      	adds	r5, #226	; 0xe2
 80097c0:	fa07 f505 	lsl.w	r5, r7, r5
 80097c4:	970f      	str	r7, [sp, #60]	; 0x3c
 80097c6:	e747      	b.n	8009658 <_strtod_l+0x6e8>
 80097c8:	2301      	movs	r3, #1
 80097ca:	2500      	movs	r5, #0
 80097cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80097ce:	e743      	b.n	8009658 <_strtod_l+0x6e8>
 80097d0:	463a      	mov	r2, r7
 80097d2:	4650      	mov	r0, sl
 80097d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80097d6:	f001 fea9 	bl	800b52c <__lshift>
 80097da:	901a      	str	r0, [sp, #104]	; 0x68
 80097dc:	2800      	cmp	r0, #0
 80097de:	f47f af69 	bne.w	80096b4 <_strtod_l+0x744>
 80097e2:	e604      	b.n	80093ee <_strtod_l+0x47e>
 80097e4:	0800cbb0 	.word	0x0800cbb0
 80097e8:	fffffc02 	.word	0xfffffc02
 80097ec:	7ff00000 	.word	0x7ff00000
 80097f0:	39500000 	.word	0x39500000
 80097f4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80097f8:	d165      	bne.n	80098c6 <_strtod_l+0x956>
 80097fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009800:	b35a      	cbz	r2, 800985a <_strtod_l+0x8ea>
 8009802:	4a99      	ldr	r2, [pc, #612]	; (8009a68 <_strtod_l+0xaf8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d12b      	bne.n	8009860 <_strtod_l+0x8f0>
 8009808:	9b05      	ldr	r3, [sp, #20]
 800980a:	4641      	mov	r1, r8
 800980c:	b303      	cbz	r3, 8009850 <_strtod_l+0x8e0>
 800980e:	464a      	mov	r2, r9
 8009810:	4b96      	ldr	r3, [pc, #600]	; (8009a6c <_strtod_l+0xafc>)
 8009812:	4013      	ands	r3, r2
 8009814:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009818:	f04f 32ff 	mov.w	r2, #4294967295
 800981c:	d81b      	bhi.n	8009856 <_strtod_l+0x8e6>
 800981e:	0d1b      	lsrs	r3, r3, #20
 8009820:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009824:	fa02 f303 	lsl.w	r3, r2, r3
 8009828:	4299      	cmp	r1, r3
 800982a:	d119      	bne.n	8009860 <_strtod_l+0x8f0>
 800982c:	4b90      	ldr	r3, [pc, #576]	; (8009a70 <_strtod_l+0xb00>)
 800982e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009830:	429a      	cmp	r2, r3
 8009832:	d102      	bne.n	800983a <_strtod_l+0x8ca>
 8009834:	3101      	adds	r1, #1
 8009836:	f43f adda 	beq.w	80093ee <_strtod_l+0x47e>
 800983a:	f04f 0800 	mov.w	r8, #0
 800983e:	4b8b      	ldr	r3, [pc, #556]	; (8009a6c <_strtod_l+0xafc>)
 8009840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009842:	401a      	ands	r2, r3
 8009844:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009848:	9b05      	ldr	r3, [sp, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d19a      	bne.n	8009784 <_strtod_l+0x814>
 800984e:	e5d9      	b.n	8009404 <_strtod_l+0x494>
 8009850:	f04f 33ff 	mov.w	r3, #4294967295
 8009854:	e7e8      	b.n	8009828 <_strtod_l+0x8b8>
 8009856:	4613      	mov	r3, r2
 8009858:	e7e6      	b.n	8009828 <_strtod_l+0x8b8>
 800985a:	ea53 0308 	orrs.w	r3, r3, r8
 800985e:	d081      	beq.n	8009764 <_strtod_l+0x7f4>
 8009860:	b1e5      	cbz	r5, 800989c <_strtod_l+0x92c>
 8009862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009864:	421d      	tst	r5, r3
 8009866:	d0ef      	beq.n	8009848 <_strtod_l+0x8d8>
 8009868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800986a:	4640      	mov	r0, r8
 800986c:	4649      	mov	r1, r9
 800986e:	9a05      	ldr	r2, [sp, #20]
 8009870:	b1c3      	cbz	r3, 80098a4 <_strtod_l+0x934>
 8009872:	f7ff fb5b 	bl	8008f2c <sulp>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800987e:	f7f6 fc75 	bl	800016c <__adddf3>
 8009882:	4680      	mov	r8, r0
 8009884:	4689      	mov	r9, r1
 8009886:	e7df      	b.n	8009848 <_strtod_l+0x8d8>
 8009888:	4013      	ands	r3, r2
 800988a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800988e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009892:	f04f 38ff 	mov.w	r8, #4294967295
 8009896:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800989a:	e7d5      	b.n	8009848 <_strtod_l+0x8d8>
 800989c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800989e:	ea13 0f08 	tst.w	r3, r8
 80098a2:	e7e0      	b.n	8009866 <_strtod_l+0x8f6>
 80098a4:	f7ff fb42 	bl	8008f2c <sulp>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098b0:	f7f6 fc5a 	bl	8000168 <__aeabi_dsub>
 80098b4:	2200      	movs	r2, #0
 80098b6:	2300      	movs	r3, #0
 80098b8:	4680      	mov	r8, r0
 80098ba:	4689      	mov	r9, r1
 80098bc:	f7f7 f874 	bl	80009a8 <__aeabi_dcmpeq>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d0c1      	beq.n	8009848 <_strtod_l+0x8d8>
 80098c4:	e608      	b.n	80094d8 <_strtod_l+0x568>
 80098c6:	4658      	mov	r0, fp
 80098c8:	9904      	ldr	r1, [sp, #16]
 80098ca:	f002 f81d 	bl	800b908 <__ratio>
 80098ce:	2200      	movs	r2, #0
 80098d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098d4:	4606      	mov	r6, r0
 80098d6:	460f      	mov	r7, r1
 80098d8:	f7f7 f87a 	bl	80009d0 <__aeabi_dcmple>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d070      	beq.n	80099c2 <_strtod_l+0xa52>
 80098e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d042      	beq.n	800996c <_strtod_l+0x9fc>
 80098e6:	2600      	movs	r6, #0
 80098e8:	4f62      	ldr	r7, [pc, #392]	; (8009a74 <_strtod_l+0xb04>)
 80098ea:	4d62      	ldr	r5, [pc, #392]	; (8009a74 <_strtod_l+0xb04>)
 80098ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098f2:	0d1b      	lsrs	r3, r3, #20
 80098f4:	051b      	lsls	r3, r3, #20
 80098f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80098f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098fa:	4b5f      	ldr	r3, [pc, #380]	; (8009a78 <_strtod_l+0xb08>)
 80098fc:	429a      	cmp	r2, r3
 80098fe:	f040 80c3 	bne.w	8009a88 <_strtod_l+0xb18>
 8009902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009904:	4640      	mov	r0, r8
 8009906:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800990a:	4649      	mov	r1, r9
 800990c:	f001 ff26 	bl	800b75c <__ulp>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4630      	mov	r0, r6
 8009916:	4639      	mov	r1, r7
 8009918:	f7f6 fdde 	bl	80004d8 <__aeabi_dmul>
 800991c:	4642      	mov	r2, r8
 800991e:	464b      	mov	r3, r9
 8009920:	f7f6 fc24 	bl	800016c <__adddf3>
 8009924:	460b      	mov	r3, r1
 8009926:	4951      	ldr	r1, [pc, #324]	; (8009a6c <_strtod_l+0xafc>)
 8009928:	4a54      	ldr	r2, [pc, #336]	; (8009a7c <_strtod_l+0xb0c>)
 800992a:	4019      	ands	r1, r3
 800992c:	4291      	cmp	r1, r2
 800992e:	4680      	mov	r8, r0
 8009930:	d95d      	bls.n	80099ee <_strtod_l+0xa7e>
 8009932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009934:	4b4e      	ldr	r3, [pc, #312]	; (8009a70 <_strtod_l+0xb00>)
 8009936:	429a      	cmp	r2, r3
 8009938:	d103      	bne.n	8009942 <_strtod_l+0x9d2>
 800993a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800993c:	3301      	adds	r3, #1
 800993e:	f43f ad56 	beq.w	80093ee <_strtod_l+0x47e>
 8009942:	f04f 38ff 	mov.w	r8, #4294967295
 8009946:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009a70 <_strtod_l+0xb00>
 800994a:	4650      	mov	r0, sl
 800994c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800994e:	f001 fbd5 	bl	800b0fc <_Bfree>
 8009952:	4650      	mov	r0, sl
 8009954:	9906      	ldr	r1, [sp, #24]
 8009956:	f001 fbd1 	bl	800b0fc <_Bfree>
 800995a:	4650      	mov	r0, sl
 800995c:	9904      	ldr	r1, [sp, #16]
 800995e:	f001 fbcd 	bl	800b0fc <_Bfree>
 8009962:	4659      	mov	r1, fp
 8009964:	4650      	mov	r0, sl
 8009966:	f001 fbc9 	bl	800b0fc <_Bfree>
 800996a:	e627      	b.n	80095bc <_strtod_l+0x64c>
 800996c:	f1b8 0f00 	cmp.w	r8, #0
 8009970:	d119      	bne.n	80099a6 <_strtod_l+0xa36>
 8009972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009978:	b9e3      	cbnz	r3, 80099b4 <_strtod_l+0xa44>
 800997a:	2200      	movs	r2, #0
 800997c:	4630      	mov	r0, r6
 800997e:	4639      	mov	r1, r7
 8009980:	4b3c      	ldr	r3, [pc, #240]	; (8009a74 <_strtod_l+0xb04>)
 8009982:	f7f7 f81b 	bl	80009bc <__aeabi_dcmplt>
 8009986:	b9c8      	cbnz	r0, 80099bc <_strtod_l+0xa4c>
 8009988:	2200      	movs	r2, #0
 800998a:	4630      	mov	r0, r6
 800998c:	4639      	mov	r1, r7
 800998e:	4b3c      	ldr	r3, [pc, #240]	; (8009a80 <_strtod_l+0xb10>)
 8009990:	f7f6 fda2 	bl	80004d8 <__aeabi_dmul>
 8009994:	4604      	mov	r4, r0
 8009996:	460d      	mov	r5, r1
 8009998:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800999c:	9416      	str	r4, [sp, #88]	; 0x58
 800999e:	9317      	str	r3, [sp, #92]	; 0x5c
 80099a0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80099a4:	e7a2      	b.n	80098ec <_strtod_l+0x97c>
 80099a6:	f1b8 0f01 	cmp.w	r8, #1
 80099aa:	d103      	bne.n	80099b4 <_strtod_l+0xa44>
 80099ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f43f ad92 	beq.w	80094d8 <_strtod_l+0x568>
 80099b4:	2600      	movs	r6, #0
 80099b6:	2400      	movs	r4, #0
 80099b8:	4f32      	ldr	r7, [pc, #200]	; (8009a84 <_strtod_l+0xb14>)
 80099ba:	e796      	b.n	80098ea <_strtod_l+0x97a>
 80099bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80099be:	4d30      	ldr	r5, [pc, #192]	; (8009a80 <_strtod_l+0xb10>)
 80099c0:	e7ea      	b.n	8009998 <_strtod_l+0xa28>
 80099c2:	4b2f      	ldr	r3, [pc, #188]	; (8009a80 <_strtod_l+0xb10>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	4630      	mov	r0, r6
 80099c8:	4639      	mov	r1, r7
 80099ca:	f7f6 fd85 	bl	80004d8 <__aeabi_dmul>
 80099ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099d0:	4604      	mov	r4, r0
 80099d2:	460d      	mov	r5, r1
 80099d4:	b933      	cbnz	r3, 80099e4 <_strtod_l+0xa74>
 80099d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099da:	9010      	str	r0, [sp, #64]	; 0x40
 80099dc:	9311      	str	r3, [sp, #68]	; 0x44
 80099de:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80099e2:	e783      	b.n	80098ec <_strtod_l+0x97c>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80099ec:	e7f7      	b.n	80099de <_strtod_l+0xa6e>
 80099ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80099f2:	9b05      	ldr	r3, [sp, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1a8      	bne.n	800994a <_strtod_l+0x9da>
 80099f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099fe:	0d1b      	lsrs	r3, r3, #20
 8009a00:	051b      	lsls	r3, r3, #20
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d1a1      	bne.n	800994a <_strtod_l+0x9da>
 8009a06:	4620      	mov	r0, r4
 8009a08:	4629      	mov	r1, r5
 8009a0a:	f7f7 fb81 	bl	8001110 <__aeabi_d2lz>
 8009a0e:	f7f6 fd35 	bl	800047c <__aeabi_l2d>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	4620      	mov	r0, r4
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f7f6 fba5 	bl	8000168 <__aeabi_dsub>
 8009a1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a24:	ea43 0308 	orr.w	r3, r3, r8
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	460d      	mov	r5, r1
 8009a2e:	d066      	beq.n	8009afe <_strtod_l+0xb8e>
 8009a30:	a309      	add	r3, pc, #36	; (adr r3, 8009a58 <_strtod_l+0xae8>)
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	f7f6 ffc1 	bl	80009bc <__aeabi_dcmplt>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	f47f ace2 	bne.w	8009404 <_strtod_l+0x494>
 8009a40:	a307      	add	r3, pc, #28	; (adr r3, 8009a60 <_strtod_l+0xaf0>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f6 ffd5 	bl	80009f8 <__aeabi_dcmpgt>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f43f af7b 	beq.w	800994a <_strtod_l+0x9da>
 8009a54:	e4d6      	b.n	8009404 <_strtod_l+0x494>
 8009a56:	bf00      	nop
 8009a58:	94a03595 	.word	0x94a03595
 8009a5c:	3fdfffff 	.word	0x3fdfffff
 8009a60:	35afe535 	.word	0x35afe535
 8009a64:	3fe00000 	.word	0x3fe00000
 8009a68:	000fffff 	.word	0x000fffff
 8009a6c:	7ff00000 	.word	0x7ff00000
 8009a70:	7fefffff 	.word	0x7fefffff
 8009a74:	3ff00000 	.word	0x3ff00000
 8009a78:	7fe00000 	.word	0x7fe00000
 8009a7c:	7c9fffff 	.word	0x7c9fffff
 8009a80:	3fe00000 	.word	0x3fe00000
 8009a84:	bff00000 	.word	0xbff00000
 8009a88:	9b05      	ldr	r3, [sp, #20]
 8009a8a:	b313      	cbz	r3, 8009ad2 <_strtod_l+0xb62>
 8009a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a92:	d81e      	bhi.n	8009ad2 <_strtod_l+0xb62>
 8009a94:	a326      	add	r3, pc, #152	; (adr r3, 8009b30 <_strtod_l+0xbc0>)
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7f6 ff97 	bl	80009d0 <__aeabi_dcmple>
 8009aa2:	b190      	cbz	r0, 8009aca <_strtod_l+0xb5a>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f7f6 ffee 	bl	8000a88 <__aeabi_d2uiz>
 8009aac:	2801      	cmp	r0, #1
 8009aae:	bf38      	it	cc
 8009ab0:	2001      	movcc	r0, #1
 8009ab2:	f7f6 fc97 	bl	80003e4 <__aeabi_ui2d>
 8009ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	b9d3      	cbnz	r3, 8009af4 <_strtod_l+0xb84>
 8009abe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ac2:	9012      	str	r0, [sp, #72]	; 0x48
 8009ac4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ac6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009aca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009acc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009ad0:	1a9f      	subs	r7, r3, r2
 8009ad2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ad6:	f001 fe41 	bl	800b75c <__ulp>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4630      	mov	r0, r6
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	f7f6 fcf9 	bl	80004d8 <__aeabi_dmul>
 8009ae6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009aea:	f7f6 fb3f 	bl	800016c <__adddf3>
 8009aee:	4680      	mov	r8, r0
 8009af0:	4689      	mov	r9, r1
 8009af2:	e77e      	b.n	80099f2 <_strtod_l+0xa82>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009afc:	e7e3      	b.n	8009ac6 <_strtod_l+0xb56>
 8009afe:	a30e      	add	r3, pc, #56	; (adr r3, 8009b38 <_strtod_l+0xbc8>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	f7f6 ff5a 	bl	80009bc <__aeabi_dcmplt>
 8009b08:	e7a1      	b.n	8009a4e <_strtod_l+0xade>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b12:	6013      	str	r3, [r2, #0]
 8009b14:	f7ff ba71 	b.w	8008ffa <_strtod_l+0x8a>
 8009b18:	2a65      	cmp	r2, #101	; 0x65
 8009b1a:	f43f ab63 	beq.w	80091e4 <_strtod_l+0x274>
 8009b1e:	2a45      	cmp	r2, #69	; 0x45
 8009b20:	f43f ab60 	beq.w	80091e4 <_strtod_l+0x274>
 8009b24:	2301      	movs	r3, #1
 8009b26:	f7ff bb95 	b.w	8009254 <_strtod_l+0x2e4>
 8009b2a:	bf00      	nop
 8009b2c:	f3af 8000 	nop.w
 8009b30:	ffc00000 	.word	0xffc00000
 8009b34:	41dfffff 	.word	0x41dfffff
 8009b38:	94a03595 	.word	0x94a03595
 8009b3c:	3fcfffff 	.word	0x3fcfffff

08009b40 <_strtod_r>:
 8009b40:	4b01      	ldr	r3, [pc, #4]	; (8009b48 <_strtod_r+0x8>)
 8009b42:	f7ff ba15 	b.w	8008f70 <_strtod_l>
 8009b46:	bf00      	nop
 8009b48:	2000008c 	.word	0x2000008c

08009b4c <_strtol_l.constprop.0>:
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b52:	4680      	mov	r8, r0
 8009b54:	d001      	beq.n	8009b5a <_strtol_l.constprop.0+0xe>
 8009b56:	2b24      	cmp	r3, #36	; 0x24
 8009b58:	d906      	bls.n	8009b68 <_strtol_l.constprop.0+0x1c>
 8009b5a:	f7fe fb23 	bl	80081a4 <__errno>
 8009b5e:	2316      	movs	r3, #22
 8009b60:	6003      	str	r3, [r0, #0]
 8009b62:	2000      	movs	r0, #0
 8009b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b68:	460d      	mov	r5, r1
 8009b6a:	4f35      	ldr	r7, [pc, #212]	; (8009c40 <_strtol_l.constprop.0+0xf4>)
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b72:	5de6      	ldrb	r6, [r4, r7]
 8009b74:	f016 0608 	ands.w	r6, r6, #8
 8009b78:	d1f8      	bne.n	8009b6c <_strtol_l.constprop.0+0x20>
 8009b7a:	2c2d      	cmp	r4, #45	; 0x2d
 8009b7c:	d12f      	bne.n	8009bde <_strtol_l.constprop.0+0x92>
 8009b7e:	2601      	movs	r6, #1
 8009b80:	782c      	ldrb	r4, [r5, #0]
 8009b82:	1c85      	adds	r5, r0, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d057      	beq.n	8009c38 <_strtol_l.constprop.0+0xec>
 8009b88:	2b10      	cmp	r3, #16
 8009b8a:	d109      	bne.n	8009ba0 <_strtol_l.constprop.0+0x54>
 8009b8c:	2c30      	cmp	r4, #48	; 0x30
 8009b8e:	d107      	bne.n	8009ba0 <_strtol_l.constprop.0+0x54>
 8009b90:	7828      	ldrb	r0, [r5, #0]
 8009b92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009b96:	2858      	cmp	r0, #88	; 0x58
 8009b98:	d149      	bne.n	8009c2e <_strtol_l.constprop.0+0xe2>
 8009b9a:	2310      	movs	r3, #16
 8009b9c:	786c      	ldrb	r4, [r5, #1]
 8009b9e:	3502      	adds	r5, #2
 8009ba0:	2700      	movs	r7, #0
 8009ba2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009ba6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009baa:	fbbe f9f3 	udiv	r9, lr, r3
 8009bae:	4638      	mov	r0, r7
 8009bb0:	fb03 ea19 	mls	sl, r3, r9, lr
 8009bb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009bb8:	f1bc 0f09 	cmp.w	ip, #9
 8009bbc:	d814      	bhi.n	8009be8 <_strtol_l.constprop.0+0x9c>
 8009bbe:	4664      	mov	r4, ip
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	dd22      	ble.n	8009c0a <_strtol_l.constprop.0+0xbe>
 8009bc4:	2f00      	cmp	r7, #0
 8009bc6:	db1d      	blt.n	8009c04 <_strtol_l.constprop.0+0xb8>
 8009bc8:	4581      	cmp	r9, r0
 8009bca:	d31b      	bcc.n	8009c04 <_strtol_l.constprop.0+0xb8>
 8009bcc:	d101      	bne.n	8009bd2 <_strtol_l.constprop.0+0x86>
 8009bce:	45a2      	cmp	sl, r4
 8009bd0:	db18      	blt.n	8009c04 <_strtol_l.constprop.0+0xb8>
 8009bd2:	2701      	movs	r7, #1
 8009bd4:	fb00 4003 	mla	r0, r0, r3, r4
 8009bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bdc:	e7ea      	b.n	8009bb4 <_strtol_l.constprop.0+0x68>
 8009bde:	2c2b      	cmp	r4, #43	; 0x2b
 8009be0:	bf04      	itt	eq
 8009be2:	782c      	ldrbeq	r4, [r5, #0]
 8009be4:	1c85      	addeq	r5, r0, #2
 8009be6:	e7cd      	b.n	8009b84 <_strtol_l.constprop.0+0x38>
 8009be8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009bec:	f1bc 0f19 	cmp.w	ip, #25
 8009bf0:	d801      	bhi.n	8009bf6 <_strtol_l.constprop.0+0xaa>
 8009bf2:	3c37      	subs	r4, #55	; 0x37
 8009bf4:	e7e4      	b.n	8009bc0 <_strtol_l.constprop.0+0x74>
 8009bf6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009bfa:	f1bc 0f19 	cmp.w	ip, #25
 8009bfe:	d804      	bhi.n	8009c0a <_strtol_l.constprop.0+0xbe>
 8009c00:	3c57      	subs	r4, #87	; 0x57
 8009c02:	e7dd      	b.n	8009bc0 <_strtol_l.constprop.0+0x74>
 8009c04:	f04f 37ff 	mov.w	r7, #4294967295
 8009c08:	e7e6      	b.n	8009bd8 <_strtol_l.constprop.0+0x8c>
 8009c0a:	2f00      	cmp	r7, #0
 8009c0c:	da07      	bge.n	8009c1e <_strtol_l.constprop.0+0xd2>
 8009c0e:	2322      	movs	r3, #34	; 0x22
 8009c10:	4670      	mov	r0, lr
 8009c12:	f8c8 3000 	str.w	r3, [r8]
 8009c16:	2a00      	cmp	r2, #0
 8009c18:	d0a4      	beq.n	8009b64 <_strtol_l.constprop.0+0x18>
 8009c1a:	1e69      	subs	r1, r5, #1
 8009c1c:	e005      	b.n	8009c2a <_strtol_l.constprop.0+0xde>
 8009c1e:	b106      	cbz	r6, 8009c22 <_strtol_l.constprop.0+0xd6>
 8009c20:	4240      	negs	r0, r0
 8009c22:	2a00      	cmp	r2, #0
 8009c24:	d09e      	beq.n	8009b64 <_strtol_l.constprop.0+0x18>
 8009c26:	2f00      	cmp	r7, #0
 8009c28:	d1f7      	bne.n	8009c1a <_strtol_l.constprop.0+0xce>
 8009c2a:	6011      	str	r1, [r2, #0]
 8009c2c:	e79a      	b.n	8009b64 <_strtol_l.constprop.0+0x18>
 8009c2e:	2430      	movs	r4, #48	; 0x30
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1b5      	bne.n	8009ba0 <_strtol_l.constprop.0+0x54>
 8009c34:	2308      	movs	r3, #8
 8009c36:	e7b3      	b.n	8009ba0 <_strtol_l.constprop.0+0x54>
 8009c38:	2c30      	cmp	r4, #48	; 0x30
 8009c3a:	d0a9      	beq.n	8009b90 <_strtol_l.constprop.0+0x44>
 8009c3c:	230a      	movs	r3, #10
 8009c3e:	e7af      	b.n	8009ba0 <_strtol_l.constprop.0+0x54>
 8009c40:	0800cbd9 	.word	0x0800cbd9

08009c44 <_strtol_r>:
 8009c44:	f7ff bf82 	b.w	8009b4c <_strtol_l.constprop.0>

08009c48 <quorem>:
 8009c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	6903      	ldr	r3, [r0, #16]
 8009c4e:	690c      	ldr	r4, [r1, #16]
 8009c50:	4607      	mov	r7, r0
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	f2c0 8082 	blt.w	8009d5c <quorem+0x114>
 8009c58:	3c01      	subs	r4, #1
 8009c5a:	f100 0514 	add.w	r5, r0, #20
 8009c5e:	f101 0814 	add.w	r8, r1, #20
 8009c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c70:	3301      	adds	r3, #1
 8009c72:	429a      	cmp	r2, r3
 8009c74:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c80:	d331      	bcc.n	8009ce6 <quorem+0x9e>
 8009c82:	f04f 0e00 	mov.w	lr, #0
 8009c86:	4640      	mov	r0, r8
 8009c88:	46ac      	mov	ip, r5
 8009c8a:	46f2      	mov	sl, lr
 8009c8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c90:	b293      	uxth	r3, r2
 8009c92:	fb06 e303 	mla	r3, r6, r3, lr
 8009c96:	0c12      	lsrs	r2, r2, #16
 8009c98:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	fb06 e202 	mla	r2, r6, r2, lr
 8009ca2:	ebaa 0303 	sub.w	r3, sl, r3
 8009ca6:	f8dc a000 	ldr.w	sl, [ip]
 8009caa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009cae:	fa1f fa8a 	uxth.w	sl, sl
 8009cb2:	4453      	add	r3, sl
 8009cb4:	f8dc a000 	ldr.w	sl, [ip]
 8009cb8:	b292      	uxth	r2, r2
 8009cba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009cbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cc8:	4581      	cmp	r9, r0
 8009cca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009cce:	f84c 3b04 	str.w	r3, [ip], #4
 8009cd2:	d2db      	bcs.n	8009c8c <quorem+0x44>
 8009cd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009cd8:	b92b      	cbnz	r3, 8009ce6 <quorem+0x9e>
 8009cda:	9b01      	ldr	r3, [sp, #4]
 8009cdc:	3b04      	subs	r3, #4
 8009cde:	429d      	cmp	r5, r3
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	d32f      	bcc.n	8009d44 <quorem+0xfc>
 8009ce4:	613c      	str	r4, [r7, #16]
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f001 fc90 	bl	800b60c <__mcmp>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	db25      	blt.n	8009d3c <quorem+0xf4>
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	f04f 0c00 	mov.w	ip, #0
 8009cf6:	3601      	adds	r6, #1
 8009cf8:	f858 1b04 	ldr.w	r1, [r8], #4
 8009cfc:	f8d0 e000 	ldr.w	lr, [r0]
 8009d00:	b28b      	uxth	r3, r1
 8009d02:	ebac 0303 	sub.w	r3, ip, r3
 8009d06:	fa1f f28e 	uxth.w	r2, lr
 8009d0a:	4413      	add	r3, r2
 8009d0c:	0c0a      	lsrs	r2, r1, #16
 8009d0e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d1c:	45c1      	cmp	r9, r8
 8009d1e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d22:	f840 3b04 	str.w	r3, [r0], #4
 8009d26:	d2e7      	bcs.n	8009cf8 <quorem+0xb0>
 8009d28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d30:	b922      	cbnz	r2, 8009d3c <quorem+0xf4>
 8009d32:	3b04      	subs	r3, #4
 8009d34:	429d      	cmp	r5, r3
 8009d36:	461a      	mov	r2, r3
 8009d38:	d30a      	bcc.n	8009d50 <quorem+0x108>
 8009d3a:	613c      	str	r4, [r7, #16]
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	b003      	add	sp, #12
 8009d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	6812      	ldr	r2, [r2, #0]
 8009d46:	3b04      	subs	r3, #4
 8009d48:	2a00      	cmp	r2, #0
 8009d4a:	d1cb      	bne.n	8009ce4 <quorem+0x9c>
 8009d4c:	3c01      	subs	r4, #1
 8009d4e:	e7c6      	b.n	8009cde <quorem+0x96>
 8009d50:	6812      	ldr	r2, [r2, #0]
 8009d52:	3b04      	subs	r3, #4
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	d1f0      	bne.n	8009d3a <quorem+0xf2>
 8009d58:	3c01      	subs	r4, #1
 8009d5a:	e7eb      	b.n	8009d34 <quorem+0xec>
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e7ee      	b.n	8009d3e <quorem+0xf6>

08009d60 <_dtoa_r>:
 8009d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	4616      	mov	r6, r2
 8009d66:	461f      	mov	r7, r3
 8009d68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009d6a:	b099      	sub	sp, #100	; 0x64
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009d76:	b974      	cbnz	r4, 8009d96 <_dtoa_r+0x36>
 8009d78:	2010      	movs	r0, #16
 8009d7a:	f001 f949 	bl	800b010 <malloc>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	6268      	str	r0, [r5, #36]	; 0x24
 8009d82:	b920      	cbnz	r0, 8009d8e <_dtoa_r+0x2e>
 8009d84:	21ea      	movs	r1, #234	; 0xea
 8009d86:	4ba8      	ldr	r3, [pc, #672]	; (800a028 <_dtoa_r+0x2c8>)
 8009d88:	48a8      	ldr	r0, [pc, #672]	; (800a02c <_dtoa_r+0x2cc>)
 8009d8a:	f002 f8b3 	bl	800bef4 <__assert_func>
 8009d8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d92:	6004      	str	r4, [r0, #0]
 8009d94:	60c4      	str	r4, [r0, #12]
 8009d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d98:	6819      	ldr	r1, [r3, #0]
 8009d9a:	b151      	cbz	r1, 8009db2 <_dtoa_r+0x52>
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4093      	lsls	r3, r2
 8009da2:	604a      	str	r2, [r1, #4]
 8009da4:	608b      	str	r3, [r1, #8]
 8009da6:	4628      	mov	r0, r5
 8009da8:	f001 f9a8 	bl	800b0fc <_Bfree>
 8009dac:	2200      	movs	r2, #0
 8009dae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	1e3b      	subs	r3, r7, #0
 8009db4:	bfaf      	iteee	ge
 8009db6:	2300      	movge	r3, #0
 8009db8:	2201      	movlt	r2, #1
 8009dba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009dbe:	9305      	strlt	r3, [sp, #20]
 8009dc0:	bfa8      	it	ge
 8009dc2:	f8c8 3000 	strge.w	r3, [r8]
 8009dc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009dca:	4b99      	ldr	r3, [pc, #612]	; (800a030 <_dtoa_r+0x2d0>)
 8009dcc:	bfb8      	it	lt
 8009dce:	f8c8 2000 	strlt.w	r2, [r8]
 8009dd2:	ea33 0309 	bics.w	r3, r3, r9
 8009dd6:	d119      	bne.n	8009e0c <_dtoa_r+0xac>
 8009dd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ddc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009de4:	4333      	orrs	r3, r6
 8009de6:	f000 857f 	beq.w	800a8e8 <_dtoa_r+0xb88>
 8009dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009dec:	b953      	cbnz	r3, 8009e04 <_dtoa_r+0xa4>
 8009dee:	4b91      	ldr	r3, [pc, #580]	; (800a034 <_dtoa_r+0x2d4>)
 8009df0:	e022      	b.n	8009e38 <_dtoa_r+0xd8>
 8009df2:	4b91      	ldr	r3, [pc, #580]	; (800a038 <_dtoa_r+0x2d8>)
 8009df4:	9303      	str	r3, [sp, #12]
 8009df6:	3308      	adds	r3, #8
 8009df8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009dfa:	6013      	str	r3, [r2, #0]
 8009dfc:	9803      	ldr	r0, [sp, #12]
 8009dfe:	b019      	add	sp, #100	; 0x64
 8009e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e04:	4b8b      	ldr	r3, [pc, #556]	; (800a034 <_dtoa_r+0x2d4>)
 8009e06:	9303      	str	r3, [sp, #12]
 8009e08:	3303      	adds	r3, #3
 8009e0a:	e7f5      	b.n	8009df8 <_dtoa_r+0x98>
 8009e0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009e10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f7f6 fdc4 	bl	80009a8 <__aeabi_dcmpeq>
 8009e20:	4680      	mov	r8, r0
 8009e22:	b158      	cbz	r0, 8009e3c <_dtoa_r+0xdc>
 8009e24:	2301      	movs	r3, #1
 8009e26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 8558 	beq.w	800a8e2 <_dtoa_r+0xb82>
 8009e32:	4882      	ldr	r0, [pc, #520]	; (800a03c <_dtoa_r+0x2dc>)
 8009e34:	6018      	str	r0, [r3, #0]
 8009e36:	1e43      	subs	r3, r0, #1
 8009e38:	9303      	str	r3, [sp, #12]
 8009e3a:	e7df      	b.n	8009dfc <_dtoa_r+0x9c>
 8009e3c:	ab16      	add	r3, sp, #88	; 0x58
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	ab17      	add	r3, sp, #92	; 0x5c
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	4628      	mov	r0, r5
 8009e46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e4a:	f001 fd01 	bl	800b850 <__d2b>
 8009e4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009e52:	4683      	mov	fp, r0
 8009e54:	2c00      	cmp	r4, #0
 8009e56:	d07f      	beq.n	8009f58 <_dtoa_r+0x1f8>
 8009e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009e6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009e6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009e72:	2200      	movs	r2, #0
 8009e74:	4b72      	ldr	r3, [pc, #456]	; (800a040 <_dtoa_r+0x2e0>)
 8009e76:	f7f6 f977 	bl	8000168 <__aeabi_dsub>
 8009e7a:	a365      	add	r3, pc, #404	; (adr r3, 800a010 <_dtoa_r+0x2b0>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 fb2a 	bl	80004d8 <__aeabi_dmul>
 8009e84:	a364      	add	r3, pc, #400	; (adr r3, 800a018 <_dtoa_r+0x2b8>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	f7f6 f96f 	bl	800016c <__adddf3>
 8009e8e:	4606      	mov	r6, r0
 8009e90:	4620      	mov	r0, r4
 8009e92:	460f      	mov	r7, r1
 8009e94:	f7f6 fab6 	bl	8000404 <__aeabi_i2d>
 8009e98:	a361      	add	r3, pc, #388	; (adr r3, 800a020 <_dtoa_r+0x2c0>)
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f7f6 fb1b 	bl	80004d8 <__aeabi_dmul>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	f7f6 f95f 	bl	800016c <__adddf3>
 8009eae:	4606      	mov	r6, r0
 8009eb0:	460f      	mov	r7, r1
 8009eb2:	f7f6 fdc1 	bl	8000a38 <__aeabi_d2iz>
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	4682      	mov	sl, r0
 8009eba:	2300      	movs	r3, #0
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	f7f6 fd7c 	bl	80009bc <__aeabi_dcmplt>
 8009ec4:	b148      	cbz	r0, 8009eda <_dtoa_r+0x17a>
 8009ec6:	4650      	mov	r0, sl
 8009ec8:	f7f6 fa9c 	bl	8000404 <__aeabi_i2d>
 8009ecc:	4632      	mov	r2, r6
 8009ece:	463b      	mov	r3, r7
 8009ed0:	f7f6 fd6a 	bl	80009a8 <__aeabi_dcmpeq>
 8009ed4:	b908      	cbnz	r0, 8009eda <_dtoa_r+0x17a>
 8009ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009eda:	f1ba 0f16 	cmp.w	sl, #22
 8009ede:	d858      	bhi.n	8009f92 <_dtoa_r+0x232>
 8009ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ee4:	4b57      	ldr	r3, [pc, #348]	; (800a044 <_dtoa_r+0x2e4>)
 8009ee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f7f6 fd65 	bl	80009bc <__aeabi_dcmplt>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d04f      	beq.n	8009f96 <_dtoa_r+0x236>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009efc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009efe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009f00:	1b1c      	subs	r4, r3, r4
 8009f02:	1e63      	subs	r3, r4, #1
 8009f04:	9309      	str	r3, [sp, #36]	; 0x24
 8009f06:	bf49      	itett	mi
 8009f08:	f1c4 0301 	rsbmi	r3, r4, #1
 8009f0c:	2300      	movpl	r3, #0
 8009f0e:	9306      	strmi	r3, [sp, #24]
 8009f10:	2300      	movmi	r3, #0
 8009f12:	bf54      	ite	pl
 8009f14:	9306      	strpl	r3, [sp, #24]
 8009f16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009f18:	f1ba 0f00 	cmp.w	sl, #0
 8009f1c:	db3d      	blt.n	8009f9a <_dtoa_r+0x23a>
 8009f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f20:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009f24:	4453      	add	r3, sl
 8009f26:	9309      	str	r3, [sp, #36]	; 0x24
 8009f28:	2300      	movs	r3, #0
 8009f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f2e:	2b09      	cmp	r3, #9
 8009f30:	f200 808c 	bhi.w	800a04c <_dtoa_r+0x2ec>
 8009f34:	2b05      	cmp	r3, #5
 8009f36:	bfc4      	itt	gt
 8009f38:	3b04      	subgt	r3, #4
 8009f3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f3e:	bfc8      	it	gt
 8009f40:	2400      	movgt	r4, #0
 8009f42:	f1a3 0302 	sub.w	r3, r3, #2
 8009f46:	bfd8      	it	le
 8009f48:	2401      	movle	r4, #1
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	f200 808a 	bhi.w	800a064 <_dtoa_r+0x304>
 8009f50:	e8df f003 	tbb	[pc, r3]
 8009f54:	5b4d4f2d 	.word	0x5b4d4f2d
 8009f58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009f5c:	441c      	add	r4, r3
 8009f5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009f62:	2b20      	cmp	r3, #32
 8009f64:	bfc3      	ittte	gt
 8009f66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f6a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009f6e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009f72:	f1c3 0320 	rsble	r3, r3, #32
 8009f76:	bfc6      	itte	gt
 8009f78:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009f7c:	4318      	orrgt	r0, r3
 8009f7e:	fa06 f003 	lslle.w	r0, r6, r3
 8009f82:	f7f6 fa2f 	bl	80003e4 <__aeabi_ui2d>
 8009f86:	2301      	movs	r3, #1
 8009f88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009f8c:	3c01      	subs	r4, #1
 8009f8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f90:	e76f      	b.n	8009e72 <_dtoa_r+0x112>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e7b2      	b.n	8009efc <_dtoa_r+0x19c>
 8009f96:	900f      	str	r0, [sp, #60]	; 0x3c
 8009f98:	e7b1      	b.n	8009efe <_dtoa_r+0x19e>
 8009f9a:	9b06      	ldr	r3, [sp, #24]
 8009f9c:	eba3 030a 	sub.w	r3, r3, sl
 8009fa0:	9306      	str	r3, [sp, #24]
 8009fa2:	f1ca 0300 	rsb	r3, sl, #0
 8009fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8009fa8:	2300      	movs	r3, #0
 8009faa:	930e      	str	r3, [sp, #56]	; 0x38
 8009fac:	e7be      	b.n	8009f2c <_dtoa_r+0x1cc>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	dc58      	bgt.n	800a06a <_dtoa_r+0x30a>
 8009fb8:	f04f 0901 	mov.w	r9, #1
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	f8cd 9020 	str.w	r9, [sp, #32]
 8009fc2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009fca:	6042      	str	r2, [r0, #4]
 8009fcc:	2204      	movs	r2, #4
 8009fce:	f102 0614 	add.w	r6, r2, #20
 8009fd2:	429e      	cmp	r6, r3
 8009fd4:	6841      	ldr	r1, [r0, #4]
 8009fd6:	d94e      	bls.n	800a076 <_dtoa_r+0x316>
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f001 f84f 	bl	800b07c <_Balloc>
 8009fde:	9003      	str	r0, [sp, #12]
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d14c      	bne.n	800a07e <_dtoa_r+0x31e>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009fea:	4b17      	ldr	r3, [pc, #92]	; (800a048 <_dtoa_r+0x2e8>)
 8009fec:	e6cc      	b.n	8009d88 <_dtoa_r+0x28>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e7de      	b.n	8009fb0 <_dtoa_r+0x250>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ff6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ff8:	eb0a 0903 	add.w	r9, sl, r3
 8009ffc:	f109 0301 	add.w	r3, r9, #1
 800a000:	2b01      	cmp	r3, #1
 800a002:	9308      	str	r3, [sp, #32]
 800a004:	bfb8      	it	lt
 800a006:	2301      	movlt	r3, #1
 800a008:	e7dd      	b.n	8009fc6 <_dtoa_r+0x266>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e7f2      	b.n	8009ff4 <_dtoa_r+0x294>
 800a00e:	bf00      	nop
 800a010:	636f4361 	.word	0x636f4361
 800a014:	3fd287a7 	.word	0x3fd287a7
 800a018:	8b60c8b3 	.word	0x8b60c8b3
 800a01c:	3fc68a28 	.word	0x3fc68a28
 800a020:	509f79fb 	.word	0x509f79fb
 800a024:	3fd34413 	.word	0x3fd34413
 800a028:	0800cce6 	.word	0x0800cce6
 800a02c:	0800ccfd 	.word	0x0800ccfd
 800a030:	7ff00000 	.word	0x7ff00000
 800a034:	0800cce2 	.word	0x0800cce2
 800a038:	0800ccd9 	.word	0x0800ccd9
 800a03c:	0800cb5d 	.word	0x0800cb5d
 800a040:	3ff80000 	.word	0x3ff80000
 800a044:	0800ce68 	.word	0x0800ce68
 800a048:	0800cd58 	.word	0x0800cd58
 800a04c:	2401      	movs	r4, #1
 800a04e:	2300      	movs	r3, #0
 800a050:	940b      	str	r4, [sp, #44]	; 0x2c
 800a052:	9322      	str	r3, [sp, #136]	; 0x88
 800a054:	f04f 39ff 	mov.w	r9, #4294967295
 800a058:	2200      	movs	r2, #0
 800a05a:	2312      	movs	r3, #18
 800a05c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a060:	9223      	str	r2, [sp, #140]	; 0x8c
 800a062:	e7b0      	b.n	8009fc6 <_dtoa_r+0x266>
 800a064:	2301      	movs	r3, #1
 800a066:	930b      	str	r3, [sp, #44]	; 0x2c
 800a068:	e7f4      	b.n	800a054 <_dtoa_r+0x2f4>
 800a06a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a06e:	464b      	mov	r3, r9
 800a070:	f8cd 9020 	str.w	r9, [sp, #32]
 800a074:	e7a7      	b.n	8009fc6 <_dtoa_r+0x266>
 800a076:	3101      	adds	r1, #1
 800a078:	6041      	str	r1, [r0, #4]
 800a07a:	0052      	lsls	r2, r2, #1
 800a07c:	e7a7      	b.n	8009fce <_dtoa_r+0x26e>
 800a07e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a080:	9a03      	ldr	r2, [sp, #12]
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	9b08      	ldr	r3, [sp, #32]
 800a086:	2b0e      	cmp	r3, #14
 800a088:	f200 80a8 	bhi.w	800a1dc <_dtoa_r+0x47c>
 800a08c:	2c00      	cmp	r4, #0
 800a08e:	f000 80a5 	beq.w	800a1dc <_dtoa_r+0x47c>
 800a092:	f1ba 0f00 	cmp.w	sl, #0
 800a096:	dd34      	ble.n	800a102 <_dtoa_r+0x3a2>
 800a098:	4a9a      	ldr	r2, [pc, #616]	; (800a304 <_dtoa_r+0x5a4>)
 800a09a:	f00a 030f 	and.w	r3, sl, #15
 800a09e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a0a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a0ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a0b2:	d016      	beq.n	800a0e2 <_dtoa_r+0x382>
 800a0b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0b8:	4b93      	ldr	r3, [pc, #588]	; (800a308 <_dtoa_r+0x5a8>)
 800a0ba:	2703      	movs	r7, #3
 800a0bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0c0:	f7f6 fb34 	bl	800072c <__aeabi_ddiv>
 800a0c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0c8:	f004 040f 	and.w	r4, r4, #15
 800a0cc:	4e8e      	ldr	r6, [pc, #568]	; (800a308 <_dtoa_r+0x5a8>)
 800a0ce:	b954      	cbnz	r4, 800a0e6 <_dtoa_r+0x386>
 800a0d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0d8:	f7f6 fb28 	bl	800072c <__aeabi_ddiv>
 800a0dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0e0:	e029      	b.n	800a136 <_dtoa_r+0x3d6>
 800a0e2:	2702      	movs	r7, #2
 800a0e4:	e7f2      	b.n	800a0cc <_dtoa_r+0x36c>
 800a0e6:	07e1      	lsls	r1, r4, #31
 800a0e8:	d508      	bpl.n	800a0fc <_dtoa_r+0x39c>
 800a0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0f2:	f7f6 f9f1 	bl	80004d8 <__aeabi_dmul>
 800a0f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0fa:	3701      	adds	r7, #1
 800a0fc:	1064      	asrs	r4, r4, #1
 800a0fe:	3608      	adds	r6, #8
 800a100:	e7e5      	b.n	800a0ce <_dtoa_r+0x36e>
 800a102:	f000 80a5 	beq.w	800a250 <_dtoa_r+0x4f0>
 800a106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a10a:	f1ca 0400 	rsb	r4, sl, #0
 800a10e:	4b7d      	ldr	r3, [pc, #500]	; (800a304 <_dtoa_r+0x5a4>)
 800a110:	f004 020f 	and.w	r2, r4, #15
 800a114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f7f6 f9dc 	bl	80004d8 <__aeabi_dmul>
 800a120:	2702      	movs	r7, #2
 800a122:	2300      	movs	r3, #0
 800a124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a128:	4e77      	ldr	r6, [pc, #476]	; (800a308 <_dtoa_r+0x5a8>)
 800a12a:	1124      	asrs	r4, r4, #4
 800a12c:	2c00      	cmp	r4, #0
 800a12e:	f040 8084 	bne.w	800a23a <_dtoa_r+0x4da>
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1d2      	bne.n	800a0dc <_dtoa_r+0x37c>
 800a136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 808b 	beq.w	800a254 <_dtoa_r+0x4f4>
 800a13e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a142:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a146:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a14a:	2200      	movs	r2, #0
 800a14c:	4b6f      	ldr	r3, [pc, #444]	; (800a30c <_dtoa_r+0x5ac>)
 800a14e:	f7f6 fc35 	bl	80009bc <__aeabi_dcmplt>
 800a152:	2800      	cmp	r0, #0
 800a154:	d07e      	beq.n	800a254 <_dtoa_r+0x4f4>
 800a156:	9b08      	ldr	r3, [sp, #32]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d07b      	beq.n	800a254 <_dtoa_r+0x4f4>
 800a15c:	f1b9 0f00 	cmp.w	r9, #0
 800a160:	dd38      	ble.n	800a1d4 <_dtoa_r+0x474>
 800a162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a166:	2200      	movs	r2, #0
 800a168:	4b69      	ldr	r3, [pc, #420]	; (800a310 <_dtoa_r+0x5b0>)
 800a16a:	f7f6 f9b5 	bl	80004d8 <__aeabi_dmul>
 800a16e:	464c      	mov	r4, r9
 800a170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a174:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a178:	3701      	adds	r7, #1
 800a17a:	4638      	mov	r0, r7
 800a17c:	f7f6 f942 	bl	8000404 <__aeabi_i2d>
 800a180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a184:	f7f6 f9a8 	bl	80004d8 <__aeabi_dmul>
 800a188:	2200      	movs	r2, #0
 800a18a:	4b62      	ldr	r3, [pc, #392]	; (800a314 <_dtoa_r+0x5b4>)
 800a18c:	f7f5 ffee 	bl	800016c <__adddf3>
 800a190:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a194:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a198:	9611      	str	r6, [sp, #68]	; 0x44
 800a19a:	2c00      	cmp	r4, #0
 800a19c:	d15d      	bne.n	800a25a <_dtoa_r+0x4fa>
 800a19e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4b5c      	ldr	r3, [pc, #368]	; (800a318 <_dtoa_r+0x5b8>)
 800a1a6:	f7f5 ffdf 	bl	8000168 <__aeabi_dsub>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1b2:	4633      	mov	r3, r6
 800a1b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1b6:	f7f6 fc1f 	bl	80009f8 <__aeabi_dcmpgt>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f040 829c 	bne.w	800a6f8 <_dtoa_r+0x998>
 800a1c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a1ca:	f7f6 fbf7 	bl	80009bc <__aeabi_dcmplt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f040 8290 	bne.w	800a6f4 <_dtoa_r+0x994>
 800a1d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a1d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f2c0 8152 	blt.w	800a488 <_dtoa_r+0x728>
 800a1e4:	f1ba 0f0e 	cmp.w	sl, #14
 800a1e8:	f300 814e 	bgt.w	800a488 <_dtoa_r+0x728>
 800a1ec:	4b45      	ldr	r3, [pc, #276]	; (800a304 <_dtoa_r+0x5a4>)
 800a1ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a1fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f280 80db 	bge.w	800a3b8 <_dtoa_r+0x658>
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f300 80d7 	bgt.w	800a3b8 <_dtoa_r+0x658>
 800a20a:	f040 8272 	bne.w	800a6f2 <_dtoa_r+0x992>
 800a20e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a212:	2200      	movs	r2, #0
 800a214:	4b40      	ldr	r3, [pc, #256]	; (800a318 <_dtoa_r+0x5b8>)
 800a216:	f7f6 f95f 	bl	80004d8 <__aeabi_dmul>
 800a21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a21e:	f7f6 fbe1 	bl	80009e4 <__aeabi_dcmpge>
 800a222:	9c08      	ldr	r4, [sp, #32]
 800a224:	4626      	mov	r6, r4
 800a226:	2800      	cmp	r0, #0
 800a228:	f040 8248 	bne.w	800a6bc <_dtoa_r+0x95c>
 800a22c:	2331      	movs	r3, #49	; 0x31
 800a22e:	9f03      	ldr	r7, [sp, #12]
 800a230:	f10a 0a01 	add.w	sl, sl, #1
 800a234:	f807 3b01 	strb.w	r3, [r7], #1
 800a238:	e244      	b.n	800a6c4 <_dtoa_r+0x964>
 800a23a:	07e2      	lsls	r2, r4, #31
 800a23c:	d505      	bpl.n	800a24a <_dtoa_r+0x4ea>
 800a23e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a242:	f7f6 f949 	bl	80004d8 <__aeabi_dmul>
 800a246:	2301      	movs	r3, #1
 800a248:	3701      	adds	r7, #1
 800a24a:	1064      	asrs	r4, r4, #1
 800a24c:	3608      	adds	r6, #8
 800a24e:	e76d      	b.n	800a12c <_dtoa_r+0x3cc>
 800a250:	2702      	movs	r7, #2
 800a252:	e770      	b.n	800a136 <_dtoa_r+0x3d6>
 800a254:	46d0      	mov	r8, sl
 800a256:	9c08      	ldr	r4, [sp, #32]
 800a258:	e78f      	b.n	800a17a <_dtoa_r+0x41a>
 800a25a:	9903      	ldr	r1, [sp, #12]
 800a25c:	4b29      	ldr	r3, [pc, #164]	; (800a304 <_dtoa_r+0x5a4>)
 800a25e:	4421      	add	r1, r4
 800a260:	9112      	str	r1, [sp, #72]	; 0x48
 800a262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a264:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a268:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a26c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a270:	2900      	cmp	r1, #0
 800a272:	d055      	beq.n	800a320 <_dtoa_r+0x5c0>
 800a274:	2000      	movs	r0, #0
 800a276:	4929      	ldr	r1, [pc, #164]	; (800a31c <_dtoa_r+0x5bc>)
 800a278:	f7f6 fa58 	bl	800072c <__aeabi_ddiv>
 800a27c:	463b      	mov	r3, r7
 800a27e:	4632      	mov	r2, r6
 800a280:	f7f5 ff72 	bl	8000168 <__aeabi_dsub>
 800a284:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a288:	9f03      	ldr	r7, [sp, #12]
 800a28a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a28e:	f7f6 fbd3 	bl	8000a38 <__aeabi_d2iz>
 800a292:	4604      	mov	r4, r0
 800a294:	f7f6 f8b6 	bl	8000404 <__aeabi_i2d>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2a0:	f7f5 ff62 	bl	8000168 <__aeabi_dsub>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	3430      	adds	r4, #48	; 0x30
 800a2aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2b2:	f807 4b01 	strb.w	r4, [r7], #1
 800a2b6:	f7f6 fb81 	bl	80009bc <__aeabi_dcmplt>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d174      	bne.n	800a3a8 <_dtoa_r+0x648>
 800a2be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	4911      	ldr	r1, [pc, #68]	; (800a30c <_dtoa_r+0x5ac>)
 800a2c6:	f7f5 ff4f 	bl	8000168 <__aeabi_dsub>
 800a2ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2ce:	f7f6 fb75 	bl	80009bc <__aeabi_dcmplt>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f040 80b7 	bne.w	800a446 <_dtoa_r+0x6e6>
 800a2d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2da:	429f      	cmp	r7, r3
 800a2dc:	f43f af7a 	beq.w	800a1d4 <_dtoa_r+0x474>
 800a2e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <_dtoa_r+0x5b0>)
 800a2e8:	f7f6 f8f6 	bl	80004d8 <__aeabi_dmul>
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2f6:	4b06      	ldr	r3, [pc, #24]	; (800a310 <_dtoa_r+0x5b0>)
 800a2f8:	f7f6 f8ee 	bl	80004d8 <__aeabi_dmul>
 800a2fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a300:	e7c3      	b.n	800a28a <_dtoa_r+0x52a>
 800a302:	bf00      	nop
 800a304:	0800ce68 	.word	0x0800ce68
 800a308:	0800ce40 	.word	0x0800ce40
 800a30c:	3ff00000 	.word	0x3ff00000
 800a310:	40240000 	.word	0x40240000
 800a314:	401c0000 	.word	0x401c0000
 800a318:	40140000 	.word	0x40140000
 800a31c:	3fe00000 	.word	0x3fe00000
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f6 f8d8 	bl	80004d8 <__aeabi_dmul>
 800a328:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a32a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a32e:	9c03      	ldr	r4, [sp, #12]
 800a330:	9314      	str	r3, [sp, #80]	; 0x50
 800a332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a336:	f7f6 fb7f 	bl	8000a38 <__aeabi_d2iz>
 800a33a:	9015      	str	r0, [sp, #84]	; 0x54
 800a33c:	f7f6 f862 	bl	8000404 <__aeabi_i2d>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a348:	f7f5 ff0e 	bl	8000168 <__aeabi_dsub>
 800a34c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a34e:	4606      	mov	r6, r0
 800a350:	3330      	adds	r3, #48	; 0x30
 800a352:	f804 3b01 	strb.w	r3, [r4], #1
 800a356:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a358:	460f      	mov	r7, r1
 800a35a:	429c      	cmp	r4, r3
 800a35c:	f04f 0200 	mov.w	r2, #0
 800a360:	d124      	bne.n	800a3ac <_dtoa_r+0x64c>
 800a362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a366:	4bb0      	ldr	r3, [pc, #704]	; (800a628 <_dtoa_r+0x8c8>)
 800a368:	f7f5 ff00 	bl	800016c <__adddf3>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4630      	mov	r0, r6
 800a372:	4639      	mov	r1, r7
 800a374:	f7f6 fb40 	bl	80009f8 <__aeabi_dcmpgt>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d163      	bne.n	800a444 <_dtoa_r+0x6e4>
 800a37c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a380:	2000      	movs	r0, #0
 800a382:	49a9      	ldr	r1, [pc, #676]	; (800a628 <_dtoa_r+0x8c8>)
 800a384:	f7f5 fef0 	bl	8000168 <__aeabi_dsub>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4630      	mov	r0, r6
 800a38e:	4639      	mov	r1, r7
 800a390:	f7f6 fb14 	bl	80009bc <__aeabi_dcmplt>
 800a394:	2800      	cmp	r0, #0
 800a396:	f43f af1d 	beq.w	800a1d4 <_dtoa_r+0x474>
 800a39a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a39c:	1e7b      	subs	r3, r7, #1
 800a39e:	9314      	str	r3, [sp, #80]	; 0x50
 800a3a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a3a4:	2b30      	cmp	r3, #48	; 0x30
 800a3a6:	d0f8      	beq.n	800a39a <_dtoa_r+0x63a>
 800a3a8:	46c2      	mov	sl, r8
 800a3aa:	e03b      	b.n	800a424 <_dtoa_r+0x6c4>
 800a3ac:	4b9f      	ldr	r3, [pc, #636]	; (800a62c <_dtoa_r+0x8cc>)
 800a3ae:	f7f6 f893 	bl	80004d8 <__aeabi_dmul>
 800a3b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3b6:	e7bc      	b.n	800a332 <_dtoa_r+0x5d2>
 800a3b8:	9f03      	ldr	r7, [sp, #12]
 800a3ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a3be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f7f6 f9b1 	bl	800072c <__aeabi_ddiv>
 800a3ca:	f7f6 fb35 	bl	8000a38 <__aeabi_d2iz>
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	f7f6 f818 	bl	8000404 <__aeabi_i2d>
 800a3d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3d8:	f7f6 f87e 	bl	80004d8 <__aeabi_dmul>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f5 fec0 	bl	8000168 <__aeabi_dsub>
 800a3e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a3ec:	f807 6b01 	strb.w	r6, [r7], #1
 800a3f0:	9e03      	ldr	r6, [sp, #12]
 800a3f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a3f6:	1bbe      	subs	r6, r7, r6
 800a3f8:	45b4      	cmp	ip, r6
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	d136      	bne.n	800a46e <_dtoa_r+0x70e>
 800a400:	f7f5 feb4 	bl	800016c <__adddf3>
 800a404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a408:	4680      	mov	r8, r0
 800a40a:	4689      	mov	r9, r1
 800a40c:	f7f6 faf4 	bl	80009f8 <__aeabi_dcmpgt>
 800a410:	bb58      	cbnz	r0, 800a46a <_dtoa_r+0x70a>
 800a412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f6 fac5 	bl	80009a8 <__aeabi_dcmpeq>
 800a41e:	b108      	cbz	r0, 800a424 <_dtoa_r+0x6c4>
 800a420:	07e1      	lsls	r1, r4, #31
 800a422:	d422      	bmi.n	800a46a <_dtoa_r+0x70a>
 800a424:	4628      	mov	r0, r5
 800a426:	4659      	mov	r1, fp
 800a428:	f000 fe68 	bl	800b0fc <_Bfree>
 800a42c:	2300      	movs	r3, #0
 800a42e:	703b      	strb	r3, [r7, #0]
 800a430:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a432:	f10a 0001 	add.w	r0, sl, #1
 800a436:	6018      	str	r0, [r3, #0]
 800a438:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f43f acde 	beq.w	8009dfc <_dtoa_r+0x9c>
 800a440:	601f      	str	r7, [r3, #0]
 800a442:	e4db      	b.n	8009dfc <_dtoa_r+0x9c>
 800a444:	4627      	mov	r7, r4
 800a446:	463b      	mov	r3, r7
 800a448:	461f      	mov	r7, r3
 800a44a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a44e:	2a39      	cmp	r2, #57	; 0x39
 800a450:	d107      	bne.n	800a462 <_dtoa_r+0x702>
 800a452:	9a03      	ldr	r2, [sp, #12]
 800a454:	429a      	cmp	r2, r3
 800a456:	d1f7      	bne.n	800a448 <_dtoa_r+0x6e8>
 800a458:	2230      	movs	r2, #48	; 0x30
 800a45a:	9903      	ldr	r1, [sp, #12]
 800a45c:	f108 0801 	add.w	r8, r8, #1
 800a460:	700a      	strb	r2, [r1, #0]
 800a462:	781a      	ldrb	r2, [r3, #0]
 800a464:	3201      	adds	r2, #1
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	e79e      	b.n	800a3a8 <_dtoa_r+0x648>
 800a46a:	46d0      	mov	r8, sl
 800a46c:	e7eb      	b.n	800a446 <_dtoa_r+0x6e6>
 800a46e:	2200      	movs	r2, #0
 800a470:	4b6e      	ldr	r3, [pc, #440]	; (800a62c <_dtoa_r+0x8cc>)
 800a472:	f7f6 f831 	bl	80004d8 <__aeabi_dmul>
 800a476:	2200      	movs	r2, #0
 800a478:	2300      	movs	r3, #0
 800a47a:	4680      	mov	r8, r0
 800a47c:	4689      	mov	r9, r1
 800a47e:	f7f6 fa93 	bl	80009a8 <__aeabi_dcmpeq>
 800a482:	2800      	cmp	r0, #0
 800a484:	d09b      	beq.n	800a3be <_dtoa_r+0x65e>
 800a486:	e7cd      	b.n	800a424 <_dtoa_r+0x6c4>
 800a488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a48a:	2a00      	cmp	r2, #0
 800a48c:	f000 80d0 	beq.w	800a630 <_dtoa_r+0x8d0>
 800a490:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a492:	2a01      	cmp	r2, #1
 800a494:	f300 80ae 	bgt.w	800a5f4 <_dtoa_r+0x894>
 800a498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a49a:	2a00      	cmp	r2, #0
 800a49c:	f000 80a6 	beq.w	800a5ec <_dtoa_r+0x88c>
 800a4a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a4a6:	9f06      	ldr	r7, [sp, #24]
 800a4a8:	9a06      	ldr	r2, [sp, #24]
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	441a      	add	r2, r3
 800a4ae:	9206      	str	r2, [sp, #24]
 800a4b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	441a      	add	r2, r3
 800a4b6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4b8:	f000 ff20 	bl	800b2fc <__i2b>
 800a4bc:	4606      	mov	r6, r0
 800a4be:	2f00      	cmp	r7, #0
 800a4c0:	dd0c      	ble.n	800a4dc <_dtoa_r+0x77c>
 800a4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dd09      	ble.n	800a4dc <_dtoa_r+0x77c>
 800a4c8:	42bb      	cmp	r3, r7
 800a4ca:	bfa8      	it	ge
 800a4cc:	463b      	movge	r3, r7
 800a4ce:	9a06      	ldr	r2, [sp, #24]
 800a4d0:	1aff      	subs	r7, r7, r3
 800a4d2:	1ad2      	subs	r2, r2, r3
 800a4d4:	9206      	str	r2, [sp, #24]
 800a4d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	9309      	str	r3, [sp, #36]	; 0x24
 800a4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4de:	b1f3      	cbz	r3, 800a51e <_dtoa_r+0x7be>
 800a4e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 80a8 	beq.w	800a638 <_dtoa_r+0x8d8>
 800a4e8:	2c00      	cmp	r4, #0
 800a4ea:	dd10      	ble.n	800a50e <_dtoa_r+0x7ae>
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f000 ffc1 	bl	800b478 <__pow5mult>
 800a4f6:	465a      	mov	r2, fp
 800a4f8:	4601      	mov	r1, r0
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f000 ff13 	bl	800b328 <__multiply>
 800a502:	4680      	mov	r8, r0
 800a504:	4659      	mov	r1, fp
 800a506:	4628      	mov	r0, r5
 800a508:	f000 fdf8 	bl	800b0fc <_Bfree>
 800a50c:	46c3      	mov	fp, r8
 800a50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a510:	1b1a      	subs	r2, r3, r4
 800a512:	d004      	beq.n	800a51e <_dtoa_r+0x7be>
 800a514:	4659      	mov	r1, fp
 800a516:	4628      	mov	r0, r5
 800a518:	f000 ffae 	bl	800b478 <__pow5mult>
 800a51c:	4683      	mov	fp, r0
 800a51e:	2101      	movs	r1, #1
 800a520:	4628      	mov	r0, r5
 800a522:	f000 feeb 	bl	800b2fc <__i2b>
 800a526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a528:	4604      	mov	r4, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f340 8086 	ble.w	800a63c <_dtoa_r+0x8dc>
 800a530:	461a      	mov	r2, r3
 800a532:	4601      	mov	r1, r0
 800a534:	4628      	mov	r0, r5
 800a536:	f000 ff9f 	bl	800b478 <__pow5mult>
 800a53a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a53c:	4604      	mov	r4, r0
 800a53e:	2b01      	cmp	r3, #1
 800a540:	dd7f      	ble.n	800a642 <_dtoa_r+0x8e2>
 800a542:	f04f 0800 	mov.w	r8, #0
 800a546:	6923      	ldr	r3, [r4, #16]
 800a548:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a54c:	6918      	ldr	r0, [r3, #16]
 800a54e:	f000 fe87 	bl	800b260 <__hi0bits>
 800a552:	f1c0 0020 	rsb	r0, r0, #32
 800a556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a558:	4418      	add	r0, r3
 800a55a:	f010 001f 	ands.w	r0, r0, #31
 800a55e:	f000 8092 	beq.w	800a686 <_dtoa_r+0x926>
 800a562:	f1c0 0320 	rsb	r3, r0, #32
 800a566:	2b04      	cmp	r3, #4
 800a568:	f340 808a 	ble.w	800a680 <_dtoa_r+0x920>
 800a56c:	f1c0 001c 	rsb	r0, r0, #28
 800a570:	9b06      	ldr	r3, [sp, #24]
 800a572:	4407      	add	r7, r0
 800a574:	4403      	add	r3, r0
 800a576:	9306      	str	r3, [sp, #24]
 800a578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57a:	4403      	add	r3, r0
 800a57c:	9309      	str	r3, [sp, #36]	; 0x24
 800a57e:	9b06      	ldr	r3, [sp, #24]
 800a580:	2b00      	cmp	r3, #0
 800a582:	dd05      	ble.n	800a590 <_dtoa_r+0x830>
 800a584:	4659      	mov	r1, fp
 800a586:	461a      	mov	r2, r3
 800a588:	4628      	mov	r0, r5
 800a58a:	f000 ffcf 	bl	800b52c <__lshift>
 800a58e:	4683      	mov	fp, r0
 800a590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	dd05      	ble.n	800a5a2 <_dtoa_r+0x842>
 800a596:	4621      	mov	r1, r4
 800a598:	461a      	mov	r2, r3
 800a59a:	4628      	mov	r0, r5
 800a59c:	f000 ffc6 	bl	800b52c <__lshift>
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d070      	beq.n	800a68a <_dtoa_r+0x92a>
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4658      	mov	r0, fp
 800a5ac:	f001 f82e 	bl	800b60c <__mcmp>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	da6a      	bge.n	800a68a <_dtoa_r+0x92a>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4659      	mov	r1, fp
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 fdc0 	bl	800b140 <__multadd>
 800a5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5c2:	4683      	mov	fp, r0
 800a5c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 8194 	beq.w	800a8f6 <_dtoa_r+0xb96>
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	220a      	movs	r2, #10
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f000 fdb3 	bl	800b140 <__multadd>
 800a5da:	f1b9 0f00 	cmp.w	r9, #0
 800a5de:	4606      	mov	r6, r0
 800a5e0:	f300 8093 	bgt.w	800a70a <_dtoa_r+0x9aa>
 800a5e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	dc57      	bgt.n	800a69a <_dtoa_r+0x93a>
 800a5ea:	e08e      	b.n	800a70a <_dtoa_r+0x9aa>
 800a5ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5f2:	e757      	b.n	800a4a4 <_dtoa_r+0x744>
 800a5f4:	9b08      	ldr	r3, [sp, #32]
 800a5f6:	1e5c      	subs	r4, r3, #1
 800a5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fa:	42a3      	cmp	r3, r4
 800a5fc:	bfb7      	itett	lt
 800a5fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a600:	1b1c      	subge	r4, r3, r4
 800a602:	1ae2      	sublt	r2, r4, r3
 800a604:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a606:	bfbe      	ittt	lt
 800a608:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a60a:	189b      	addlt	r3, r3, r2
 800a60c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	bfb8      	it	lt
 800a612:	2400      	movlt	r4, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	bfbb      	ittet	lt
 800a618:	9b06      	ldrlt	r3, [sp, #24]
 800a61a:	9a08      	ldrlt	r2, [sp, #32]
 800a61c:	9f06      	ldrge	r7, [sp, #24]
 800a61e:	1a9f      	sublt	r7, r3, r2
 800a620:	bfac      	ite	ge
 800a622:	9b08      	ldrge	r3, [sp, #32]
 800a624:	2300      	movlt	r3, #0
 800a626:	e73f      	b.n	800a4a8 <_dtoa_r+0x748>
 800a628:	3fe00000 	.word	0x3fe00000
 800a62c:	40240000 	.word	0x40240000
 800a630:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a632:	9f06      	ldr	r7, [sp, #24]
 800a634:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a636:	e742      	b.n	800a4be <_dtoa_r+0x75e>
 800a638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a63a:	e76b      	b.n	800a514 <_dtoa_r+0x7b4>
 800a63c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a63e:	2b01      	cmp	r3, #1
 800a640:	dc19      	bgt.n	800a676 <_dtoa_r+0x916>
 800a642:	9b04      	ldr	r3, [sp, #16]
 800a644:	b9bb      	cbnz	r3, 800a676 <_dtoa_r+0x916>
 800a646:	9b05      	ldr	r3, [sp, #20]
 800a648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a64c:	b99b      	cbnz	r3, 800a676 <_dtoa_r+0x916>
 800a64e:	9b05      	ldr	r3, [sp, #20]
 800a650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a654:	0d1b      	lsrs	r3, r3, #20
 800a656:	051b      	lsls	r3, r3, #20
 800a658:	b183      	cbz	r3, 800a67c <_dtoa_r+0x91c>
 800a65a:	f04f 0801 	mov.w	r8, #1
 800a65e:	9b06      	ldr	r3, [sp, #24]
 800a660:	3301      	adds	r3, #1
 800a662:	9306      	str	r3, [sp, #24]
 800a664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a666:	3301      	adds	r3, #1
 800a668:	9309      	str	r3, [sp, #36]	; 0x24
 800a66a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f47f af6a 	bne.w	800a546 <_dtoa_r+0x7e6>
 800a672:	2001      	movs	r0, #1
 800a674:	e76f      	b.n	800a556 <_dtoa_r+0x7f6>
 800a676:	f04f 0800 	mov.w	r8, #0
 800a67a:	e7f6      	b.n	800a66a <_dtoa_r+0x90a>
 800a67c:	4698      	mov	r8, r3
 800a67e:	e7f4      	b.n	800a66a <_dtoa_r+0x90a>
 800a680:	f43f af7d 	beq.w	800a57e <_dtoa_r+0x81e>
 800a684:	4618      	mov	r0, r3
 800a686:	301c      	adds	r0, #28
 800a688:	e772      	b.n	800a570 <_dtoa_r+0x810>
 800a68a:	9b08      	ldr	r3, [sp, #32]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dc36      	bgt.n	800a6fe <_dtoa_r+0x99e>
 800a690:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a692:	2b02      	cmp	r3, #2
 800a694:	dd33      	ble.n	800a6fe <_dtoa_r+0x99e>
 800a696:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a69a:	f1b9 0f00 	cmp.w	r9, #0
 800a69e:	d10d      	bne.n	800a6bc <_dtoa_r+0x95c>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	464b      	mov	r3, r9
 800a6a4:	2205      	movs	r2, #5
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f000 fd4a 	bl	800b140 <__multadd>
 800a6ac:	4601      	mov	r1, r0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4658      	mov	r0, fp
 800a6b2:	f000 ffab 	bl	800b60c <__mcmp>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	f73f adb8 	bgt.w	800a22c <_dtoa_r+0x4cc>
 800a6bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6be:	9f03      	ldr	r7, [sp, #12]
 800a6c0:	ea6f 0a03 	mvn.w	sl, r3
 800a6c4:	f04f 0800 	mov.w	r8, #0
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f000 fd16 	bl	800b0fc <_Bfree>
 800a6d0:	2e00      	cmp	r6, #0
 800a6d2:	f43f aea7 	beq.w	800a424 <_dtoa_r+0x6c4>
 800a6d6:	f1b8 0f00 	cmp.w	r8, #0
 800a6da:	d005      	beq.n	800a6e8 <_dtoa_r+0x988>
 800a6dc:	45b0      	cmp	r8, r6
 800a6de:	d003      	beq.n	800a6e8 <_dtoa_r+0x988>
 800a6e0:	4641      	mov	r1, r8
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f000 fd0a 	bl	800b0fc <_Bfree>
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f000 fd06 	bl	800b0fc <_Bfree>
 800a6f0:	e698      	b.n	800a424 <_dtoa_r+0x6c4>
 800a6f2:	2400      	movs	r4, #0
 800a6f4:	4626      	mov	r6, r4
 800a6f6:	e7e1      	b.n	800a6bc <_dtoa_r+0x95c>
 800a6f8:	46c2      	mov	sl, r8
 800a6fa:	4626      	mov	r6, r4
 800a6fc:	e596      	b.n	800a22c <_dtoa_r+0x4cc>
 800a6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 80fd 	beq.w	800a904 <_dtoa_r+0xba4>
 800a70a:	2f00      	cmp	r7, #0
 800a70c:	dd05      	ble.n	800a71a <_dtoa_r+0x9ba>
 800a70e:	4631      	mov	r1, r6
 800a710:	463a      	mov	r2, r7
 800a712:	4628      	mov	r0, r5
 800a714:	f000 ff0a 	bl	800b52c <__lshift>
 800a718:	4606      	mov	r6, r0
 800a71a:	f1b8 0f00 	cmp.w	r8, #0
 800a71e:	d05c      	beq.n	800a7da <_dtoa_r+0xa7a>
 800a720:	4628      	mov	r0, r5
 800a722:	6871      	ldr	r1, [r6, #4]
 800a724:	f000 fcaa 	bl	800b07c <_Balloc>
 800a728:	4607      	mov	r7, r0
 800a72a:	b928      	cbnz	r0, 800a738 <_dtoa_r+0x9d8>
 800a72c:	4602      	mov	r2, r0
 800a72e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a732:	4b7f      	ldr	r3, [pc, #508]	; (800a930 <_dtoa_r+0xbd0>)
 800a734:	f7ff bb28 	b.w	8009d88 <_dtoa_r+0x28>
 800a738:	6932      	ldr	r2, [r6, #16]
 800a73a:	f106 010c 	add.w	r1, r6, #12
 800a73e:	3202      	adds	r2, #2
 800a740:	0092      	lsls	r2, r2, #2
 800a742:	300c      	adds	r0, #12
 800a744:	f000 fc8c 	bl	800b060 <memcpy>
 800a748:	2201      	movs	r2, #1
 800a74a:	4639      	mov	r1, r7
 800a74c:	4628      	mov	r0, r5
 800a74e:	f000 feed 	bl	800b52c <__lshift>
 800a752:	46b0      	mov	r8, r6
 800a754:	4606      	mov	r6, r0
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	3301      	adds	r3, #1
 800a75a:	9308      	str	r3, [sp, #32]
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	444b      	add	r3, r9
 800a760:	930a      	str	r3, [sp, #40]	; 0x28
 800a762:	9b04      	ldr	r3, [sp, #16]
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	9309      	str	r3, [sp, #36]	; 0x24
 800a76a:	9b08      	ldr	r3, [sp, #32]
 800a76c:	4621      	mov	r1, r4
 800a76e:	3b01      	subs	r3, #1
 800a770:	4658      	mov	r0, fp
 800a772:	9304      	str	r3, [sp, #16]
 800a774:	f7ff fa68 	bl	8009c48 <quorem>
 800a778:	4603      	mov	r3, r0
 800a77a:	4641      	mov	r1, r8
 800a77c:	3330      	adds	r3, #48	; 0x30
 800a77e:	9006      	str	r0, [sp, #24]
 800a780:	4658      	mov	r0, fp
 800a782:	930b      	str	r3, [sp, #44]	; 0x2c
 800a784:	f000 ff42 	bl	800b60c <__mcmp>
 800a788:	4632      	mov	r2, r6
 800a78a:	4681      	mov	r9, r0
 800a78c:	4621      	mov	r1, r4
 800a78e:	4628      	mov	r0, r5
 800a790:	f000 ff58 	bl	800b644 <__mdiff>
 800a794:	68c2      	ldr	r2, [r0, #12]
 800a796:	4607      	mov	r7, r0
 800a798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a79a:	bb02      	cbnz	r2, 800a7de <_dtoa_r+0xa7e>
 800a79c:	4601      	mov	r1, r0
 800a79e:	4658      	mov	r0, fp
 800a7a0:	f000 ff34 	bl	800b60c <__mcmp>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a7b0:	f000 fca4 	bl	800b0fc <_Bfree>
 800a7b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7b8:	9f08      	ldr	r7, [sp, #32]
 800a7ba:	ea43 0102 	orr.w	r1, r3, r2
 800a7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c0:	430b      	orrs	r3, r1
 800a7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c4:	d10d      	bne.n	800a7e2 <_dtoa_r+0xa82>
 800a7c6:	2b39      	cmp	r3, #57	; 0x39
 800a7c8:	d029      	beq.n	800a81e <_dtoa_r+0xabe>
 800a7ca:	f1b9 0f00 	cmp.w	r9, #0
 800a7ce:	dd01      	ble.n	800a7d4 <_dtoa_r+0xa74>
 800a7d0:	9b06      	ldr	r3, [sp, #24]
 800a7d2:	3331      	adds	r3, #49	; 0x31
 800a7d4:	9a04      	ldr	r2, [sp, #16]
 800a7d6:	7013      	strb	r3, [r2, #0]
 800a7d8:	e776      	b.n	800a6c8 <_dtoa_r+0x968>
 800a7da:	4630      	mov	r0, r6
 800a7dc:	e7b9      	b.n	800a752 <_dtoa_r+0x9f2>
 800a7de:	2201      	movs	r2, #1
 800a7e0:	e7e2      	b.n	800a7a8 <_dtoa_r+0xa48>
 800a7e2:	f1b9 0f00 	cmp.w	r9, #0
 800a7e6:	db06      	blt.n	800a7f6 <_dtoa_r+0xa96>
 800a7e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a7ea:	ea41 0909 	orr.w	r9, r1, r9
 800a7ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7f0:	ea59 0101 	orrs.w	r1, r9, r1
 800a7f4:	d120      	bne.n	800a838 <_dtoa_r+0xad8>
 800a7f6:	2a00      	cmp	r2, #0
 800a7f8:	ddec      	ble.n	800a7d4 <_dtoa_r+0xa74>
 800a7fa:	4659      	mov	r1, fp
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	4628      	mov	r0, r5
 800a800:	9308      	str	r3, [sp, #32]
 800a802:	f000 fe93 	bl	800b52c <__lshift>
 800a806:	4621      	mov	r1, r4
 800a808:	4683      	mov	fp, r0
 800a80a:	f000 feff 	bl	800b60c <__mcmp>
 800a80e:	2800      	cmp	r0, #0
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	dc02      	bgt.n	800a81a <_dtoa_r+0xaba>
 800a814:	d1de      	bne.n	800a7d4 <_dtoa_r+0xa74>
 800a816:	07da      	lsls	r2, r3, #31
 800a818:	d5dc      	bpl.n	800a7d4 <_dtoa_r+0xa74>
 800a81a:	2b39      	cmp	r3, #57	; 0x39
 800a81c:	d1d8      	bne.n	800a7d0 <_dtoa_r+0xa70>
 800a81e:	2339      	movs	r3, #57	; 0x39
 800a820:	9a04      	ldr	r2, [sp, #16]
 800a822:	7013      	strb	r3, [r2, #0]
 800a824:	463b      	mov	r3, r7
 800a826:	461f      	mov	r7, r3
 800a828:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	2a39      	cmp	r2, #57	; 0x39
 800a830:	d050      	beq.n	800a8d4 <_dtoa_r+0xb74>
 800a832:	3201      	adds	r2, #1
 800a834:	701a      	strb	r2, [r3, #0]
 800a836:	e747      	b.n	800a6c8 <_dtoa_r+0x968>
 800a838:	2a00      	cmp	r2, #0
 800a83a:	dd03      	ble.n	800a844 <_dtoa_r+0xae4>
 800a83c:	2b39      	cmp	r3, #57	; 0x39
 800a83e:	d0ee      	beq.n	800a81e <_dtoa_r+0xabe>
 800a840:	3301      	adds	r3, #1
 800a842:	e7c7      	b.n	800a7d4 <_dtoa_r+0xa74>
 800a844:	9a08      	ldr	r2, [sp, #32]
 800a846:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a848:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a84c:	428a      	cmp	r2, r1
 800a84e:	d02a      	beq.n	800a8a6 <_dtoa_r+0xb46>
 800a850:	4659      	mov	r1, fp
 800a852:	2300      	movs	r3, #0
 800a854:	220a      	movs	r2, #10
 800a856:	4628      	mov	r0, r5
 800a858:	f000 fc72 	bl	800b140 <__multadd>
 800a85c:	45b0      	cmp	r8, r6
 800a85e:	4683      	mov	fp, r0
 800a860:	f04f 0300 	mov.w	r3, #0
 800a864:	f04f 020a 	mov.w	r2, #10
 800a868:	4641      	mov	r1, r8
 800a86a:	4628      	mov	r0, r5
 800a86c:	d107      	bne.n	800a87e <_dtoa_r+0xb1e>
 800a86e:	f000 fc67 	bl	800b140 <__multadd>
 800a872:	4680      	mov	r8, r0
 800a874:	4606      	mov	r6, r0
 800a876:	9b08      	ldr	r3, [sp, #32]
 800a878:	3301      	adds	r3, #1
 800a87a:	9308      	str	r3, [sp, #32]
 800a87c:	e775      	b.n	800a76a <_dtoa_r+0xa0a>
 800a87e:	f000 fc5f 	bl	800b140 <__multadd>
 800a882:	4631      	mov	r1, r6
 800a884:	4680      	mov	r8, r0
 800a886:	2300      	movs	r3, #0
 800a888:	220a      	movs	r2, #10
 800a88a:	4628      	mov	r0, r5
 800a88c:	f000 fc58 	bl	800b140 <__multadd>
 800a890:	4606      	mov	r6, r0
 800a892:	e7f0      	b.n	800a876 <_dtoa_r+0xb16>
 800a894:	f1b9 0f00 	cmp.w	r9, #0
 800a898:	bfcc      	ite	gt
 800a89a:	464f      	movgt	r7, r9
 800a89c:	2701      	movle	r7, #1
 800a89e:	f04f 0800 	mov.w	r8, #0
 800a8a2:	9a03      	ldr	r2, [sp, #12]
 800a8a4:	4417      	add	r7, r2
 800a8a6:	4659      	mov	r1, fp
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	9308      	str	r3, [sp, #32]
 800a8ae:	f000 fe3d 	bl	800b52c <__lshift>
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4683      	mov	fp, r0
 800a8b6:	f000 fea9 	bl	800b60c <__mcmp>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	dcb2      	bgt.n	800a824 <_dtoa_r+0xac4>
 800a8be:	d102      	bne.n	800a8c6 <_dtoa_r+0xb66>
 800a8c0:	9b08      	ldr	r3, [sp, #32]
 800a8c2:	07db      	lsls	r3, r3, #31
 800a8c4:	d4ae      	bmi.n	800a824 <_dtoa_r+0xac4>
 800a8c6:	463b      	mov	r3, r7
 800a8c8:	461f      	mov	r7, r3
 800a8ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8ce:	2a30      	cmp	r2, #48	; 0x30
 800a8d0:	d0fa      	beq.n	800a8c8 <_dtoa_r+0xb68>
 800a8d2:	e6f9      	b.n	800a6c8 <_dtoa_r+0x968>
 800a8d4:	9a03      	ldr	r2, [sp, #12]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d1a5      	bne.n	800a826 <_dtoa_r+0xac6>
 800a8da:	2331      	movs	r3, #49	; 0x31
 800a8dc:	f10a 0a01 	add.w	sl, sl, #1
 800a8e0:	e779      	b.n	800a7d6 <_dtoa_r+0xa76>
 800a8e2:	4b14      	ldr	r3, [pc, #80]	; (800a934 <_dtoa_r+0xbd4>)
 800a8e4:	f7ff baa8 	b.w	8009e38 <_dtoa_r+0xd8>
 800a8e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f47f aa81 	bne.w	8009df2 <_dtoa_r+0x92>
 800a8f0:	4b11      	ldr	r3, [pc, #68]	; (800a938 <_dtoa_r+0xbd8>)
 800a8f2:	f7ff baa1 	b.w	8009e38 <_dtoa_r+0xd8>
 800a8f6:	f1b9 0f00 	cmp.w	r9, #0
 800a8fa:	dc03      	bgt.n	800a904 <_dtoa_r+0xba4>
 800a8fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	f73f aecb 	bgt.w	800a69a <_dtoa_r+0x93a>
 800a904:	9f03      	ldr	r7, [sp, #12]
 800a906:	4621      	mov	r1, r4
 800a908:	4658      	mov	r0, fp
 800a90a:	f7ff f99d 	bl	8009c48 <quorem>
 800a90e:	9a03      	ldr	r2, [sp, #12]
 800a910:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a914:	f807 3b01 	strb.w	r3, [r7], #1
 800a918:	1aba      	subs	r2, r7, r2
 800a91a:	4591      	cmp	r9, r2
 800a91c:	ddba      	ble.n	800a894 <_dtoa_r+0xb34>
 800a91e:	4659      	mov	r1, fp
 800a920:	2300      	movs	r3, #0
 800a922:	220a      	movs	r2, #10
 800a924:	4628      	mov	r0, r5
 800a926:	f000 fc0b 	bl	800b140 <__multadd>
 800a92a:	4683      	mov	fp, r0
 800a92c:	e7eb      	b.n	800a906 <_dtoa_r+0xba6>
 800a92e:	bf00      	nop
 800a930:	0800cd58 	.word	0x0800cd58
 800a934:	0800cb5c 	.word	0x0800cb5c
 800a938:	0800ccd9 	.word	0x0800ccd9

0800a93c <rshift>:
 800a93c:	6903      	ldr	r3, [r0, #16]
 800a93e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a942:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a946:	f100 0414 	add.w	r4, r0, #20
 800a94a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a94e:	dd46      	ble.n	800a9de <rshift+0xa2>
 800a950:	f011 011f 	ands.w	r1, r1, #31
 800a954:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a958:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a95c:	d10c      	bne.n	800a978 <rshift+0x3c>
 800a95e:	4629      	mov	r1, r5
 800a960:	f100 0710 	add.w	r7, r0, #16
 800a964:	42b1      	cmp	r1, r6
 800a966:	d335      	bcc.n	800a9d4 <rshift+0x98>
 800a968:	1a9b      	subs	r3, r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	1eea      	subs	r2, r5, #3
 800a96e:	4296      	cmp	r6, r2
 800a970:	bf38      	it	cc
 800a972:	2300      	movcc	r3, #0
 800a974:	4423      	add	r3, r4
 800a976:	e015      	b.n	800a9a4 <rshift+0x68>
 800a978:	46a1      	mov	r9, r4
 800a97a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a97e:	f1c1 0820 	rsb	r8, r1, #32
 800a982:	40cf      	lsrs	r7, r1
 800a984:	f105 0e04 	add.w	lr, r5, #4
 800a988:	4576      	cmp	r6, lr
 800a98a:	46f4      	mov	ip, lr
 800a98c:	d816      	bhi.n	800a9bc <rshift+0x80>
 800a98e:	1a9a      	subs	r2, r3, r2
 800a990:	0092      	lsls	r2, r2, #2
 800a992:	3a04      	subs	r2, #4
 800a994:	3501      	adds	r5, #1
 800a996:	42ae      	cmp	r6, r5
 800a998:	bf38      	it	cc
 800a99a:	2200      	movcc	r2, #0
 800a99c:	18a3      	adds	r3, r4, r2
 800a99e:	50a7      	str	r7, [r4, r2]
 800a9a0:	b107      	cbz	r7, 800a9a4 <rshift+0x68>
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	eba3 0204 	sub.w	r2, r3, r4
 800a9aa:	bf08      	it	eq
 800a9ac:	2300      	moveq	r3, #0
 800a9ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9b2:	6102      	str	r2, [r0, #16]
 800a9b4:	bf08      	it	eq
 800a9b6:	6143      	streq	r3, [r0, #20]
 800a9b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9bc:	f8dc c000 	ldr.w	ip, [ip]
 800a9c0:	fa0c fc08 	lsl.w	ip, ip, r8
 800a9c4:	ea4c 0707 	orr.w	r7, ip, r7
 800a9c8:	f849 7b04 	str.w	r7, [r9], #4
 800a9cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9d0:	40cf      	lsrs	r7, r1
 800a9d2:	e7d9      	b.n	800a988 <rshift+0x4c>
 800a9d4:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9d8:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9dc:	e7c2      	b.n	800a964 <rshift+0x28>
 800a9de:	4623      	mov	r3, r4
 800a9e0:	e7e0      	b.n	800a9a4 <rshift+0x68>

0800a9e2 <__hexdig_fun>:
 800a9e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a9e6:	2b09      	cmp	r3, #9
 800a9e8:	d802      	bhi.n	800a9f0 <__hexdig_fun+0xe>
 800a9ea:	3820      	subs	r0, #32
 800a9ec:	b2c0      	uxtb	r0, r0
 800a9ee:	4770      	bx	lr
 800a9f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a9f4:	2b05      	cmp	r3, #5
 800a9f6:	d801      	bhi.n	800a9fc <__hexdig_fun+0x1a>
 800a9f8:	3847      	subs	r0, #71	; 0x47
 800a9fa:	e7f7      	b.n	800a9ec <__hexdig_fun+0xa>
 800a9fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa00:	2b05      	cmp	r3, #5
 800aa02:	d801      	bhi.n	800aa08 <__hexdig_fun+0x26>
 800aa04:	3827      	subs	r0, #39	; 0x27
 800aa06:	e7f1      	b.n	800a9ec <__hexdig_fun+0xa>
 800aa08:	2000      	movs	r0, #0
 800aa0a:	4770      	bx	lr

0800aa0c <__gethex>:
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa10:	b08b      	sub	sp, #44	; 0x2c
 800aa12:	9305      	str	r3, [sp, #20]
 800aa14:	4bb2      	ldr	r3, [pc, #712]	; (800ace0 <__gethex+0x2d4>)
 800aa16:	9002      	str	r0, [sp, #8]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	468b      	mov	fp, r1
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	4690      	mov	r8, r2
 800aa20:	9303      	str	r3, [sp, #12]
 800aa22:	f7f5 fb95 	bl	8000150 <strlen>
 800aa26:	4682      	mov	sl, r0
 800aa28:	9b03      	ldr	r3, [sp, #12]
 800aa2a:	f8db 2000 	ldr.w	r2, [fp]
 800aa2e:	4403      	add	r3, r0
 800aa30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aa34:	9306      	str	r3, [sp, #24]
 800aa36:	1c93      	adds	r3, r2, #2
 800aa38:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aa3c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aa40:	32fe      	adds	r2, #254	; 0xfe
 800aa42:	18d1      	adds	r1, r2, r3
 800aa44:	461f      	mov	r7, r3
 800aa46:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa4a:	9101      	str	r1, [sp, #4]
 800aa4c:	2830      	cmp	r0, #48	; 0x30
 800aa4e:	d0f8      	beq.n	800aa42 <__gethex+0x36>
 800aa50:	f7ff ffc7 	bl	800a9e2 <__hexdig_fun>
 800aa54:	4604      	mov	r4, r0
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d13a      	bne.n	800aad0 <__gethex+0xc4>
 800aa5a:	4652      	mov	r2, sl
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	9903      	ldr	r1, [sp, #12]
 800aa60:	f001 fa26 	bl	800beb0 <strncmp>
 800aa64:	4605      	mov	r5, r0
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d166      	bne.n	800ab38 <__gethex+0x12c>
 800aa6a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aa6e:	eb07 060a 	add.w	r6, r7, sl
 800aa72:	f7ff ffb6 	bl	800a9e2 <__hexdig_fun>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d060      	beq.n	800ab3c <__gethex+0x130>
 800aa7a:	4633      	mov	r3, r6
 800aa7c:	7818      	ldrb	r0, [r3, #0]
 800aa7e:	461f      	mov	r7, r3
 800aa80:	2830      	cmp	r0, #48	; 0x30
 800aa82:	f103 0301 	add.w	r3, r3, #1
 800aa86:	d0f9      	beq.n	800aa7c <__gethex+0x70>
 800aa88:	f7ff ffab 	bl	800a9e2 <__hexdig_fun>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	fab0 f480 	clz	r4, r0
 800aa92:	4635      	mov	r5, r6
 800aa94:	0964      	lsrs	r4, r4, #5
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	463a      	mov	r2, r7
 800aa9a:	4616      	mov	r6, r2
 800aa9c:	7830      	ldrb	r0, [r6, #0]
 800aa9e:	3201      	adds	r2, #1
 800aaa0:	f7ff ff9f 	bl	800a9e2 <__hexdig_fun>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d1f8      	bne.n	800aa9a <__gethex+0x8e>
 800aaa8:	4652      	mov	r2, sl
 800aaaa:	4630      	mov	r0, r6
 800aaac:	9903      	ldr	r1, [sp, #12]
 800aaae:	f001 f9ff 	bl	800beb0 <strncmp>
 800aab2:	b980      	cbnz	r0, 800aad6 <__gethex+0xca>
 800aab4:	b94d      	cbnz	r5, 800aaca <__gethex+0xbe>
 800aab6:	eb06 050a 	add.w	r5, r6, sl
 800aaba:	462a      	mov	r2, r5
 800aabc:	4616      	mov	r6, r2
 800aabe:	7830      	ldrb	r0, [r6, #0]
 800aac0:	3201      	adds	r2, #1
 800aac2:	f7ff ff8e 	bl	800a9e2 <__hexdig_fun>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d1f8      	bne.n	800aabc <__gethex+0xb0>
 800aaca:	1bad      	subs	r5, r5, r6
 800aacc:	00ad      	lsls	r5, r5, #2
 800aace:	e004      	b.n	800aada <__gethex+0xce>
 800aad0:	2400      	movs	r4, #0
 800aad2:	4625      	mov	r5, r4
 800aad4:	e7e0      	b.n	800aa98 <__gethex+0x8c>
 800aad6:	2d00      	cmp	r5, #0
 800aad8:	d1f7      	bne.n	800aaca <__gethex+0xbe>
 800aada:	7833      	ldrb	r3, [r6, #0]
 800aadc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aae0:	2b50      	cmp	r3, #80	; 0x50
 800aae2:	d139      	bne.n	800ab58 <__gethex+0x14c>
 800aae4:	7873      	ldrb	r3, [r6, #1]
 800aae6:	2b2b      	cmp	r3, #43	; 0x2b
 800aae8:	d02a      	beq.n	800ab40 <__gethex+0x134>
 800aaea:	2b2d      	cmp	r3, #45	; 0x2d
 800aaec:	d02c      	beq.n	800ab48 <__gethex+0x13c>
 800aaee:	f04f 0900 	mov.w	r9, #0
 800aaf2:	1c71      	adds	r1, r6, #1
 800aaf4:	7808      	ldrb	r0, [r1, #0]
 800aaf6:	f7ff ff74 	bl	800a9e2 <__hexdig_fun>
 800aafa:	1e43      	subs	r3, r0, #1
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b18      	cmp	r3, #24
 800ab00:	d82a      	bhi.n	800ab58 <__gethex+0x14c>
 800ab02:	f1a0 0210 	sub.w	r2, r0, #16
 800ab06:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab0a:	f7ff ff6a 	bl	800a9e2 <__hexdig_fun>
 800ab0e:	1e43      	subs	r3, r0, #1
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b18      	cmp	r3, #24
 800ab14:	d91b      	bls.n	800ab4e <__gethex+0x142>
 800ab16:	f1b9 0f00 	cmp.w	r9, #0
 800ab1a:	d000      	beq.n	800ab1e <__gethex+0x112>
 800ab1c:	4252      	negs	r2, r2
 800ab1e:	4415      	add	r5, r2
 800ab20:	f8cb 1000 	str.w	r1, [fp]
 800ab24:	b1d4      	cbz	r4, 800ab5c <__gethex+0x150>
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	bf14      	ite	ne
 800ab2c:	2700      	movne	r7, #0
 800ab2e:	2706      	moveq	r7, #6
 800ab30:	4638      	mov	r0, r7
 800ab32:	b00b      	add	sp, #44	; 0x2c
 800ab34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab38:	463e      	mov	r6, r7
 800ab3a:	4625      	mov	r5, r4
 800ab3c:	2401      	movs	r4, #1
 800ab3e:	e7cc      	b.n	800aada <__gethex+0xce>
 800ab40:	f04f 0900 	mov.w	r9, #0
 800ab44:	1cb1      	adds	r1, r6, #2
 800ab46:	e7d5      	b.n	800aaf4 <__gethex+0xe8>
 800ab48:	f04f 0901 	mov.w	r9, #1
 800ab4c:	e7fa      	b.n	800ab44 <__gethex+0x138>
 800ab4e:	230a      	movs	r3, #10
 800ab50:	fb03 0202 	mla	r2, r3, r2, r0
 800ab54:	3a10      	subs	r2, #16
 800ab56:	e7d6      	b.n	800ab06 <__gethex+0xfa>
 800ab58:	4631      	mov	r1, r6
 800ab5a:	e7e1      	b.n	800ab20 <__gethex+0x114>
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	1bf3      	subs	r3, r6, r7
 800ab60:	3b01      	subs	r3, #1
 800ab62:	2b07      	cmp	r3, #7
 800ab64:	dc0a      	bgt.n	800ab7c <__gethex+0x170>
 800ab66:	9802      	ldr	r0, [sp, #8]
 800ab68:	f000 fa88 	bl	800b07c <_Balloc>
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	b940      	cbnz	r0, 800ab82 <__gethex+0x176>
 800ab70:	4602      	mov	r2, r0
 800ab72:	21de      	movs	r1, #222	; 0xde
 800ab74:	4b5b      	ldr	r3, [pc, #364]	; (800ace4 <__gethex+0x2d8>)
 800ab76:	485c      	ldr	r0, [pc, #368]	; (800ace8 <__gethex+0x2dc>)
 800ab78:	f001 f9bc 	bl	800bef4 <__assert_func>
 800ab7c:	3101      	adds	r1, #1
 800ab7e:	105b      	asrs	r3, r3, #1
 800ab80:	e7ef      	b.n	800ab62 <__gethex+0x156>
 800ab82:	f04f 0b00 	mov.w	fp, #0
 800ab86:	f100 0914 	add.w	r9, r0, #20
 800ab8a:	f1ca 0301 	rsb	r3, sl, #1
 800ab8e:	f8cd 9010 	str.w	r9, [sp, #16]
 800ab92:	f8cd b004 	str.w	fp, [sp, #4]
 800ab96:	9308      	str	r3, [sp, #32]
 800ab98:	42b7      	cmp	r7, r6
 800ab9a:	d33f      	bcc.n	800ac1c <__gethex+0x210>
 800ab9c:	9f04      	ldr	r7, [sp, #16]
 800ab9e:	9b01      	ldr	r3, [sp, #4]
 800aba0:	f847 3b04 	str.w	r3, [r7], #4
 800aba4:	eba7 0709 	sub.w	r7, r7, r9
 800aba8:	10bf      	asrs	r7, r7, #2
 800abaa:	6127      	str	r7, [r4, #16]
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fb57 	bl	800b260 <__hi0bits>
 800abb2:	017f      	lsls	r7, r7, #5
 800abb4:	f8d8 6000 	ldr.w	r6, [r8]
 800abb8:	1a3f      	subs	r7, r7, r0
 800abba:	42b7      	cmp	r7, r6
 800abbc:	dd62      	ble.n	800ac84 <__gethex+0x278>
 800abbe:	1bbf      	subs	r7, r7, r6
 800abc0:	4639      	mov	r1, r7
 800abc2:	4620      	mov	r0, r4
 800abc4:	f000 fef1 	bl	800b9aa <__any_on>
 800abc8:	4682      	mov	sl, r0
 800abca:	b1a8      	cbz	r0, 800abf8 <__gethex+0x1ec>
 800abcc:	f04f 0a01 	mov.w	sl, #1
 800abd0:	1e7b      	subs	r3, r7, #1
 800abd2:	1159      	asrs	r1, r3, #5
 800abd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800abd8:	f003 021f 	and.w	r2, r3, #31
 800abdc:	fa0a f202 	lsl.w	r2, sl, r2
 800abe0:	420a      	tst	r2, r1
 800abe2:	d009      	beq.n	800abf8 <__gethex+0x1ec>
 800abe4:	4553      	cmp	r3, sl
 800abe6:	dd05      	ble.n	800abf4 <__gethex+0x1e8>
 800abe8:	4620      	mov	r0, r4
 800abea:	1eb9      	subs	r1, r7, #2
 800abec:	f000 fedd 	bl	800b9aa <__any_on>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d144      	bne.n	800ac7e <__gethex+0x272>
 800abf4:	f04f 0a02 	mov.w	sl, #2
 800abf8:	4639      	mov	r1, r7
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7ff fe9e 	bl	800a93c <rshift>
 800ac00:	443d      	add	r5, r7
 800ac02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac06:	42ab      	cmp	r3, r5
 800ac08:	da4a      	bge.n	800aca0 <__gethex+0x294>
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	9802      	ldr	r0, [sp, #8]
 800ac0e:	f000 fa75 	bl	800b0fc <_Bfree>
 800ac12:	2300      	movs	r3, #0
 800ac14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac16:	27a3      	movs	r7, #163	; 0xa3
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	e789      	b.n	800ab30 <__gethex+0x124>
 800ac1c:	1e73      	subs	r3, r6, #1
 800ac1e:	9a06      	ldr	r2, [sp, #24]
 800ac20:	9307      	str	r3, [sp, #28]
 800ac22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d019      	beq.n	800ac5e <__gethex+0x252>
 800ac2a:	f1bb 0f20 	cmp.w	fp, #32
 800ac2e:	d107      	bne.n	800ac40 <__gethex+0x234>
 800ac30:	9b04      	ldr	r3, [sp, #16]
 800ac32:	9a01      	ldr	r2, [sp, #4]
 800ac34:	f843 2b04 	str.w	r2, [r3], #4
 800ac38:	9304      	str	r3, [sp, #16]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	469b      	mov	fp, r3
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ac44:	f7ff fecd 	bl	800a9e2 <__hexdig_fun>
 800ac48:	9b01      	ldr	r3, [sp, #4]
 800ac4a:	f000 000f 	and.w	r0, r0, #15
 800ac4e:	fa00 f00b 	lsl.w	r0, r0, fp
 800ac52:	4303      	orrs	r3, r0
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	f10b 0b04 	add.w	fp, fp, #4
 800ac5a:	9b07      	ldr	r3, [sp, #28]
 800ac5c:	e00d      	b.n	800ac7a <__gethex+0x26e>
 800ac5e:	9a08      	ldr	r2, [sp, #32]
 800ac60:	1e73      	subs	r3, r6, #1
 800ac62:	4413      	add	r3, r2
 800ac64:	42bb      	cmp	r3, r7
 800ac66:	d3e0      	bcc.n	800ac2a <__gethex+0x21e>
 800ac68:	4618      	mov	r0, r3
 800ac6a:	4652      	mov	r2, sl
 800ac6c:	9903      	ldr	r1, [sp, #12]
 800ac6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac70:	f001 f91e 	bl	800beb0 <strncmp>
 800ac74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d1d7      	bne.n	800ac2a <__gethex+0x21e>
 800ac7a:	461e      	mov	r6, r3
 800ac7c:	e78c      	b.n	800ab98 <__gethex+0x18c>
 800ac7e:	f04f 0a03 	mov.w	sl, #3
 800ac82:	e7b9      	b.n	800abf8 <__gethex+0x1ec>
 800ac84:	da09      	bge.n	800ac9a <__gethex+0x28e>
 800ac86:	1bf7      	subs	r7, r6, r7
 800ac88:	4621      	mov	r1, r4
 800ac8a:	463a      	mov	r2, r7
 800ac8c:	9802      	ldr	r0, [sp, #8]
 800ac8e:	f000 fc4d 	bl	800b52c <__lshift>
 800ac92:	4604      	mov	r4, r0
 800ac94:	1bed      	subs	r5, r5, r7
 800ac96:	f100 0914 	add.w	r9, r0, #20
 800ac9a:	f04f 0a00 	mov.w	sl, #0
 800ac9e:	e7b0      	b.n	800ac02 <__gethex+0x1f6>
 800aca0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aca4:	42a8      	cmp	r0, r5
 800aca6:	dd72      	ble.n	800ad8e <__gethex+0x382>
 800aca8:	1b45      	subs	r5, r0, r5
 800acaa:	42ae      	cmp	r6, r5
 800acac:	dc35      	bgt.n	800ad1a <__gethex+0x30e>
 800acae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d029      	beq.n	800ad0a <__gethex+0x2fe>
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d02b      	beq.n	800ad12 <__gethex+0x306>
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d11c      	bne.n	800acf8 <__gethex+0x2ec>
 800acbe:	42ae      	cmp	r6, r5
 800acc0:	d11a      	bne.n	800acf8 <__gethex+0x2ec>
 800acc2:	2e01      	cmp	r6, #1
 800acc4:	d112      	bne.n	800acec <__gethex+0x2e0>
 800acc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800acca:	9a05      	ldr	r2, [sp, #20]
 800accc:	2762      	movs	r7, #98	; 0x62
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	2301      	movs	r3, #1
 800acd2:	6123      	str	r3, [r4, #16]
 800acd4:	f8c9 3000 	str.w	r3, [r9]
 800acd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acda:	601c      	str	r4, [r3, #0]
 800acdc:	e728      	b.n	800ab30 <__gethex+0x124>
 800acde:	bf00      	nop
 800ace0:	0800cdd0 	.word	0x0800cdd0
 800ace4:	0800cd58 	.word	0x0800cd58
 800ace8:	0800cd69 	.word	0x0800cd69
 800acec:	4620      	mov	r0, r4
 800acee:	1e71      	subs	r1, r6, #1
 800acf0:	f000 fe5b 	bl	800b9aa <__any_on>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d1e6      	bne.n	800acc6 <__gethex+0x2ba>
 800acf8:	4621      	mov	r1, r4
 800acfa:	9802      	ldr	r0, [sp, #8]
 800acfc:	f000 f9fe 	bl	800b0fc <_Bfree>
 800ad00:	2300      	movs	r3, #0
 800ad02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad04:	2750      	movs	r7, #80	; 0x50
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	e712      	b.n	800ab30 <__gethex+0x124>
 800ad0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1f3      	bne.n	800acf8 <__gethex+0x2ec>
 800ad10:	e7d9      	b.n	800acc6 <__gethex+0x2ba>
 800ad12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d1d6      	bne.n	800acc6 <__gethex+0x2ba>
 800ad18:	e7ee      	b.n	800acf8 <__gethex+0x2ec>
 800ad1a:	1e6f      	subs	r7, r5, #1
 800ad1c:	f1ba 0f00 	cmp.w	sl, #0
 800ad20:	d132      	bne.n	800ad88 <__gethex+0x37c>
 800ad22:	b127      	cbz	r7, 800ad2e <__gethex+0x322>
 800ad24:	4639      	mov	r1, r7
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 fe3f 	bl	800b9aa <__any_on>
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	2101      	movs	r1, #1
 800ad30:	117b      	asrs	r3, r7, #5
 800ad32:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ad36:	f007 071f 	and.w	r7, r7, #31
 800ad3a:	fa01 f707 	lsl.w	r7, r1, r7
 800ad3e:	421f      	tst	r7, r3
 800ad40:	f04f 0702 	mov.w	r7, #2
 800ad44:	4629      	mov	r1, r5
 800ad46:	4620      	mov	r0, r4
 800ad48:	bf18      	it	ne
 800ad4a:	f04a 0a02 	orrne.w	sl, sl, #2
 800ad4e:	1b76      	subs	r6, r6, r5
 800ad50:	f7ff fdf4 	bl	800a93c <rshift>
 800ad54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad58:	f1ba 0f00 	cmp.w	sl, #0
 800ad5c:	d048      	beq.n	800adf0 <__gethex+0x3e4>
 800ad5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d015      	beq.n	800ad92 <__gethex+0x386>
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d017      	beq.n	800ad9a <__gethex+0x38e>
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d109      	bne.n	800ad82 <__gethex+0x376>
 800ad6e:	f01a 0f02 	tst.w	sl, #2
 800ad72:	d006      	beq.n	800ad82 <__gethex+0x376>
 800ad74:	f8d9 0000 	ldr.w	r0, [r9]
 800ad78:	ea4a 0a00 	orr.w	sl, sl, r0
 800ad7c:	f01a 0f01 	tst.w	sl, #1
 800ad80:	d10e      	bne.n	800ada0 <__gethex+0x394>
 800ad82:	f047 0710 	orr.w	r7, r7, #16
 800ad86:	e033      	b.n	800adf0 <__gethex+0x3e4>
 800ad88:	f04f 0a01 	mov.w	sl, #1
 800ad8c:	e7cf      	b.n	800ad2e <__gethex+0x322>
 800ad8e:	2701      	movs	r7, #1
 800ad90:	e7e2      	b.n	800ad58 <__gethex+0x34c>
 800ad92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad94:	f1c3 0301 	rsb	r3, r3, #1
 800ad98:	9315      	str	r3, [sp, #84]	; 0x54
 800ad9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0f0      	beq.n	800ad82 <__gethex+0x376>
 800ada0:	f04f 0c00 	mov.w	ip, #0
 800ada4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ada8:	f104 0314 	add.w	r3, r4, #20
 800adac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800adbe:	d01c      	beq.n	800adfa <__gethex+0x3ee>
 800adc0:	3201      	adds	r2, #1
 800adc2:	6002      	str	r2, [r0, #0]
 800adc4:	2f02      	cmp	r7, #2
 800adc6:	f104 0314 	add.w	r3, r4, #20
 800adca:	d13d      	bne.n	800ae48 <__gethex+0x43c>
 800adcc:	f8d8 2000 	ldr.w	r2, [r8]
 800add0:	3a01      	subs	r2, #1
 800add2:	42b2      	cmp	r2, r6
 800add4:	d10a      	bne.n	800adec <__gethex+0x3e0>
 800add6:	2201      	movs	r2, #1
 800add8:	1171      	asrs	r1, r6, #5
 800adda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adde:	f006 061f 	and.w	r6, r6, #31
 800ade2:	fa02 f606 	lsl.w	r6, r2, r6
 800ade6:	421e      	tst	r6, r3
 800ade8:	bf18      	it	ne
 800adea:	4617      	movne	r7, r2
 800adec:	f047 0720 	orr.w	r7, r7, #32
 800adf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adf2:	601c      	str	r4, [r3, #0]
 800adf4:	9b05      	ldr	r3, [sp, #20]
 800adf6:	601d      	str	r5, [r3, #0]
 800adf8:	e69a      	b.n	800ab30 <__gethex+0x124>
 800adfa:	4299      	cmp	r1, r3
 800adfc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae00:	d8d8      	bhi.n	800adb4 <__gethex+0x3a8>
 800ae02:	68a3      	ldr	r3, [r4, #8]
 800ae04:	459b      	cmp	fp, r3
 800ae06:	db17      	blt.n	800ae38 <__gethex+0x42c>
 800ae08:	6861      	ldr	r1, [r4, #4]
 800ae0a:	9802      	ldr	r0, [sp, #8]
 800ae0c:	3101      	adds	r1, #1
 800ae0e:	f000 f935 	bl	800b07c <_Balloc>
 800ae12:	4681      	mov	r9, r0
 800ae14:	b918      	cbnz	r0, 800ae1e <__gethex+0x412>
 800ae16:	4602      	mov	r2, r0
 800ae18:	2184      	movs	r1, #132	; 0x84
 800ae1a:	4b19      	ldr	r3, [pc, #100]	; (800ae80 <__gethex+0x474>)
 800ae1c:	e6ab      	b.n	800ab76 <__gethex+0x16a>
 800ae1e:	6922      	ldr	r2, [r4, #16]
 800ae20:	f104 010c 	add.w	r1, r4, #12
 800ae24:	3202      	adds	r2, #2
 800ae26:	0092      	lsls	r2, r2, #2
 800ae28:	300c      	adds	r0, #12
 800ae2a:	f000 f919 	bl	800b060 <memcpy>
 800ae2e:	4621      	mov	r1, r4
 800ae30:	9802      	ldr	r0, [sp, #8]
 800ae32:	f000 f963 	bl	800b0fc <_Bfree>
 800ae36:	464c      	mov	r4, r9
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	6122      	str	r2, [r4, #16]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae44:	615a      	str	r2, [r3, #20]
 800ae46:	e7bd      	b.n	800adc4 <__gethex+0x3b8>
 800ae48:	6922      	ldr	r2, [r4, #16]
 800ae4a:	455a      	cmp	r2, fp
 800ae4c:	dd0b      	ble.n	800ae66 <__gethex+0x45a>
 800ae4e:	2101      	movs	r1, #1
 800ae50:	4620      	mov	r0, r4
 800ae52:	f7ff fd73 	bl	800a93c <rshift>
 800ae56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae5a:	3501      	adds	r5, #1
 800ae5c:	42ab      	cmp	r3, r5
 800ae5e:	f6ff aed4 	blt.w	800ac0a <__gethex+0x1fe>
 800ae62:	2701      	movs	r7, #1
 800ae64:	e7c2      	b.n	800adec <__gethex+0x3e0>
 800ae66:	f016 061f 	ands.w	r6, r6, #31
 800ae6a:	d0fa      	beq.n	800ae62 <__gethex+0x456>
 800ae6c:	4453      	add	r3, sl
 800ae6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae72:	f000 f9f5 	bl	800b260 <__hi0bits>
 800ae76:	f1c6 0620 	rsb	r6, r6, #32
 800ae7a:	42b0      	cmp	r0, r6
 800ae7c:	dbe7      	blt.n	800ae4e <__gethex+0x442>
 800ae7e:	e7f0      	b.n	800ae62 <__gethex+0x456>
 800ae80:	0800cd58 	.word	0x0800cd58

0800ae84 <L_shift>:
 800ae84:	f1c2 0208 	rsb	r2, r2, #8
 800ae88:	0092      	lsls	r2, r2, #2
 800ae8a:	b570      	push	{r4, r5, r6, lr}
 800ae8c:	f1c2 0620 	rsb	r6, r2, #32
 800ae90:	6843      	ldr	r3, [r0, #4]
 800ae92:	6804      	ldr	r4, [r0, #0]
 800ae94:	fa03 f506 	lsl.w	r5, r3, r6
 800ae98:	432c      	orrs	r4, r5
 800ae9a:	40d3      	lsrs	r3, r2
 800ae9c:	6004      	str	r4, [r0, #0]
 800ae9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aea2:	4288      	cmp	r0, r1
 800aea4:	d3f4      	bcc.n	800ae90 <L_shift+0xc>
 800aea6:	bd70      	pop	{r4, r5, r6, pc}

0800aea8 <__match>:
 800aea8:	b530      	push	{r4, r5, lr}
 800aeaa:	6803      	ldr	r3, [r0, #0]
 800aeac:	3301      	adds	r3, #1
 800aeae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeb2:	b914      	cbnz	r4, 800aeba <__match+0x12>
 800aeb4:	6003      	str	r3, [r0, #0]
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	bd30      	pop	{r4, r5, pc}
 800aeba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aebe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aec2:	2d19      	cmp	r5, #25
 800aec4:	bf98      	it	ls
 800aec6:	3220      	addls	r2, #32
 800aec8:	42a2      	cmp	r2, r4
 800aeca:	d0f0      	beq.n	800aeae <__match+0x6>
 800aecc:	2000      	movs	r0, #0
 800aece:	e7f3      	b.n	800aeb8 <__match+0x10>

0800aed0 <__hexnan>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	2500      	movs	r5, #0
 800aed6:	680b      	ldr	r3, [r1, #0]
 800aed8:	4682      	mov	sl, r0
 800aeda:	115e      	asrs	r6, r3, #5
 800aedc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aee0:	f013 031f 	ands.w	r3, r3, #31
 800aee4:	bf18      	it	ne
 800aee6:	3604      	addne	r6, #4
 800aee8:	1f37      	subs	r7, r6, #4
 800aeea:	46b9      	mov	r9, r7
 800aeec:	463c      	mov	r4, r7
 800aeee:	46ab      	mov	fp, r5
 800aef0:	b087      	sub	sp, #28
 800aef2:	4690      	mov	r8, r2
 800aef4:	6802      	ldr	r2, [r0, #0]
 800aef6:	9301      	str	r3, [sp, #4]
 800aef8:	f846 5c04 	str.w	r5, [r6, #-4]
 800aefc:	9502      	str	r5, [sp, #8]
 800aefe:	7851      	ldrb	r1, [r2, #1]
 800af00:	1c53      	adds	r3, r2, #1
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	b341      	cbz	r1, 800af58 <__hexnan+0x88>
 800af06:	4608      	mov	r0, r1
 800af08:	9205      	str	r2, [sp, #20]
 800af0a:	9104      	str	r1, [sp, #16]
 800af0c:	f7ff fd69 	bl	800a9e2 <__hexdig_fun>
 800af10:	2800      	cmp	r0, #0
 800af12:	d14f      	bne.n	800afb4 <__hexnan+0xe4>
 800af14:	9904      	ldr	r1, [sp, #16]
 800af16:	9a05      	ldr	r2, [sp, #20]
 800af18:	2920      	cmp	r1, #32
 800af1a:	d818      	bhi.n	800af4e <__hexnan+0x7e>
 800af1c:	9b02      	ldr	r3, [sp, #8]
 800af1e:	459b      	cmp	fp, r3
 800af20:	dd13      	ble.n	800af4a <__hexnan+0x7a>
 800af22:	454c      	cmp	r4, r9
 800af24:	d206      	bcs.n	800af34 <__hexnan+0x64>
 800af26:	2d07      	cmp	r5, #7
 800af28:	dc04      	bgt.n	800af34 <__hexnan+0x64>
 800af2a:	462a      	mov	r2, r5
 800af2c:	4649      	mov	r1, r9
 800af2e:	4620      	mov	r0, r4
 800af30:	f7ff ffa8 	bl	800ae84 <L_shift>
 800af34:	4544      	cmp	r4, r8
 800af36:	d950      	bls.n	800afda <__hexnan+0x10a>
 800af38:	2300      	movs	r3, #0
 800af3a:	f1a4 0904 	sub.w	r9, r4, #4
 800af3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af42:	461d      	mov	r5, r3
 800af44:	464c      	mov	r4, r9
 800af46:	f8cd b008 	str.w	fp, [sp, #8]
 800af4a:	9a03      	ldr	r2, [sp, #12]
 800af4c:	e7d7      	b.n	800aefe <__hexnan+0x2e>
 800af4e:	2929      	cmp	r1, #41	; 0x29
 800af50:	d156      	bne.n	800b000 <__hexnan+0x130>
 800af52:	3202      	adds	r2, #2
 800af54:	f8ca 2000 	str.w	r2, [sl]
 800af58:	f1bb 0f00 	cmp.w	fp, #0
 800af5c:	d050      	beq.n	800b000 <__hexnan+0x130>
 800af5e:	454c      	cmp	r4, r9
 800af60:	d206      	bcs.n	800af70 <__hexnan+0xa0>
 800af62:	2d07      	cmp	r5, #7
 800af64:	dc04      	bgt.n	800af70 <__hexnan+0xa0>
 800af66:	462a      	mov	r2, r5
 800af68:	4649      	mov	r1, r9
 800af6a:	4620      	mov	r0, r4
 800af6c:	f7ff ff8a 	bl	800ae84 <L_shift>
 800af70:	4544      	cmp	r4, r8
 800af72:	d934      	bls.n	800afde <__hexnan+0x10e>
 800af74:	4623      	mov	r3, r4
 800af76:	f1a8 0204 	sub.w	r2, r8, #4
 800af7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800af7e:	429f      	cmp	r7, r3
 800af80:	f842 1f04 	str.w	r1, [r2, #4]!
 800af84:	d2f9      	bcs.n	800af7a <__hexnan+0xaa>
 800af86:	1b3b      	subs	r3, r7, r4
 800af88:	f023 0303 	bic.w	r3, r3, #3
 800af8c:	3304      	adds	r3, #4
 800af8e:	3401      	adds	r4, #1
 800af90:	3e03      	subs	r6, #3
 800af92:	42b4      	cmp	r4, r6
 800af94:	bf88      	it	hi
 800af96:	2304      	movhi	r3, #4
 800af98:	2200      	movs	r2, #0
 800af9a:	4443      	add	r3, r8
 800af9c:	f843 2b04 	str.w	r2, [r3], #4
 800afa0:	429f      	cmp	r7, r3
 800afa2:	d2fb      	bcs.n	800af9c <__hexnan+0xcc>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	b91b      	cbnz	r3, 800afb0 <__hexnan+0xe0>
 800afa8:	4547      	cmp	r7, r8
 800afaa:	d127      	bne.n	800affc <__hexnan+0x12c>
 800afac:	2301      	movs	r3, #1
 800afae:	603b      	str	r3, [r7, #0]
 800afb0:	2005      	movs	r0, #5
 800afb2:	e026      	b.n	800b002 <__hexnan+0x132>
 800afb4:	3501      	adds	r5, #1
 800afb6:	2d08      	cmp	r5, #8
 800afb8:	f10b 0b01 	add.w	fp, fp, #1
 800afbc:	dd06      	ble.n	800afcc <__hexnan+0xfc>
 800afbe:	4544      	cmp	r4, r8
 800afc0:	d9c3      	bls.n	800af4a <__hexnan+0x7a>
 800afc2:	2300      	movs	r3, #0
 800afc4:	2501      	movs	r5, #1
 800afc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800afca:	3c04      	subs	r4, #4
 800afcc:	6822      	ldr	r2, [r4, #0]
 800afce:	f000 000f 	and.w	r0, r0, #15
 800afd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800afd6:	6022      	str	r2, [r4, #0]
 800afd8:	e7b7      	b.n	800af4a <__hexnan+0x7a>
 800afda:	2508      	movs	r5, #8
 800afdc:	e7b5      	b.n	800af4a <__hexnan+0x7a>
 800afde:	9b01      	ldr	r3, [sp, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0df      	beq.n	800afa4 <__hexnan+0xd4>
 800afe4:	f04f 32ff 	mov.w	r2, #4294967295
 800afe8:	f1c3 0320 	rsb	r3, r3, #32
 800afec:	fa22 f303 	lsr.w	r3, r2, r3
 800aff0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aff4:	401a      	ands	r2, r3
 800aff6:	f846 2c04 	str.w	r2, [r6, #-4]
 800affa:	e7d3      	b.n	800afa4 <__hexnan+0xd4>
 800affc:	3f04      	subs	r7, #4
 800affe:	e7d1      	b.n	800afa4 <__hexnan+0xd4>
 800b000:	2004      	movs	r0, #4
 800b002:	b007      	add	sp, #28
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b008 <_localeconv_r>:
 800b008:	4800      	ldr	r0, [pc, #0]	; (800b00c <_localeconv_r+0x4>)
 800b00a:	4770      	bx	lr
 800b00c:	2000017c 	.word	0x2000017c

0800b010 <malloc>:
 800b010:	4b02      	ldr	r3, [pc, #8]	; (800b01c <malloc+0xc>)
 800b012:	4601      	mov	r1, r0
 800b014:	6818      	ldr	r0, [r3, #0]
 800b016:	f000 bd65 	b.w	800bae4 <_malloc_r>
 800b01a:	bf00      	nop
 800b01c:	20000024 	.word	0x20000024

0800b020 <__ascii_mbtowc>:
 800b020:	b082      	sub	sp, #8
 800b022:	b901      	cbnz	r1, 800b026 <__ascii_mbtowc+0x6>
 800b024:	a901      	add	r1, sp, #4
 800b026:	b142      	cbz	r2, 800b03a <__ascii_mbtowc+0x1a>
 800b028:	b14b      	cbz	r3, 800b03e <__ascii_mbtowc+0x1e>
 800b02a:	7813      	ldrb	r3, [r2, #0]
 800b02c:	600b      	str	r3, [r1, #0]
 800b02e:	7812      	ldrb	r2, [r2, #0]
 800b030:	1e10      	subs	r0, r2, #0
 800b032:	bf18      	it	ne
 800b034:	2001      	movne	r0, #1
 800b036:	b002      	add	sp, #8
 800b038:	4770      	bx	lr
 800b03a:	4610      	mov	r0, r2
 800b03c:	e7fb      	b.n	800b036 <__ascii_mbtowc+0x16>
 800b03e:	f06f 0001 	mvn.w	r0, #1
 800b042:	e7f8      	b.n	800b036 <__ascii_mbtowc+0x16>

0800b044 <memchr>:
 800b044:	4603      	mov	r3, r0
 800b046:	b510      	push	{r4, lr}
 800b048:	b2c9      	uxtb	r1, r1
 800b04a:	4402      	add	r2, r0
 800b04c:	4293      	cmp	r3, r2
 800b04e:	4618      	mov	r0, r3
 800b050:	d101      	bne.n	800b056 <memchr+0x12>
 800b052:	2000      	movs	r0, #0
 800b054:	e003      	b.n	800b05e <memchr+0x1a>
 800b056:	7804      	ldrb	r4, [r0, #0]
 800b058:	3301      	adds	r3, #1
 800b05a:	428c      	cmp	r4, r1
 800b05c:	d1f6      	bne.n	800b04c <memchr+0x8>
 800b05e:	bd10      	pop	{r4, pc}

0800b060 <memcpy>:
 800b060:	440a      	add	r2, r1
 800b062:	4291      	cmp	r1, r2
 800b064:	f100 33ff 	add.w	r3, r0, #4294967295
 800b068:	d100      	bne.n	800b06c <memcpy+0xc>
 800b06a:	4770      	bx	lr
 800b06c:	b510      	push	{r4, lr}
 800b06e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b072:	4291      	cmp	r1, r2
 800b074:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b078:	d1f9      	bne.n	800b06e <memcpy+0xe>
 800b07a:	bd10      	pop	{r4, pc}

0800b07c <_Balloc>:
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	b976      	cbnz	r6, 800b0a4 <_Balloc+0x28>
 800b086:	2010      	movs	r0, #16
 800b088:	f7ff ffc2 	bl	800b010 <malloc>
 800b08c:	4602      	mov	r2, r0
 800b08e:	6260      	str	r0, [r4, #36]	; 0x24
 800b090:	b920      	cbnz	r0, 800b09c <_Balloc+0x20>
 800b092:	2166      	movs	r1, #102	; 0x66
 800b094:	4b17      	ldr	r3, [pc, #92]	; (800b0f4 <_Balloc+0x78>)
 800b096:	4818      	ldr	r0, [pc, #96]	; (800b0f8 <_Balloc+0x7c>)
 800b098:	f000 ff2c 	bl	800bef4 <__assert_func>
 800b09c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0a0:	6006      	str	r6, [r0, #0]
 800b0a2:	60c6      	str	r6, [r0, #12]
 800b0a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b0a6:	68f3      	ldr	r3, [r6, #12]
 800b0a8:	b183      	cbz	r3, 800b0cc <_Balloc+0x50>
 800b0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0b2:	b9b8      	cbnz	r0, 800b0e4 <_Balloc+0x68>
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b0ba:	1d72      	adds	r2, r6, #5
 800b0bc:	4620      	mov	r0, r4
 800b0be:	0092      	lsls	r2, r2, #2
 800b0c0:	f000 fc94 	bl	800b9ec <_calloc_r>
 800b0c4:	b160      	cbz	r0, 800b0e0 <_Balloc+0x64>
 800b0c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0ca:	e00e      	b.n	800b0ea <_Balloc+0x6e>
 800b0cc:	2221      	movs	r2, #33	; 0x21
 800b0ce:	2104      	movs	r1, #4
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 fc8b 	bl	800b9ec <_calloc_r>
 800b0d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0d8:	60f0      	str	r0, [r6, #12]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e4      	bne.n	800b0aa <_Balloc+0x2e>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}
 800b0e4:	6802      	ldr	r2, [r0, #0]
 800b0e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0f0:	e7f7      	b.n	800b0e2 <_Balloc+0x66>
 800b0f2:	bf00      	nop
 800b0f4:	0800cce6 	.word	0x0800cce6
 800b0f8:	0800cde4 	.word	0x0800cde4

0800b0fc <_Bfree>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b100:	4605      	mov	r5, r0
 800b102:	460c      	mov	r4, r1
 800b104:	b976      	cbnz	r6, 800b124 <_Bfree+0x28>
 800b106:	2010      	movs	r0, #16
 800b108:	f7ff ff82 	bl	800b010 <malloc>
 800b10c:	4602      	mov	r2, r0
 800b10e:	6268      	str	r0, [r5, #36]	; 0x24
 800b110:	b920      	cbnz	r0, 800b11c <_Bfree+0x20>
 800b112:	218a      	movs	r1, #138	; 0x8a
 800b114:	4b08      	ldr	r3, [pc, #32]	; (800b138 <_Bfree+0x3c>)
 800b116:	4809      	ldr	r0, [pc, #36]	; (800b13c <_Bfree+0x40>)
 800b118:	f000 feec 	bl	800bef4 <__assert_func>
 800b11c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b120:	6006      	str	r6, [r0, #0]
 800b122:	60c6      	str	r6, [r0, #12]
 800b124:	b13c      	cbz	r4, 800b136 <_Bfree+0x3a>
 800b126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b128:	6862      	ldr	r2, [r4, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b130:	6021      	str	r1, [r4, #0]
 800b132:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	0800cce6 	.word	0x0800cce6
 800b13c:	0800cde4 	.word	0x0800cde4

0800b140 <__multadd>:
 800b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	4607      	mov	r7, r0
 800b146:	460c      	mov	r4, r1
 800b148:	461e      	mov	r6, r3
 800b14a:	2000      	movs	r0, #0
 800b14c:	690d      	ldr	r5, [r1, #16]
 800b14e:	f101 0c14 	add.w	ip, r1, #20
 800b152:	f8dc 3000 	ldr.w	r3, [ip]
 800b156:	3001      	adds	r0, #1
 800b158:	b299      	uxth	r1, r3
 800b15a:	fb02 6101 	mla	r1, r2, r1, r6
 800b15e:	0c1e      	lsrs	r6, r3, #16
 800b160:	0c0b      	lsrs	r3, r1, #16
 800b162:	fb02 3306 	mla	r3, r2, r6, r3
 800b166:	b289      	uxth	r1, r1
 800b168:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b16c:	4285      	cmp	r5, r0
 800b16e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b172:	f84c 1b04 	str.w	r1, [ip], #4
 800b176:	dcec      	bgt.n	800b152 <__multadd+0x12>
 800b178:	b30e      	cbz	r6, 800b1be <__multadd+0x7e>
 800b17a:	68a3      	ldr	r3, [r4, #8]
 800b17c:	42ab      	cmp	r3, r5
 800b17e:	dc19      	bgt.n	800b1b4 <__multadd+0x74>
 800b180:	6861      	ldr	r1, [r4, #4]
 800b182:	4638      	mov	r0, r7
 800b184:	3101      	adds	r1, #1
 800b186:	f7ff ff79 	bl	800b07c <_Balloc>
 800b18a:	4680      	mov	r8, r0
 800b18c:	b928      	cbnz	r0, 800b19a <__multadd+0x5a>
 800b18e:	4602      	mov	r2, r0
 800b190:	21b5      	movs	r1, #181	; 0xb5
 800b192:	4b0c      	ldr	r3, [pc, #48]	; (800b1c4 <__multadd+0x84>)
 800b194:	480c      	ldr	r0, [pc, #48]	; (800b1c8 <__multadd+0x88>)
 800b196:	f000 fead 	bl	800bef4 <__assert_func>
 800b19a:	6922      	ldr	r2, [r4, #16]
 800b19c:	f104 010c 	add.w	r1, r4, #12
 800b1a0:	3202      	adds	r2, #2
 800b1a2:	0092      	lsls	r2, r2, #2
 800b1a4:	300c      	adds	r0, #12
 800b1a6:	f7ff ff5b 	bl	800b060 <memcpy>
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	f7ff ffa5 	bl	800b0fc <_Bfree>
 800b1b2:	4644      	mov	r4, r8
 800b1b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1b8:	3501      	adds	r5, #1
 800b1ba:	615e      	str	r6, [r3, #20]
 800b1bc:	6125      	str	r5, [r4, #16]
 800b1be:	4620      	mov	r0, r4
 800b1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c4:	0800cd58 	.word	0x0800cd58
 800b1c8:	0800cde4 	.word	0x0800cde4

0800b1cc <__s2b>:
 800b1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1d0:	4615      	mov	r5, r2
 800b1d2:	2209      	movs	r2, #9
 800b1d4:	461f      	mov	r7, r3
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	460c      	mov	r4, r1
 800b1da:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1de:	4606      	mov	r6, r0
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	db09      	blt.n	800b1fc <__s2b+0x30>
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7ff ff47 	bl	800b07c <_Balloc>
 800b1ee:	b940      	cbnz	r0, 800b202 <__s2b+0x36>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	21ce      	movs	r1, #206	; 0xce
 800b1f4:	4b18      	ldr	r3, [pc, #96]	; (800b258 <__s2b+0x8c>)
 800b1f6:	4819      	ldr	r0, [pc, #100]	; (800b25c <__s2b+0x90>)
 800b1f8:	f000 fe7c 	bl	800bef4 <__assert_func>
 800b1fc:	0052      	lsls	r2, r2, #1
 800b1fe:	3101      	adds	r1, #1
 800b200:	e7f0      	b.n	800b1e4 <__s2b+0x18>
 800b202:	9b08      	ldr	r3, [sp, #32]
 800b204:	2d09      	cmp	r5, #9
 800b206:	6143      	str	r3, [r0, #20]
 800b208:	f04f 0301 	mov.w	r3, #1
 800b20c:	6103      	str	r3, [r0, #16]
 800b20e:	dd16      	ble.n	800b23e <__s2b+0x72>
 800b210:	f104 0909 	add.w	r9, r4, #9
 800b214:	46c8      	mov	r8, r9
 800b216:	442c      	add	r4, r5
 800b218:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b21c:	4601      	mov	r1, r0
 800b21e:	220a      	movs	r2, #10
 800b220:	4630      	mov	r0, r6
 800b222:	3b30      	subs	r3, #48	; 0x30
 800b224:	f7ff ff8c 	bl	800b140 <__multadd>
 800b228:	45a0      	cmp	r8, r4
 800b22a:	d1f5      	bne.n	800b218 <__s2b+0x4c>
 800b22c:	f1a5 0408 	sub.w	r4, r5, #8
 800b230:	444c      	add	r4, r9
 800b232:	1b2d      	subs	r5, r5, r4
 800b234:	1963      	adds	r3, r4, r5
 800b236:	42bb      	cmp	r3, r7
 800b238:	db04      	blt.n	800b244 <__s2b+0x78>
 800b23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b23e:	2509      	movs	r5, #9
 800b240:	340a      	adds	r4, #10
 800b242:	e7f6      	b.n	800b232 <__s2b+0x66>
 800b244:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b248:	4601      	mov	r1, r0
 800b24a:	220a      	movs	r2, #10
 800b24c:	4630      	mov	r0, r6
 800b24e:	3b30      	subs	r3, #48	; 0x30
 800b250:	f7ff ff76 	bl	800b140 <__multadd>
 800b254:	e7ee      	b.n	800b234 <__s2b+0x68>
 800b256:	bf00      	nop
 800b258:	0800cd58 	.word	0x0800cd58
 800b25c:	0800cde4 	.word	0x0800cde4

0800b260 <__hi0bits>:
 800b260:	0c02      	lsrs	r2, r0, #16
 800b262:	0412      	lsls	r2, r2, #16
 800b264:	4603      	mov	r3, r0
 800b266:	b9ca      	cbnz	r2, 800b29c <__hi0bits+0x3c>
 800b268:	0403      	lsls	r3, r0, #16
 800b26a:	2010      	movs	r0, #16
 800b26c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b270:	bf04      	itt	eq
 800b272:	021b      	lsleq	r3, r3, #8
 800b274:	3008      	addeq	r0, #8
 800b276:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b27a:	bf04      	itt	eq
 800b27c:	011b      	lsleq	r3, r3, #4
 800b27e:	3004      	addeq	r0, #4
 800b280:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b284:	bf04      	itt	eq
 800b286:	009b      	lsleq	r3, r3, #2
 800b288:	3002      	addeq	r0, #2
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	db05      	blt.n	800b29a <__hi0bits+0x3a>
 800b28e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b292:	f100 0001 	add.w	r0, r0, #1
 800b296:	bf08      	it	eq
 800b298:	2020      	moveq	r0, #32
 800b29a:	4770      	bx	lr
 800b29c:	2000      	movs	r0, #0
 800b29e:	e7e5      	b.n	800b26c <__hi0bits+0xc>

0800b2a0 <__lo0bits>:
 800b2a0:	6803      	ldr	r3, [r0, #0]
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	f013 0007 	ands.w	r0, r3, #7
 800b2a8:	d00b      	beq.n	800b2c2 <__lo0bits+0x22>
 800b2aa:	07d9      	lsls	r1, r3, #31
 800b2ac:	d421      	bmi.n	800b2f2 <__lo0bits+0x52>
 800b2ae:	0798      	lsls	r0, r3, #30
 800b2b0:	bf49      	itett	mi
 800b2b2:	085b      	lsrmi	r3, r3, #1
 800b2b4:	089b      	lsrpl	r3, r3, #2
 800b2b6:	2001      	movmi	r0, #1
 800b2b8:	6013      	strmi	r3, [r2, #0]
 800b2ba:	bf5c      	itt	pl
 800b2bc:	2002      	movpl	r0, #2
 800b2be:	6013      	strpl	r3, [r2, #0]
 800b2c0:	4770      	bx	lr
 800b2c2:	b299      	uxth	r1, r3
 800b2c4:	b909      	cbnz	r1, 800b2ca <__lo0bits+0x2a>
 800b2c6:	2010      	movs	r0, #16
 800b2c8:	0c1b      	lsrs	r3, r3, #16
 800b2ca:	b2d9      	uxtb	r1, r3
 800b2cc:	b909      	cbnz	r1, 800b2d2 <__lo0bits+0x32>
 800b2ce:	3008      	adds	r0, #8
 800b2d0:	0a1b      	lsrs	r3, r3, #8
 800b2d2:	0719      	lsls	r1, r3, #28
 800b2d4:	bf04      	itt	eq
 800b2d6:	091b      	lsreq	r3, r3, #4
 800b2d8:	3004      	addeq	r0, #4
 800b2da:	0799      	lsls	r1, r3, #30
 800b2dc:	bf04      	itt	eq
 800b2de:	089b      	lsreq	r3, r3, #2
 800b2e0:	3002      	addeq	r0, #2
 800b2e2:	07d9      	lsls	r1, r3, #31
 800b2e4:	d403      	bmi.n	800b2ee <__lo0bits+0x4e>
 800b2e6:	085b      	lsrs	r3, r3, #1
 800b2e8:	f100 0001 	add.w	r0, r0, #1
 800b2ec:	d003      	beq.n	800b2f6 <__lo0bits+0x56>
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	4770      	bx	lr
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	4770      	bx	lr
 800b2f6:	2020      	movs	r0, #32
 800b2f8:	4770      	bx	lr
	...

0800b2fc <__i2b>:
 800b2fc:	b510      	push	{r4, lr}
 800b2fe:	460c      	mov	r4, r1
 800b300:	2101      	movs	r1, #1
 800b302:	f7ff febb 	bl	800b07c <_Balloc>
 800b306:	4602      	mov	r2, r0
 800b308:	b928      	cbnz	r0, 800b316 <__i2b+0x1a>
 800b30a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b30e:	4b04      	ldr	r3, [pc, #16]	; (800b320 <__i2b+0x24>)
 800b310:	4804      	ldr	r0, [pc, #16]	; (800b324 <__i2b+0x28>)
 800b312:	f000 fdef 	bl	800bef4 <__assert_func>
 800b316:	2301      	movs	r3, #1
 800b318:	6144      	str	r4, [r0, #20]
 800b31a:	6103      	str	r3, [r0, #16]
 800b31c:	bd10      	pop	{r4, pc}
 800b31e:	bf00      	nop
 800b320:	0800cd58 	.word	0x0800cd58
 800b324:	0800cde4 	.word	0x0800cde4

0800b328 <__multiply>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	4691      	mov	r9, r2
 800b32e:	690a      	ldr	r2, [r1, #16]
 800b330:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b334:	460c      	mov	r4, r1
 800b336:	429a      	cmp	r2, r3
 800b338:	bfbe      	ittt	lt
 800b33a:	460b      	movlt	r3, r1
 800b33c:	464c      	movlt	r4, r9
 800b33e:	4699      	movlt	r9, r3
 800b340:	6927      	ldr	r7, [r4, #16]
 800b342:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	6861      	ldr	r1, [r4, #4]
 800b34a:	eb07 060a 	add.w	r6, r7, sl
 800b34e:	42b3      	cmp	r3, r6
 800b350:	b085      	sub	sp, #20
 800b352:	bfb8      	it	lt
 800b354:	3101      	addlt	r1, #1
 800b356:	f7ff fe91 	bl	800b07c <_Balloc>
 800b35a:	b930      	cbnz	r0, 800b36a <__multiply+0x42>
 800b35c:	4602      	mov	r2, r0
 800b35e:	f240 115d 	movw	r1, #349	; 0x15d
 800b362:	4b43      	ldr	r3, [pc, #268]	; (800b470 <__multiply+0x148>)
 800b364:	4843      	ldr	r0, [pc, #268]	; (800b474 <__multiply+0x14c>)
 800b366:	f000 fdc5 	bl	800bef4 <__assert_func>
 800b36a:	f100 0514 	add.w	r5, r0, #20
 800b36e:	462b      	mov	r3, r5
 800b370:	2200      	movs	r2, #0
 800b372:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b376:	4543      	cmp	r3, r8
 800b378:	d321      	bcc.n	800b3be <__multiply+0x96>
 800b37a:	f104 0314 	add.w	r3, r4, #20
 800b37e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b382:	f109 0314 	add.w	r3, r9, #20
 800b386:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b38a:	9202      	str	r2, [sp, #8]
 800b38c:	1b3a      	subs	r2, r7, r4
 800b38e:	3a15      	subs	r2, #21
 800b390:	f022 0203 	bic.w	r2, r2, #3
 800b394:	3204      	adds	r2, #4
 800b396:	f104 0115 	add.w	r1, r4, #21
 800b39a:	428f      	cmp	r7, r1
 800b39c:	bf38      	it	cc
 800b39e:	2204      	movcc	r2, #4
 800b3a0:	9201      	str	r2, [sp, #4]
 800b3a2:	9a02      	ldr	r2, [sp, #8]
 800b3a4:	9303      	str	r3, [sp, #12]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d80c      	bhi.n	800b3c4 <__multiply+0x9c>
 800b3aa:	2e00      	cmp	r6, #0
 800b3ac:	dd03      	ble.n	800b3b6 <__multiply+0x8e>
 800b3ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d059      	beq.n	800b46a <__multiply+0x142>
 800b3b6:	6106      	str	r6, [r0, #16]
 800b3b8:	b005      	add	sp, #20
 800b3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3be:	f843 2b04 	str.w	r2, [r3], #4
 800b3c2:	e7d8      	b.n	800b376 <__multiply+0x4e>
 800b3c4:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3c8:	f1ba 0f00 	cmp.w	sl, #0
 800b3cc:	d023      	beq.n	800b416 <__multiply+0xee>
 800b3ce:	46a9      	mov	r9, r5
 800b3d0:	f04f 0c00 	mov.w	ip, #0
 800b3d4:	f104 0e14 	add.w	lr, r4, #20
 800b3d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b3dc:	f8d9 1000 	ldr.w	r1, [r9]
 800b3e0:	fa1f fb82 	uxth.w	fp, r2
 800b3e4:	b289      	uxth	r1, r1
 800b3e6:	fb0a 110b 	mla	r1, sl, fp, r1
 800b3ea:	4461      	add	r1, ip
 800b3ec:	f8d9 c000 	ldr.w	ip, [r9]
 800b3f0:	0c12      	lsrs	r2, r2, #16
 800b3f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b3f6:	fb0a c202 	mla	r2, sl, r2, ip
 800b3fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b3fe:	b289      	uxth	r1, r1
 800b400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b404:	4577      	cmp	r7, lr
 800b406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b40a:	f849 1b04 	str.w	r1, [r9], #4
 800b40e:	d8e3      	bhi.n	800b3d8 <__multiply+0xb0>
 800b410:	9a01      	ldr	r2, [sp, #4]
 800b412:	f845 c002 	str.w	ip, [r5, r2]
 800b416:	9a03      	ldr	r2, [sp, #12]
 800b418:	3304      	adds	r3, #4
 800b41a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b41e:	f1b9 0f00 	cmp.w	r9, #0
 800b422:	d020      	beq.n	800b466 <__multiply+0x13e>
 800b424:	46ae      	mov	lr, r5
 800b426:	f04f 0a00 	mov.w	sl, #0
 800b42a:	6829      	ldr	r1, [r5, #0]
 800b42c:	f104 0c14 	add.w	ip, r4, #20
 800b430:	f8bc b000 	ldrh.w	fp, [ip]
 800b434:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b438:	b289      	uxth	r1, r1
 800b43a:	fb09 220b 	mla	r2, r9, fp, r2
 800b43e:	4492      	add	sl, r2
 800b440:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b444:	f84e 1b04 	str.w	r1, [lr], #4
 800b448:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b44c:	f8be 1000 	ldrh.w	r1, [lr]
 800b450:	0c12      	lsrs	r2, r2, #16
 800b452:	fb09 1102 	mla	r1, r9, r2, r1
 800b456:	4567      	cmp	r7, ip
 800b458:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b45c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b460:	d8e6      	bhi.n	800b430 <__multiply+0x108>
 800b462:	9a01      	ldr	r2, [sp, #4]
 800b464:	50a9      	str	r1, [r5, r2]
 800b466:	3504      	adds	r5, #4
 800b468:	e79b      	b.n	800b3a2 <__multiply+0x7a>
 800b46a:	3e01      	subs	r6, #1
 800b46c:	e79d      	b.n	800b3aa <__multiply+0x82>
 800b46e:	bf00      	nop
 800b470:	0800cd58 	.word	0x0800cd58
 800b474:	0800cde4 	.word	0x0800cde4

0800b478 <__pow5mult>:
 800b478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b47c:	4615      	mov	r5, r2
 800b47e:	f012 0203 	ands.w	r2, r2, #3
 800b482:	4606      	mov	r6, r0
 800b484:	460f      	mov	r7, r1
 800b486:	d007      	beq.n	800b498 <__pow5mult+0x20>
 800b488:	4c25      	ldr	r4, [pc, #148]	; (800b520 <__pow5mult+0xa8>)
 800b48a:	3a01      	subs	r2, #1
 800b48c:	2300      	movs	r3, #0
 800b48e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b492:	f7ff fe55 	bl	800b140 <__multadd>
 800b496:	4607      	mov	r7, r0
 800b498:	10ad      	asrs	r5, r5, #2
 800b49a:	d03d      	beq.n	800b518 <__pow5mult+0xa0>
 800b49c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b49e:	b97c      	cbnz	r4, 800b4c0 <__pow5mult+0x48>
 800b4a0:	2010      	movs	r0, #16
 800b4a2:	f7ff fdb5 	bl	800b010 <malloc>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b4aa:	b928      	cbnz	r0, 800b4b8 <__pow5mult+0x40>
 800b4ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b4b0:	4b1c      	ldr	r3, [pc, #112]	; (800b524 <__pow5mult+0xac>)
 800b4b2:	481d      	ldr	r0, [pc, #116]	; (800b528 <__pow5mult+0xb0>)
 800b4b4:	f000 fd1e 	bl	800bef4 <__assert_func>
 800b4b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4bc:	6004      	str	r4, [r0, #0]
 800b4be:	60c4      	str	r4, [r0, #12]
 800b4c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b4c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4c8:	b94c      	cbnz	r4, 800b4de <__pow5mult+0x66>
 800b4ca:	f240 2171 	movw	r1, #625	; 0x271
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff ff14 	bl	800b2fc <__i2b>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	f04f 0900 	mov.w	r9, #0
 800b4e2:	07eb      	lsls	r3, r5, #31
 800b4e4:	d50a      	bpl.n	800b4fc <__pow5mult+0x84>
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f7ff ff1c 	bl	800b328 <__multiply>
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f7ff fe01 	bl	800b0fc <_Bfree>
 800b4fa:	4647      	mov	r7, r8
 800b4fc:	106d      	asrs	r5, r5, #1
 800b4fe:	d00b      	beq.n	800b518 <__pow5mult+0xa0>
 800b500:	6820      	ldr	r0, [r4, #0]
 800b502:	b938      	cbnz	r0, 800b514 <__pow5mult+0x9c>
 800b504:	4622      	mov	r2, r4
 800b506:	4621      	mov	r1, r4
 800b508:	4630      	mov	r0, r6
 800b50a:	f7ff ff0d 	bl	800b328 <__multiply>
 800b50e:	6020      	str	r0, [r4, #0]
 800b510:	f8c0 9000 	str.w	r9, [r0]
 800b514:	4604      	mov	r4, r0
 800b516:	e7e4      	b.n	800b4e2 <__pow5mult+0x6a>
 800b518:	4638      	mov	r0, r7
 800b51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51e:	bf00      	nop
 800b520:	0800cf30 	.word	0x0800cf30
 800b524:	0800cce6 	.word	0x0800cce6
 800b528:	0800cde4 	.word	0x0800cde4

0800b52c <__lshift>:
 800b52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b530:	460c      	mov	r4, r1
 800b532:	4607      	mov	r7, r0
 800b534:	4691      	mov	r9, r2
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	6849      	ldr	r1, [r1, #4]
 800b53a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b53e:	68a3      	ldr	r3, [r4, #8]
 800b540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b544:	f108 0601 	add.w	r6, r8, #1
 800b548:	42b3      	cmp	r3, r6
 800b54a:	db0b      	blt.n	800b564 <__lshift+0x38>
 800b54c:	4638      	mov	r0, r7
 800b54e:	f7ff fd95 	bl	800b07c <_Balloc>
 800b552:	4605      	mov	r5, r0
 800b554:	b948      	cbnz	r0, 800b56a <__lshift+0x3e>
 800b556:	4602      	mov	r2, r0
 800b558:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b55c:	4b29      	ldr	r3, [pc, #164]	; (800b604 <__lshift+0xd8>)
 800b55e:	482a      	ldr	r0, [pc, #168]	; (800b608 <__lshift+0xdc>)
 800b560:	f000 fcc8 	bl	800bef4 <__assert_func>
 800b564:	3101      	adds	r1, #1
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	e7ee      	b.n	800b548 <__lshift+0x1c>
 800b56a:	2300      	movs	r3, #0
 800b56c:	f100 0114 	add.w	r1, r0, #20
 800b570:	f100 0210 	add.w	r2, r0, #16
 800b574:	4618      	mov	r0, r3
 800b576:	4553      	cmp	r3, sl
 800b578:	db37      	blt.n	800b5ea <__lshift+0xbe>
 800b57a:	6920      	ldr	r0, [r4, #16]
 800b57c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b580:	f104 0314 	add.w	r3, r4, #20
 800b584:	f019 091f 	ands.w	r9, r9, #31
 800b588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b58c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b590:	d02f      	beq.n	800b5f2 <__lshift+0xc6>
 800b592:	468a      	mov	sl, r1
 800b594:	f04f 0c00 	mov.w	ip, #0
 800b598:	f1c9 0e20 	rsb	lr, r9, #32
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	fa02 f209 	lsl.w	r2, r2, r9
 800b5a2:	ea42 020c 	orr.w	r2, r2, ip
 800b5a6:	f84a 2b04 	str.w	r2, [sl], #4
 800b5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ae:	4298      	cmp	r0, r3
 800b5b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b5b4:	d8f2      	bhi.n	800b59c <__lshift+0x70>
 800b5b6:	1b03      	subs	r3, r0, r4
 800b5b8:	3b15      	subs	r3, #21
 800b5ba:	f023 0303 	bic.w	r3, r3, #3
 800b5be:	3304      	adds	r3, #4
 800b5c0:	f104 0215 	add.w	r2, r4, #21
 800b5c4:	4290      	cmp	r0, r2
 800b5c6:	bf38      	it	cc
 800b5c8:	2304      	movcc	r3, #4
 800b5ca:	f841 c003 	str.w	ip, [r1, r3]
 800b5ce:	f1bc 0f00 	cmp.w	ip, #0
 800b5d2:	d001      	beq.n	800b5d8 <__lshift+0xac>
 800b5d4:	f108 0602 	add.w	r6, r8, #2
 800b5d8:	3e01      	subs	r6, #1
 800b5da:	4638      	mov	r0, r7
 800b5dc:	4621      	mov	r1, r4
 800b5de:	612e      	str	r6, [r5, #16]
 800b5e0:	f7ff fd8c 	bl	800b0fc <_Bfree>
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	e7c1      	b.n	800b576 <__lshift+0x4a>
 800b5f2:	3904      	subs	r1, #4
 800b5f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f8:	4298      	cmp	r0, r3
 800b5fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5fe:	d8f9      	bhi.n	800b5f4 <__lshift+0xc8>
 800b600:	e7ea      	b.n	800b5d8 <__lshift+0xac>
 800b602:	bf00      	nop
 800b604:	0800cd58 	.word	0x0800cd58
 800b608:	0800cde4 	.word	0x0800cde4

0800b60c <__mcmp>:
 800b60c:	4603      	mov	r3, r0
 800b60e:	690a      	ldr	r2, [r1, #16]
 800b610:	6900      	ldr	r0, [r0, #16]
 800b612:	b530      	push	{r4, r5, lr}
 800b614:	1a80      	subs	r0, r0, r2
 800b616:	d10d      	bne.n	800b634 <__mcmp+0x28>
 800b618:	3314      	adds	r3, #20
 800b61a:	3114      	adds	r1, #20
 800b61c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b620:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b624:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b628:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b62c:	4295      	cmp	r5, r2
 800b62e:	d002      	beq.n	800b636 <__mcmp+0x2a>
 800b630:	d304      	bcc.n	800b63c <__mcmp+0x30>
 800b632:	2001      	movs	r0, #1
 800b634:	bd30      	pop	{r4, r5, pc}
 800b636:	42a3      	cmp	r3, r4
 800b638:	d3f4      	bcc.n	800b624 <__mcmp+0x18>
 800b63a:	e7fb      	b.n	800b634 <__mcmp+0x28>
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	e7f8      	b.n	800b634 <__mcmp+0x28>
	...

0800b644 <__mdiff>:
 800b644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	460d      	mov	r5, r1
 800b64a:	4607      	mov	r7, r0
 800b64c:	4611      	mov	r1, r2
 800b64e:	4628      	mov	r0, r5
 800b650:	4614      	mov	r4, r2
 800b652:	f7ff ffdb 	bl	800b60c <__mcmp>
 800b656:	1e06      	subs	r6, r0, #0
 800b658:	d111      	bne.n	800b67e <__mdiff+0x3a>
 800b65a:	4631      	mov	r1, r6
 800b65c:	4638      	mov	r0, r7
 800b65e:	f7ff fd0d 	bl	800b07c <_Balloc>
 800b662:	4602      	mov	r2, r0
 800b664:	b928      	cbnz	r0, 800b672 <__mdiff+0x2e>
 800b666:	f240 2132 	movw	r1, #562	; 0x232
 800b66a:	4b3a      	ldr	r3, [pc, #232]	; (800b754 <__mdiff+0x110>)
 800b66c:	483a      	ldr	r0, [pc, #232]	; (800b758 <__mdiff+0x114>)
 800b66e:	f000 fc41 	bl	800bef4 <__assert_func>
 800b672:	2301      	movs	r3, #1
 800b674:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b678:	4610      	mov	r0, r2
 800b67a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67e:	bfa4      	itt	ge
 800b680:	4623      	movge	r3, r4
 800b682:	462c      	movge	r4, r5
 800b684:	4638      	mov	r0, r7
 800b686:	6861      	ldr	r1, [r4, #4]
 800b688:	bfa6      	itte	ge
 800b68a:	461d      	movge	r5, r3
 800b68c:	2600      	movge	r6, #0
 800b68e:	2601      	movlt	r6, #1
 800b690:	f7ff fcf4 	bl	800b07c <_Balloc>
 800b694:	4602      	mov	r2, r0
 800b696:	b918      	cbnz	r0, 800b6a0 <__mdiff+0x5c>
 800b698:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b69c:	4b2d      	ldr	r3, [pc, #180]	; (800b754 <__mdiff+0x110>)
 800b69e:	e7e5      	b.n	800b66c <__mdiff+0x28>
 800b6a0:	f102 0814 	add.w	r8, r2, #20
 800b6a4:	46c2      	mov	sl, r8
 800b6a6:	f04f 0c00 	mov.w	ip, #0
 800b6aa:	6927      	ldr	r7, [r4, #16]
 800b6ac:	60c6      	str	r6, [r0, #12]
 800b6ae:	692e      	ldr	r6, [r5, #16]
 800b6b0:	f104 0014 	add.w	r0, r4, #20
 800b6b4:	f105 0914 	add.w	r9, r5, #20
 800b6b8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b6bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b6c0:	3410      	adds	r4, #16
 800b6c2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b6c6:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6ca:	fa1f f18b 	uxth.w	r1, fp
 800b6ce:	448c      	add	ip, r1
 800b6d0:	b299      	uxth	r1, r3
 800b6d2:	0c1b      	lsrs	r3, r3, #16
 800b6d4:	ebac 0101 	sub.w	r1, ip, r1
 800b6d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6dc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b6e0:	b289      	uxth	r1, r1
 800b6e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b6e6:	454e      	cmp	r6, r9
 800b6e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b6ec:	f84a 3b04 	str.w	r3, [sl], #4
 800b6f0:	d8e7      	bhi.n	800b6c2 <__mdiff+0x7e>
 800b6f2:	1b73      	subs	r3, r6, r5
 800b6f4:	3b15      	subs	r3, #21
 800b6f6:	f023 0303 	bic.w	r3, r3, #3
 800b6fa:	3515      	adds	r5, #21
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	42ae      	cmp	r6, r5
 800b700:	bf38      	it	cc
 800b702:	2304      	movcc	r3, #4
 800b704:	4418      	add	r0, r3
 800b706:	4443      	add	r3, r8
 800b708:	461e      	mov	r6, r3
 800b70a:	4605      	mov	r5, r0
 800b70c:	4575      	cmp	r5, lr
 800b70e:	d30e      	bcc.n	800b72e <__mdiff+0xea>
 800b710:	f10e 0103 	add.w	r1, lr, #3
 800b714:	1a09      	subs	r1, r1, r0
 800b716:	f021 0103 	bic.w	r1, r1, #3
 800b71a:	3803      	subs	r0, #3
 800b71c:	4586      	cmp	lr, r0
 800b71e:	bf38      	it	cc
 800b720:	2100      	movcc	r1, #0
 800b722:	4419      	add	r1, r3
 800b724:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b728:	b18b      	cbz	r3, 800b74e <__mdiff+0x10a>
 800b72a:	6117      	str	r7, [r2, #16]
 800b72c:	e7a4      	b.n	800b678 <__mdiff+0x34>
 800b72e:	f855 8b04 	ldr.w	r8, [r5], #4
 800b732:	fa1f f188 	uxth.w	r1, r8
 800b736:	4461      	add	r1, ip
 800b738:	140c      	asrs	r4, r1, #16
 800b73a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b73e:	b289      	uxth	r1, r1
 800b740:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b744:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b748:	f846 1b04 	str.w	r1, [r6], #4
 800b74c:	e7de      	b.n	800b70c <__mdiff+0xc8>
 800b74e:	3f01      	subs	r7, #1
 800b750:	e7e8      	b.n	800b724 <__mdiff+0xe0>
 800b752:	bf00      	nop
 800b754:	0800cd58 	.word	0x0800cd58
 800b758:	0800cde4 	.word	0x0800cde4

0800b75c <__ulp>:
 800b75c:	4b11      	ldr	r3, [pc, #68]	; (800b7a4 <__ulp+0x48>)
 800b75e:	400b      	ands	r3, r1
 800b760:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b764:	2b00      	cmp	r3, #0
 800b766:	dd02      	ble.n	800b76e <__ulp+0x12>
 800b768:	2000      	movs	r0, #0
 800b76a:	4619      	mov	r1, r3
 800b76c:	4770      	bx	lr
 800b76e:	425b      	negs	r3, r3
 800b770:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b774:	f04f 0000 	mov.w	r0, #0
 800b778:	f04f 0100 	mov.w	r1, #0
 800b77c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b780:	da04      	bge.n	800b78c <__ulp+0x30>
 800b782:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b786:	fa43 f102 	asr.w	r1, r3, r2
 800b78a:	4770      	bx	lr
 800b78c:	f1a2 0314 	sub.w	r3, r2, #20
 800b790:	2b1e      	cmp	r3, #30
 800b792:	bfd6      	itet	le
 800b794:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b798:	2301      	movgt	r3, #1
 800b79a:	fa22 f303 	lsrle.w	r3, r2, r3
 800b79e:	4618      	mov	r0, r3
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	7ff00000 	.word	0x7ff00000

0800b7a8 <__b2d>:
 800b7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ac:	6907      	ldr	r7, [r0, #16]
 800b7ae:	f100 0914 	add.w	r9, r0, #20
 800b7b2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b7b6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b7ba:	f1a7 0804 	sub.w	r8, r7, #4
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f7ff fd4e 	bl	800b260 <__hi0bits>
 800b7c4:	f1c0 0320 	rsb	r3, r0, #32
 800b7c8:	280a      	cmp	r0, #10
 800b7ca:	600b      	str	r3, [r1, #0]
 800b7cc:	491f      	ldr	r1, [pc, #124]	; (800b84c <__b2d+0xa4>)
 800b7ce:	dc17      	bgt.n	800b800 <__b2d+0x58>
 800b7d0:	45c1      	cmp	r9, r8
 800b7d2:	bf28      	it	cs
 800b7d4:	2200      	movcs	r2, #0
 800b7d6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b7da:	fa26 f30c 	lsr.w	r3, r6, ip
 800b7de:	bf38      	it	cc
 800b7e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b7e4:	ea43 0501 	orr.w	r5, r3, r1
 800b7e8:	f100 0315 	add.w	r3, r0, #21
 800b7ec:	fa06 f303 	lsl.w	r3, r6, r3
 800b7f0:	fa22 f20c 	lsr.w	r2, r2, ip
 800b7f4:	ea43 0402 	orr.w	r4, r3, r2
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b800:	45c1      	cmp	r9, r8
 800b802:	bf2e      	itee	cs
 800b804:	2200      	movcs	r2, #0
 800b806:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b80a:	f1a7 0808 	subcc.w	r8, r7, #8
 800b80e:	f1b0 030b 	subs.w	r3, r0, #11
 800b812:	d016      	beq.n	800b842 <__b2d+0x9a>
 800b814:	f1c3 0720 	rsb	r7, r3, #32
 800b818:	fa22 f107 	lsr.w	r1, r2, r7
 800b81c:	45c8      	cmp	r8, r9
 800b81e:	fa06 f603 	lsl.w	r6, r6, r3
 800b822:	ea46 0601 	orr.w	r6, r6, r1
 800b826:	bf94      	ite	ls
 800b828:	2100      	movls	r1, #0
 800b82a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b82e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b832:	fa02 f003 	lsl.w	r0, r2, r3
 800b836:	40f9      	lsrs	r1, r7
 800b838:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b83c:	ea40 0401 	orr.w	r4, r0, r1
 800b840:	e7da      	b.n	800b7f8 <__b2d+0x50>
 800b842:	4614      	mov	r4, r2
 800b844:	ea46 0501 	orr.w	r5, r6, r1
 800b848:	e7d6      	b.n	800b7f8 <__b2d+0x50>
 800b84a:	bf00      	nop
 800b84c:	3ff00000 	.word	0x3ff00000

0800b850 <__d2b>:
 800b850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b854:	2101      	movs	r1, #1
 800b856:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b85a:	4690      	mov	r8, r2
 800b85c:	461d      	mov	r5, r3
 800b85e:	f7ff fc0d 	bl	800b07c <_Balloc>
 800b862:	4604      	mov	r4, r0
 800b864:	b930      	cbnz	r0, 800b874 <__d2b+0x24>
 800b866:	4602      	mov	r2, r0
 800b868:	f240 310a 	movw	r1, #778	; 0x30a
 800b86c:	4b24      	ldr	r3, [pc, #144]	; (800b900 <__d2b+0xb0>)
 800b86e:	4825      	ldr	r0, [pc, #148]	; (800b904 <__d2b+0xb4>)
 800b870:	f000 fb40 	bl	800bef4 <__assert_func>
 800b874:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b878:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b87c:	bb2d      	cbnz	r5, 800b8ca <__d2b+0x7a>
 800b87e:	9301      	str	r3, [sp, #4]
 800b880:	f1b8 0300 	subs.w	r3, r8, #0
 800b884:	d026      	beq.n	800b8d4 <__d2b+0x84>
 800b886:	4668      	mov	r0, sp
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	f7ff fd09 	bl	800b2a0 <__lo0bits>
 800b88e:	9900      	ldr	r1, [sp, #0]
 800b890:	b1f0      	cbz	r0, 800b8d0 <__d2b+0x80>
 800b892:	9a01      	ldr	r2, [sp, #4]
 800b894:	f1c0 0320 	rsb	r3, r0, #32
 800b898:	fa02 f303 	lsl.w	r3, r2, r3
 800b89c:	430b      	orrs	r3, r1
 800b89e:	40c2      	lsrs	r2, r0
 800b8a0:	6163      	str	r3, [r4, #20]
 800b8a2:	9201      	str	r2, [sp, #4]
 800b8a4:	9b01      	ldr	r3, [sp, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bf14      	ite	ne
 800b8aa:	2102      	movne	r1, #2
 800b8ac:	2101      	moveq	r1, #1
 800b8ae:	61a3      	str	r3, [r4, #24]
 800b8b0:	6121      	str	r1, [r4, #16]
 800b8b2:	b1c5      	cbz	r5, 800b8e6 <__d2b+0x96>
 800b8b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8b8:	4405      	add	r5, r0
 800b8ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8be:	603d      	str	r5, [r7, #0]
 800b8c0:	6030      	str	r0, [r6, #0]
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	b002      	add	sp, #8
 800b8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8ce:	e7d6      	b.n	800b87e <__d2b+0x2e>
 800b8d0:	6161      	str	r1, [r4, #20]
 800b8d2:	e7e7      	b.n	800b8a4 <__d2b+0x54>
 800b8d4:	a801      	add	r0, sp, #4
 800b8d6:	f7ff fce3 	bl	800b2a0 <__lo0bits>
 800b8da:	2101      	movs	r1, #1
 800b8dc:	9b01      	ldr	r3, [sp, #4]
 800b8de:	6121      	str	r1, [r4, #16]
 800b8e0:	6163      	str	r3, [r4, #20]
 800b8e2:	3020      	adds	r0, #32
 800b8e4:	e7e5      	b.n	800b8b2 <__d2b+0x62>
 800b8e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b8ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8ee:	6038      	str	r0, [r7, #0]
 800b8f0:	6918      	ldr	r0, [r3, #16]
 800b8f2:	f7ff fcb5 	bl	800b260 <__hi0bits>
 800b8f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b8fa:	6031      	str	r1, [r6, #0]
 800b8fc:	e7e1      	b.n	800b8c2 <__d2b+0x72>
 800b8fe:	bf00      	nop
 800b900:	0800cd58 	.word	0x0800cd58
 800b904:	0800cde4 	.word	0x0800cde4

0800b908 <__ratio>:
 800b908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	4688      	mov	r8, r1
 800b90e:	4669      	mov	r1, sp
 800b910:	4681      	mov	r9, r0
 800b912:	f7ff ff49 	bl	800b7a8 <__b2d>
 800b916:	460f      	mov	r7, r1
 800b918:	4604      	mov	r4, r0
 800b91a:	460d      	mov	r5, r1
 800b91c:	4640      	mov	r0, r8
 800b91e:	a901      	add	r1, sp, #4
 800b920:	f7ff ff42 	bl	800b7a8 <__b2d>
 800b924:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b928:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b92c:	468b      	mov	fp, r1
 800b92e:	eba3 0c02 	sub.w	ip, r3, r2
 800b932:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b936:	1a9b      	subs	r3, r3, r2
 800b938:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	bfd5      	itete	le
 800b940:	460a      	movle	r2, r1
 800b942:	462a      	movgt	r2, r5
 800b944:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b948:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b94c:	bfd8      	it	le
 800b94e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b952:	465b      	mov	r3, fp
 800b954:	4602      	mov	r2, r0
 800b956:	4639      	mov	r1, r7
 800b958:	4620      	mov	r0, r4
 800b95a:	f7f4 fee7 	bl	800072c <__aeabi_ddiv>
 800b95e:	b003      	add	sp, #12
 800b960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b964 <__copybits>:
 800b964:	3901      	subs	r1, #1
 800b966:	b570      	push	{r4, r5, r6, lr}
 800b968:	1149      	asrs	r1, r1, #5
 800b96a:	6914      	ldr	r4, [r2, #16]
 800b96c:	3101      	adds	r1, #1
 800b96e:	f102 0314 	add.w	r3, r2, #20
 800b972:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b976:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b97a:	1f05      	subs	r5, r0, #4
 800b97c:	42a3      	cmp	r3, r4
 800b97e:	d30c      	bcc.n	800b99a <__copybits+0x36>
 800b980:	1aa3      	subs	r3, r4, r2
 800b982:	3b11      	subs	r3, #17
 800b984:	f023 0303 	bic.w	r3, r3, #3
 800b988:	3211      	adds	r2, #17
 800b98a:	42a2      	cmp	r2, r4
 800b98c:	bf88      	it	hi
 800b98e:	2300      	movhi	r3, #0
 800b990:	4418      	add	r0, r3
 800b992:	2300      	movs	r3, #0
 800b994:	4288      	cmp	r0, r1
 800b996:	d305      	bcc.n	800b9a4 <__copybits+0x40>
 800b998:	bd70      	pop	{r4, r5, r6, pc}
 800b99a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b99e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b9a2:	e7eb      	b.n	800b97c <__copybits+0x18>
 800b9a4:	f840 3b04 	str.w	r3, [r0], #4
 800b9a8:	e7f4      	b.n	800b994 <__copybits+0x30>

0800b9aa <__any_on>:
 800b9aa:	f100 0214 	add.w	r2, r0, #20
 800b9ae:	6900      	ldr	r0, [r0, #16]
 800b9b0:	114b      	asrs	r3, r1, #5
 800b9b2:	4298      	cmp	r0, r3
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	db11      	blt.n	800b9dc <__any_on+0x32>
 800b9b8:	dd0a      	ble.n	800b9d0 <__any_on+0x26>
 800b9ba:	f011 011f 	ands.w	r1, r1, #31
 800b9be:	d007      	beq.n	800b9d0 <__any_on+0x26>
 800b9c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9c4:	fa24 f001 	lsr.w	r0, r4, r1
 800b9c8:	fa00 f101 	lsl.w	r1, r0, r1
 800b9cc:	428c      	cmp	r4, r1
 800b9ce:	d10b      	bne.n	800b9e8 <__any_on+0x3e>
 800b9d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d803      	bhi.n	800b9e0 <__any_on+0x36>
 800b9d8:	2000      	movs	r0, #0
 800b9da:	bd10      	pop	{r4, pc}
 800b9dc:	4603      	mov	r3, r0
 800b9de:	e7f7      	b.n	800b9d0 <__any_on+0x26>
 800b9e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	d0f5      	beq.n	800b9d4 <__any_on+0x2a>
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	e7f6      	b.n	800b9da <__any_on+0x30>

0800b9ec <_calloc_r>:
 800b9ec:	b570      	push	{r4, r5, r6, lr}
 800b9ee:	fba1 5402 	umull	r5, r4, r1, r2
 800b9f2:	b934      	cbnz	r4, 800ba02 <_calloc_r+0x16>
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	f000 f875 	bl	800bae4 <_malloc_r>
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	b928      	cbnz	r0, 800ba0a <_calloc_r+0x1e>
 800b9fe:	4630      	mov	r0, r6
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	220c      	movs	r2, #12
 800ba04:	2600      	movs	r6, #0
 800ba06:	6002      	str	r2, [r0, #0]
 800ba08:	e7f9      	b.n	800b9fe <_calloc_r+0x12>
 800ba0a:	462a      	mov	r2, r5
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	f7fc fbf3 	bl	80081f8 <memset>
 800ba12:	e7f4      	b.n	800b9fe <_calloc_r+0x12>

0800ba14 <_free_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4605      	mov	r5, r0
 800ba18:	2900      	cmp	r1, #0
 800ba1a:	d040      	beq.n	800ba9e <_free_r+0x8a>
 800ba1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba20:	1f0c      	subs	r4, r1, #4
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bfb8      	it	lt
 800ba26:	18e4      	addlt	r4, r4, r3
 800ba28:	f000 faae 	bl	800bf88 <__malloc_lock>
 800ba2c:	4a1c      	ldr	r2, [pc, #112]	; (800baa0 <_free_r+0x8c>)
 800ba2e:	6813      	ldr	r3, [r2, #0]
 800ba30:	b933      	cbnz	r3, 800ba40 <_free_r+0x2c>
 800ba32:	6063      	str	r3, [r4, #4]
 800ba34:	6014      	str	r4, [r2, #0]
 800ba36:	4628      	mov	r0, r5
 800ba38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba3c:	f000 baaa 	b.w	800bf94 <__malloc_unlock>
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	d908      	bls.n	800ba56 <_free_r+0x42>
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	1821      	adds	r1, r4, r0
 800ba48:	428b      	cmp	r3, r1
 800ba4a:	bf01      	itttt	eq
 800ba4c:	6819      	ldreq	r1, [r3, #0]
 800ba4e:	685b      	ldreq	r3, [r3, #4]
 800ba50:	1809      	addeq	r1, r1, r0
 800ba52:	6021      	streq	r1, [r4, #0]
 800ba54:	e7ed      	b.n	800ba32 <_free_r+0x1e>
 800ba56:	461a      	mov	r2, r3
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	b10b      	cbz	r3, 800ba60 <_free_r+0x4c>
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	d9fa      	bls.n	800ba56 <_free_r+0x42>
 800ba60:	6811      	ldr	r1, [r2, #0]
 800ba62:	1850      	adds	r0, r2, r1
 800ba64:	42a0      	cmp	r0, r4
 800ba66:	d10b      	bne.n	800ba80 <_free_r+0x6c>
 800ba68:	6820      	ldr	r0, [r4, #0]
 800ba6a:	4401      	add	r1, r0
 800ba6c:	1850      	adds	r0, r2, r1
 800ba6e:	4283      	cmp	r3, r0
 800ba70:	6011      	str	r1, [r2, #0]
 800ba72:	d1e0      	bne.n	800ba36 <_free_r+0x22>
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	4401      	add	r1, r0
 800ba7a:	6011      	str	r1, [r2, #0]
 800ba7c:	6053      	str	r3, [r2, #4]
 800ba7e:	e7da      	b.n	800ba36 <_free_r+0x22>
 800ba80:	d902      	bls.n	800ba88 <_free_r+0x74>
 800ba82:	230c      	movs	r3, #12
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	e7d6      	b.n	800ba36 <_free_r+0x22>
 800ba88:	6820      	ldr	r0, [r4, #0]
 800ba8a:	1821      	adds	r1, r4, r0
 800ba8c:	428b      	cmp	r3, r1
 800ba8e:	bf01      	itttt	eq
 800ba90:	6819      	ldreq	r1, [r3, #0]
 800ba92:	685b      	ldreq	r3, [r3, #4]
 800ba94:	1809      	addeq	r1, r1, r0
 800ba96:	6021      	streq	r1, [r4, #0]
 800ba98:	6063      	str	r3, [r4, #4]
 800ba9a:	6054      	str	r4, [r2, #4]
 800ba9c:	e7cb      	b.n	800ba36 <_free_r+0x22>
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	200007f4 	.word	0x200007f4

0800baa4 <sbrk_aligned>:
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	4e0e      	ldr	r6, [pc, #56]	; (800bae0 <sbrk_aligned+0x3c>)
 800baa8:	460c      	mov	r4, r1
 800baaa:	6831      	ldr	r1, [r6, #0]
 800baac:	4605      	mov	r5, r0
 800baae:	b911      	cbnz	r1, 800bab6 <sbrk_aligned+0x12>
 800bab0:	f000 f9ee 	bl	800be90 <_sbrk_r>
 800bab4:	6030      	str	r0, [r6, #0]
 800bab6:	4621      	mov	r1, r4
 800bab8:	4628      	mov	r0, r5
 800baba:	f000 f9e9 	bl	800be90 <_sbrk_r>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	d00a      	beq.n	800bad8 <sbrk_aligned+0x34>
 800bac2:	1cc4      	adds	r4, r0, #3
 800bac4:	f024 0403 	bic.w	r4, r4, #3
 800bac8:	42a0      	cmp	r0, r4
 800baca:	d007      	beq.n	800badc <sbrk_aligned+0x38>
 800bacc:	1a21      	subs	r1, r4, r0
 800bace:	4628      	mov	r0, r5
 800bad0:	f000 f9de 	bl	800be90 <_sbrk_r>
 800bad4:	3001      	adds	r0, #1
 800bad6:	d101      	bne.n	800badc <sbrk_aligned+0x38>
 800bad8:	f04f 34ff 	mov.w	r4, #4294967295
 800badc:	4620      	mov	r0, r4
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	200007f8 	.word	0x200007f8

0800bae4 <_malloc_r>:
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	1ccd      	adds	r5, r1, #3
 800baea:	f025 0503 	bic.w	r5, r5, #3
 800baee:	3508      	adds	r5, #8
 800baf0:	2d0c      	cmp	r5, #12
 800baf2:	bf38      	it	cc
 800baf4:	250c      	movcc	r5, #12
 800baf6:	2d00      	cmp	r5, #0
 800baf8:	4607      	mov	r7, r0
 800bafa:	db01      	blt.n	800bb00 <_malloc_r+0x1c>
 800bafc:	42a9      	cmp	r1, r5
 800bafe:	d905      	bls.n	800bb0c <_malloc_r+0x28>
 800bb00:	230c      	movs	r3, #12
 800bb02:	2600      	movs	r6, #0
 800bb04:	603b      	str	r3, [r7, #0]
 800bb06:	4630      	mov	r0, r6
 800bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0c:	4e2e      	ldr	r6, [pc, #184]	; (800bbc8 <_malloc_r+0xe4>)
 800bb0e:	f000 fa3b 	bl	800bf88 <__malloc_lock>
 800bb12:	6833      	ldr	r3, [r6, #0]
 800bb14:	461c      	mov	r4, r3
 800bb16:	bb34      	cbnz	r4, 800bb66 <_malloc_r+0x82>
 800bb18:	4629      	mov	r1, r5
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f7ff ffc2 	bl	800baa4 <sbrk_aligned>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	4604      	mov	r4, r0
 800bb24:	d14d      	bne.n	800bbc2 <_malloc_r+0xde>
 800bb26:	6834      	ldr	r4, [r6, #0]
 800bb28:	4626      	mov	r6, r4
 800bb2a:	2e00      	cmp	r6, #0
 800bb2c:	d140      	bne.n	800bbb0 <_malloc_r+0xcc>
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	4631      	mov	r1, r6
 800bb32:	4638      	mov	r0, r7
 800bb34:	eb04 0803 	add.w	r8, r4, r3
 800bb38:	f000 f9aa 	bl	800be90 <_sbrk_r>
 800bb3c:	4580      	cmp	r8, r0
 800bb3e:	d13a      	bne.n	800bbb6 <_malloc_r+0xd2>
 800bb40:	6821      	ldr	r1, [r4, #0]
 800bb42:	3503      	adds	r5, #3
 800bb44:	1a6d      	subs	r5, r5, r1
 800bb46:	f025 0503 	bic.w	r5, r5, #3
 800bb4a:	3508      	adds	r5, #8
 800bb4c:	2d0c      	cmp	r5, #12
 800bb4e:	bf38      	it	cc
 800bb50:	250c      	movcc	r5, #12
 800bb52:	4638      	mov	r0, r7
 800bb54:	4629      	mov	r1, r5
 800bb56:	f7ff ffa5 	bl	800baa4 <sbrk_aligned>
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	d02b      	beq.n	800bbb6 <_malloc_r+0xd2>
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	442b      	add	r3, r5
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	e00e      	b.n	800bb84 <_malloc_r+0xa0>
 800bb66:	6822      	ldr	r2, [r4, #0]
 800bb68:	1b52      	subs	r2, r2, r5
 800bb6a:	d41e      	bmi.n	800bbaa <_malloc_r+0xc6>
 800bb6c:	2a0b      	cmp	r2, #11
 800bb6e:	d916      	bls.n	800bb9e <_malloc_r+0xba>
 800bb70:	1961      	adds	r1, r4, r5
 800bb72:	42a3      	cmp	r3, r4
 800bb74:	6025      	str	r5, [r4, #0]
 800bb76:	bf18      	it	ne
 800bb78:	6059      	strne	r1, [r3, #4]
 800bb7a:	6863      	ldr	r3, [r4, #4]
 800bb7c:	bf08      	it	eq
 800bb7e:	6031      	streq	r1, [r6, #0]
 800bb80:	5162      	str	r2, [r4, r5]
 800bb82:	604b      	str	r3, [r1, #4]
 800bb84:	4638      	mov	r0, r7
 800bb86:	f104 060b 	add.w	r6, r4, #11
 800bb8a:	f000 fa03 	bl	800bf94 <__malloc_unlock>
 800bb8e:	f026 0607 	bic.w	r6, r6, #7
 800bb92:	1d23      	adds	r3, r4, #4
 800bb94:	1af2      	subs	r2, r6, r3
 800bb96:	d0b6      	beq.n	800bb06 <_malloc_r+0x22>
 800bb98:	1b9b      	subs	r3, r3, r6
 800bb9a:	50a3      	str	r3, [r4, r2]
 800bb9c:	e7b3      	b.n	800bb06 <_malloc_r+0x22>
 800bb9e:	6862      	ldr	r2, [r4, #4]
 800bba0:	42a3      	cmp	r3, r4
 800bba2:	bf0c      	ite	eq
 800bba4:	6032      	streq	r2, [r6, #0]
 800bba6:	605a      	strne	r2, [r3, #4]
 800bba8:	e7ec      	b.n	800bb84 <_malloc_r+0xa0>
 800bbaa:	4623      	mov	r3, r4
 800bbac:	6864      	ldr	r4, [r4, #4]
 800bbae:	e7b2      	b.n	800bb16 <_malloc_r+0x32>
 800bbb0:	4634      	mov	r4, r6
 800bbb2:	6876      	ldr	r6, [r6, #4]
 800bbb4:	e7b9      	b.n	800bb2a <_malloc_r+0x46>
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	4638      	mov	r0, r7
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	f000 f9ea 	bl	800bf94 <__malloc_unlock>
 800bbc0:	e7a1      	b.n	800bb06 <_malloc_r+0x22>
 800bbc2:	6025      	str	r5, [r4, #0]
 800bbc4:	e7de      	b.n	800bb84 <_malloc_r+0xa0>
 800bbc6:	bf00      	nop
 800bbc8:	200007f4 	.word	0x200007f4

0800bbcc <__ssputs_r>:
 800bbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd0:	688e      	ldr	r6, [r1, #8]
 800bbd2:	4682      	mov	sl, r0
 800bbd4:	429e      	cmp	r6, r3
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	4690      	mov	r8, r2
 800bbda:	461f      	mov	r7, r3
 800bbdc:	d838      	bhi.n	800bc50 <__ssputs_r+0x84>
 800bbde:	898a      	ldrh	r2, [r1, #12]
 800bbe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbe4:	d032      	beq.n	800bc4c <__ssputs_r+0x80>
 800bbe6:	6825      	ldr	r5, [r4, #0]
 800bbe8:	6909      	ldr	r1, [r1, #16]
 800bbea:	3301      	adds	r3, #1
 800bbec:	eba5 0901 	sub.w	r9, r5, r1
 800bbf0:	6965      	ldr	r5, [r4, #20]
 800bbf2:	444b      	add	r3, r9
 800bbf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbfc:	106d      	asrs	r5, r5, #1
 800bbfe:	429d      	cmp	r5, r3
 800bc00:	bf38      	it	cc
 800bc02:	461d      	movcc	r5, r3
 800bc04:	0553      	lsls	r3, r2, #21
 800bc06:	d531      	bpl.n	800bc6c <__ssputs_r+0xa0>
 800bc08:	4629      	mov	r1, r5
 800bc0a:	f7ff ff6b 	bl	800bae4 <_malloc_r>
 800bc0e:	4606      	mov	r6, r0
 800bc10:	b950      	cbnz	r0, 800bc28 <__ssputs_r+0x5c>
 800bc12:	230c      	movs	r3, #12
 800bc14:	f04f 30ff 	mov.w	r0, #4294967295
 800bc18:	f8ca 3000 	str.w	r3, [sl]
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc28:	464a      	mov	r2, r9
 800bc2a:	6921      	ldr	r1, [r4, #16]
 800bc2c:	f7ff fa18 	bl	800b060 <memcpy>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc3a:	81a3      	strh	r3, [r4, #12]
 800bc3c:	6126      	str	r6, [r4, #16]
 800bc3e:	444e      	add	r6, r9
 800bc40:	6026      	str	r6, [r4, #0]
 800bc42:	463e      	mov	r6, r7
 800bc44:	6165      	str	r5, [r4, #20]
 800bc46:	eba5 0509 	sub.w	r5, r5, r9
 800bc4a:	60a5      	str	r5, [r4, #8]
 800bc4c:	42be      	cmp	r6, r7
 800bc4e:	d900      	bls.n	800bc52 <__ssputs_r+0x86>
 800bc50:	463e      	mov	r6, r7
 800bc52:	4632      	mov	r2, r6
 800bc54:	4641      	mov	r1, r8
 800bc56:	6820      	ldr	r0, [r4, #0]
 800bc58:	f000 f97c 	bl	800bf54 <memmove>
 800bc5c:	68a3      	ldr	r3, [r4, #8]
 800bc5e:	2000      	movs	r0, #0
 800bc60:	1b9b      	subs	r3, r3, r6
 800bc62:	60a3      	str	r3, [r4, #8]
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	4433      	add	r3, r6
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	e7db      	b.n	800bc24 <__ssputs_r+0x58>
 800bc6c:	462a      	mov	r2, r5
 800bc6e:	f000 f997 	bl	800bfa0 <_realloc_r>
 800bc72:	4606      	mov	r6, r0
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d1e1      	bne.n	800bc3c <__ssputs_r+0x70>
 800bc78:	4650      	mov	r0, sl
 800bc7a:	6921      	ldr	r1, [r4, #16]
 800bc7c:	f7ff feca 	bl	800ba14 <_free_r>
 800bc80:	e7c7      	b.n	800bc12 <__ssputs_r+0x46>
	...

0800bc84 <_svfiprintf_r>:
 800bc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	4698      	mov	r8, r3
 800bc8a:	898b      	ldrh	r3, [r1, #12]
 800bc8c:	4607      	mov	r7, r0
 800bc8e:	061b      	lsls	r3, r3, #24
 800bc90:	460d      	mov	r5, r1
 800bc92:	4614      	mov	r4, r2
 800bc94:	b09d      	sub	sp, #116	; 0x74
 800bc96:	d50e      	bpl.n	800bcb6 <_svfiprintf_r+0x32>
 800bc98:	690b      	ldr	r3, [r1, #16]
 800bc9a:	b963      	cbnz	r3, 800bcb6 <_svfiprintf_r+0x32>
 800bc9c:	2140      	movs	r1, #64	; 0x40
 800bc9e:	f7ff ff21 	bl	800bae4 <_malloc_r>
 800bca2:	6028      	str	r0, [r5, #0]
 800bca4:	6128      	str	r0, [r5, #16]
 800bca6:	b920      	cbnz	r0, 800bcb2 <_svfiprintf_r+0x2e>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	e0d1      	b.n	800be56 <_svfiprintf_r+0x1d2>
 800bcb2:	2340      	movs	r3, #64	; 0x40
 800bcb4:	616b      	str	r3, [r5, #20]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcba:	2320      	movs	r3, #32
 800bcbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcc0:	2330      	movs	r3, #48	; 0x30
 800bcc2:	f04f 0901 	mov.w	r9, #1
 800bcc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800be70 <_svfiprintf_r+0x1ec>
 800bcce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcd2:	4623      	mov	r3, r4
 800bcd4:	469a      	mov	sl, r3
 800bcd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcda:	b10a      	cbz	r2, 800bce0 <_svfiprintf_r+0x5c>
 800bcdc:	2a25      	cmp	r2, #37	; 0x25
 800bcde:	d1f9      	bne.n	800bcd4 <_svfiprintf_r+0x50>
 800bce0:	ebba 0b04 	subs.w	fp, sl, r4
 800bce4:	d00b      	beq.n	800bcfe <_svfiprintf_r+0x7a>
 800bce6:	465b      	mov	r3, fp
 800bce8:	4622      	mov	r2, r4
 800bcea:	4629      	mov	r1, r5
 800bcec:	4638      	mov	r0, r7
 800bcee:	f7ff ff6d 	bl	800bbcc <__ssputs_r>
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	f000 80aa 	beq.w	800be4c <_svfiprintf_r+0x1c8>
 800bcf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcfa:	445a      	add	r2, fp
 800bcfc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcfe:	f89a 3000 	ldrb.w	r3, [sl]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f000 80a2 	beq.w	800be4c <_svfiprintf_r+0x1c8>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd12:	f10a 0a01 	add.w	sl, sl, #1
 800bd16:	9304      	str	r3, [sp, #16]
 800bd18:	9307      	str	r3, [sp, #28]
 800bd1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd1e:	931a      	str	r3, [sp, #104]	; 0x68
 800bd20:	4654      	mov	r4, sl
 800bd22:	2205      	movs	r2, #5
 800bd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd28:	4851      	ldr	r0, [pc, #324]	; (800be70 <_svfiprintf_r+0x1ec>)
 800bd2a:	f7ff f98b 	bl	800b044 <memchr>
 800bd2e:	9a04      	ldr	r2, [sp, #16]
 800bd30:	b9d8      	cbnz	r0, 800bd6a <_svfiprintf_r+0xe6>
 800bd32:	06d0      	lsls	r0, r2, #27
 800bd34:	bf44      	itt	mi
 800bd36:	2320      	movmi	r3, #32
 800bd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd3c:	0711      	lsls	r1, r2, #28
 800bd3e:	bf44      	itt	mi
 800bd40:	232b      	movmi	r3, #43	; 0x2b
 800bd42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd46:	f89a 3000 	ldrb.w	r3, [sl]
 800bd4a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd4c:	d015      	beq.n	800bd7a <_svfiprintf_r+0xf6>
 800bd4e:	4654      	mov	r4, sl
 800bd50:	2000      	movs	r0, #0
 800bd52:	f04f 0c0a 	mov.w	ip, #10
 800bd56:	9a07      	ldr	r2, [sp, #28]
 800bd58:	4621      	mov	r1, r4
 800bd5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd5e:	3b30      	subs	r3, #48	; 0x30
 800bd60:	2b09      	cmp	r3, #9
 800bd62:	d94e      	bls.n	800be02 <_svfiprintf_r+0x17e>
 800bd64:	b1b0      	cbz	r0, 800bd94 <_svfiprintf_r+0x110>
 800bd66:	9207      	str	r2, [sp, #28]
 800bd68:	e014      	b.n	800bd94 <_svfiprintf_r+0x110>
 800bd6a:	eba0 0308 	sub.w	r3, r0, r8
 800bd6e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd72:	4313      	orrs	r3, r2
 800bd74:	46a2      	mov	sl, r4
 800bd76:	9304      	str	r3, [sp, #16]
 800bd78:	e7d2      	b.n	800bd20 <_svfiprintf_r+0x9c>
 800bd7a:	9b03      	ldr	r3, [sp, #12]
 800bd7c:	1d19      	adds	r1, r3, #4
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	9103      	str	r1, [sp, #12]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	bfbb      	ittet	lt
 800bd86:	425b      	neglt	r3, r3
 800bd88:	f042 0202 	orrlt.w	r2, r2, #2
 800bd8c:	9307      	strge	r3, [sp, #28]
 800bd8e:	9307      	strlt	r3, [sp, #28]
 800bd90:	bfb8      	it	lt
 800bd92:	9204      	strlt	r2, [sp, #16]
 800bd94:	7823      	ldrb	r3, [r4, #0]
 800bd96:	2b2e      	cmp	r3, #46	; 0x2e
 800bd98:	d10c      	bne.n	800bdb4 <_svfiprintf_r+0x130>
 800bd9a:	7863      	ldrb	r3, [r4, #1]
 800bd9c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd9e:	d135      	bne.n	800be0c <_svfiprintf_r+0x188>
 800bda0:	9b03      	ldr	r3, [sp, #12]
 800bda2:	3402      	adds	r4, #2
 800bda4:	1d1a      	adds	r2, r3, #4
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	9203      	str	r2, [sp, #12]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	bfb8      	it	lt
 800bdae:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800be74 <_svfiprintf_r+0x1f0>
 800bdb8:	2203      	movs	r2, #3
 800bdba:	4650      	mov	r0, sl
 800bdbc:	7821      	ldrb	r1, [r4, #0]
 800bdbe:	f7ff f941 	bl	800b044 <memchr>
 800bdc2:	b140      	cbz	r0, 800bdd6 <_svfiprintf_r+0x152>
 800bdc4:	2340      	movs	r3, #64	; 0x40
 800bdc6:	eba0 000a 	sub.w	r0, r0, sl
 800bdca:	fa03 f000 	lsl.w	r0, r3, r0
 800bdce:	9b04      	ldr	r3, [sp, #16]
 800bdd0:	3401      	adds	r4, #1
 800bdd2:	4303      	orrs	r3, r0
 800bdd4:	9304      	str	r3, [sp, #16]
 800bdd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdda:	2206      	movs	r2, #6
 800bddc:	4826      	ldr	r0, [pc, #152]	; (800be78 <_svfiprintf_r+0x1f4>)
 800bdde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bde2:	f7ff f92f 	bl	800b044 <memchr>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d038      	beq.n	800be5c <_svfiprintf_r+0x1d8>
 800bdea:	4b24      	ldr	r3, [pc, #144]	; (800be7c <_svfiprintf_r+0x1f8>)
 800bdec:	bb1b      	cbnz	r3, 800be36 <_svfiprintf_r+0x1b2>
 800bdee:	9b03      	ldr	r3, [sp, #12]
 800bdf0:	3307      	adds	r3, #7
 800bdf2:	f023 0307 	bic.w	r3, r3, #7
 800bdf6:	3308      	adds	r3, #8
 800bdf8:	9303      	str	r3, [sp, #12]
 800bdfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdfc:	4433      	add	r3, r6
 800bdfe:	9309      	str	r3, [sp, #36]	; 0x24
 800be00:	e767      	b.n	800bcd2 <_svfiprintf_r+0x4e>
 800be02:	460c      	mov	r4, r1
 800be04:	2001      	movs	r0, #1
 800be06:	fb0c 3202 	mla	r2, ip, r2, r3
 800be0a:	e7a5      	b.n	800bd58 <_svfiprintf_r+0xd4>
 800be0c:	2300      	movs	r3, #0
 800be0e:	f04f 0c0a 	mov.w	ip, #10
 800be12:	4619      	mov	r1, r3
 800be14:	3401      	adds	r4, #1
 800be16:	9305      	str	r3, [sp, #20]
 800be18:	4620      	mov	r0, r4
 800be1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be1e:	3a30      	subs	r2, #48	; 0x30
 800be20:	2a09      	cmp	r2, #9
 800be22:	d903      	bls.n	800be2c <_svfiprintf_r+0x1a8>
 800be24:	2b00      	cmp	r3, #0
 800be26:	d0c5      	beq.n	800bdb4 <_svfiprintf_r+0x130>
 800be28:	9105      	str	r1, [sp, #20]
 800be2a:	e7c3      	b.n	800bdb4 <_svfiprintf_r+0x130>
 800be2c:	4604      	mov	r4, r0
 800be2e:	2301      	movs	r3, #1
 800be30:	fb0c 2101 	mla	r1, ip, r1, r2
 800be34:	e7f0      	b.n	800be18 <_svfiprintf_r+0x194>
 800be36:	ab03      	add	r3, sp, #12
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	462a      	mov	r2, r5
 800be3c:	4638      	mov	r0, r7
 800be3e:	4b10      	ldr	r3, [pc, #64]	; (800be80 <_svfiprintf_r+0x1fc>)
 800be40:	a904      	add	r1, sp, #16
 800be42:	f7fc fa7f 	bl	8008344 <_printf_float>
 800be46:	1c42      	adds	r2, r0, #1
 800be48:	4606      	mov	r6, r0
 800be4a:	d1d6      	bne.n	800bdfa <_svfiprintf_r+0x176>
 800be4c:	89ab      	ldrh	r3, [r5, #12]
 800be4e:	065b      	lsls	r3, r3, #25
 800be50:	f53f af2c 	bmi.w	800bcac <_svfiprintf_r+0x28>
 800be54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be56:	b01d      	add	sp, #116	; 0x74
 800be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5c:	ab03      	add	r3, sp, #12
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	462a      	mov	r2, r5
 800be62:	4638      	mov	r0, r7
 800be64:	4b06      	ldr	r3, [pc, #24]	; (800be80 <_svfiprintf_r+0x1fc>)
 800be66:	a904      	add	r1, sp, #16
 800be68:	f7fc fd08 	bl	800887c <_printf_i>
 800be6c:	e7eb      	b.n	800be46 <_svfiprintf_r+0x1c2>
 800be6e:	bf00      	nop
 800be70:	0800cf3c 	.word	0x0800cf3c
 800be74:	0800cf42 	.word	0x0800cf42
 800be78:	0800cf46 	.word	0x0800cf46
 800be7c:	08008345 	.word	0x08008345
 800be80:	0800bbcd 	.word	0x0800bbcd

0800be84 <nan>:
 800be84:	2000      	movs	r0, #0
 800be86:	4901      	ldr	r1, [pc, #4]	; (800be8c <nan+0x8>)
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	7ff80000 	.word	0x7ff80000

0800be90 <_sbrk_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	2300      	movs	r3, #0
 800be94:	4d05      	ldr	r5, [pc, #20]	; (800beac <_sbrk_r+0x1c>)
 800be96:	4604      	mov	r4, r0
 800be98:	4608      	mov	r0, r1
 800be9a:	602b      	str	r3, [r5, #0]
 800be9c:	f7f6 fd3e 	bl	800291c <_sbrk>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d102      	bne.n	800beaa <_sbrk_r+0x1a>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	b103      	cbz	r3, 800beaa <_sbrk_r+0x1a>
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	200007fc 	.word	0x200007fc

0800beb0 <strncmp>:
 800beb0:	4603      	mov	r3, r0
 800beb2:	b510      	push	{r4, lr}
 800beb4:	b172      	cbz	r2, 800bed4 <strncmp+0x24>
 800beb6:	3901      	subs	r1, #1
 800beb8:	1884      	adds	r4, r0, r2
 800beba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bebe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bec2:	4290      	cmp	r0, r2
 800bec4:	d101      	bne.n	800beca <strncmp+0x1a>
 800bec6:	42a3      	cmp	r3, r4
 800bec8:	d101      	bne.n	800bece <strncmp+0x1e>
 800beca:	1a80      	subs	r0, r0, r2
 800becc:	bd10      	pop	{r4, pc}
 800bece:	2800      	cmp	r0, #0
 800bed0:	d1f3      	bne.n	800beba <strncmp+0xa>
 800bed2:	e7fa      	b.n	800beca <strncmp+0x1a>
 800bed4:	4610      	mov	r0, r2
 800bed6:	e7f9      	b.n	800becc <strncmp+0x1c>

0800bed8 <__ascii_wctomb>:
 800bed8:	4603      	mov	r3, r0
 800beda:	4608      	mov	r0, r1
 800bedc:	b141      	cbz	r1, 800bef0 <__ascii_wctomb+0x18>
 800bede:	2aff      	cmp	r2, #255	; 0xff
 800bee0:	d904      	bls.n	800beec <__ascii_wctomb+0x14>
 800bee2:	228a      	movs	r2, #138	; 0x8a
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	4770      	bx	lr
 800beec:	2001      	movs	r0, #1
 800beee:	700a      	strb	r2, [r1, #0]
 800bef0:	4770      	bx	lr
	...

0800bef4 <__assert_func>:
 800bef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bef6:	4614      	mov	r4, r2
 800bef8:	461a      	mov	r2, r3
 800befa:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <__assert_func+0x2c>)
 800befc:	4605      	mov	r5, r0
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68d8      	ldr	r0, [r3, #12]
 800bf02:	b14c      	cbz	r4, 800bf18 <__assert_func+0x24>
 800bf04:	4b07      	ldr	r3, [pc, #28]	; (800bf24 <__assert_func+0x30>)
 800bf06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf0a:	9100      	str	r1, [sp, #0]
 800bf0c:	462b      	mov	r3, r5
 800bf0e:	4906      	ldr	r1, [pc, #24]	; (800bf28 <__assert_func+0x34>)
 800bf10:	f000 f80e 	bl	800bf30 <fiprintf>
 800bf14:	f000 fa8a 	bl	800c42c <abort>
 800bf18:	4b04      	ldr	r3, [pc, #16]	; (800bf2c <__assert_func+0x38>)
 800bf1a:	461c      	mov	r4, r3
 800bf1c:	e7f3      	b.n	800bf06 <__assert_func+0x12>
 800bf1e:	bf00      	nop
 800bf20:	20000024 	.word	0x20000024
 800bf24:	0800cf4d 	.word	0x0800cf4d
 800bf28:	0800cf5a 	.word	0x0800cf5a
 800bf2c:	0800cf88 	.word	0x0800cf88

0800bf30 <fiprintf>:
 800bf30:	b40e      	push	{r1, r2, r3}
 800bf32:	b503      	push	{r0, r1, lr}
 800bf34:	4601      	mov	r1, r0
 800bf36:	ab03      	add	r3, sp, #12
 800bf38:	4805      	ldr	r0, [pc, #20]	; (800bf50 <fiprintf+0x20>)
 800bf3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf3e:	6800      	ldr	r0, [r0, #0]
 800bf40:	9301      	str	r3, [sp, #4]
 800bf42:	f000 f883 	bl	800c04c <_vfiprintf_r>
 800bf46:	b002      	add	sp, #8
 800bf48:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf4c:	b003      	add	sp, #12
 800bf4e:	4770      	bx	lr
 800bf50:	20000024 	.word	0x20000024

0800bf54 <memmove>:
 800bf54:	4288      	cmp	r0, r1
 800bf56:	b510      	push	{r4, lr}
 800bf58:	eb01 0402 	add.w	r4, r1, r2
 800bf5c:	d902      	bls.n	800bf64 <memmove+0x10>
 800bf5e:	4284      	cmp	r4, r0
 800bf60:	4623      	mov	r3, r4
 800bf62:	d807      	bhi.n	800bf74 <memmove+0x20>
 800bf64:	1e43      	subs	r3, r0, #1
 800bf66:	42a1      	cmp	r1, r4
 800bf68:	d008      	beq.n	800bf7c <memmove+0x28>
 800bf6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf72:	e7f8      	b.n	800bf66 <memmove+0x12>
 800bf74:	4601      	mov	r1, r0
 800bf76:	4402      	add	r2, r0
 800bf78:	428a      	cmp	r2, r1
 800bf7a:	d100      	bne.n	800bf7e <memmove+0x2a>
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf86:	e7f7      	b.n	800bf78 <memmove+0x24>

0800bf88 <__malloc_lock>:
 800bf88:	4801      	ldr	r0, [pc, #4]	; (800bf90 <__malloc_lock+0x8>)
 800bf8a:	f000 bc0b 	b.w	800c7a4 <__retarget_lock_acquire_recursive>
 800bf8e:	bf00      	nop
 800bf90:	20000800 	.word	0x20000800

0800bf94 <__malloc_unlock>:
 800bf94:	4801      	ldr	r0, [pc, #4]	; (800bf9c <__malloc_unlock+0x8>)
 800bf96:	f000 bc06 	b.w	800c7a6 <__retarget_lock_release_recursive>
 800bf9a:	bf00      	nop
 800bf9c:	20000800 	.word	0x20000800

0800bfa0 <_realloc_r>:
 800bfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	4614      	mov	r4, r2
 800bfa8:	460e      	mov	r6, r1
 800bfaa:	b921      	cbnz	r1, 800bfb6 <_realloc_r+0x16>
 800bfac:	4611      	mov	r1, r2
 800bfae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb2:	f7ff bd97 	b.w	800bae4 <_malloc_r>
 800bfb6:	b92a      	cbnz	r2, 800bfc4 <_realloc_r+0x24>
 800bfb8:	f7ff fd2c 	bl	800ba14 <_free_r>
 800bfbc:	4625      	mov	r5, r4
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc4:	f000 fc56 	bl	800c874 <_malloc_usable_size_r>
 800bfc8:	4284      	cmp	r4, r0
 800bfca:	4607      	mov	r7, r0
 800bfcc:	d802      	bhi.n	800bfd4 <_realloc_r+0x34>
 800bfce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfd2:	d812      	bhi.n	800bffa <_realloc_r+0x5a>
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	f7ff fd84 	bl	800bae4 <_malloc_r>
 800bfdc:	4605      	mov	r5, r0
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d0ed      	beq.n	800bfbe <_realloc_r+0x1e>
 800bfe2:	42bc      	cmp	r4, r7
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	bf28      	it	cs
 800bfea:	463a      	movcs	r2, r7
 800bfec:	f7ff f838 	bl	800b060 <memcpy>
 800bff0:	4631      	mov	r1, r6
 800bff2:	4640      	mov	r0, r8
 800bff4:	f7ff fd0e 	bl	800ba14 <_free_r>
 800bff8:	e7e1      	b.n	800bfbe <_realloc_r+0x1e>
 800bffa:	4635      	mov	r5, r6
 800bffc:	e7df      	b.n	800bfbe <_realloc_r+0x1e>

0800bffe <__sfputc_r>:
 800bffe:	6893      	ldr	r3, [r2, #8]
 800c000:	b410      	push	{r4}
 800c002:	3b01      	subs	r3, #1
 800c004:	2b00      	cmp	r3, #0
 800c006:	6093      	str	r3, [r2, #8]
 800c008:	da07      	bge.n	800c01a <__sfputc_r+0x1c>
 800c00a:	6994      	ldr	r4, [r2, #24]
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	db01      	blt.n	800c014 <__sfputc_r+0x16>
 800c010:	290a      	cmp	r1, #10
 800c012:	d102      	bne.n	800c01a <__sfputc_r+0x1c>
 800c014:	bc10      	pop	{r4}
 800c016:	f000 b949 	b.w	800c2ac <__swbuf_r>
 800c01a:	6813      	ldr	r3, [r2, #0]
 800c01c:	1c58      	adds	r0, r3, #1
 800c01e:	6010      	str	r0, [r2, #0]
 800c020:	7019      	strb	r1, [r3, #0]
 800c022:	4608      	mov	r0, r1
 800c024:	bc10      	pop	{r4}
 800c026:	4770      	bx	lr

0800c028 <__sfputs_r>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	4606      	mov	r6, r0
 800c02c:	460f      	mov	r7, r1
 800c02e:	4614      	mov	r4, r2
 800c030:	18d5      	adds	r5, r2, r3
 800c032:	42ac      	cmp	r4, r5
 800c034:	d101      	bne.n	800c03a <__sfputs_r+0x12>
 800c036:	2000      	movs	r0, #0
 800c038:	e007      	b.n	800c04a <__sfputs_r+0x22>
 800c03a:	463a      	mov	r2, r7
 800c03c:	4630      	mov	r0, r6
 800c03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c042:	f7ff ffdc 	bl	800bffe <__sfputc_r>
 800c046:	1c43      	adds	r3, r0, #1
 800c048:	d1f3      	bne.n	800c032 <__sfputs_r+0xa>
 800c04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c04c <_vfiprintf_r>:
 800c04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c050:	460d      	mov	r5, r1
 800c052:	4614      	mov	r4, r2
 800c054:	4698      	mov	r8, r3
 800c056:	4606      	mov	r6, r0
 800c058:	b09d      	sub	sp, #116	; 0x74
 800c05a:	b118      	cbz	r0, 800c064 <_vfiprintf_r+0x18>
 800c05c:	6983      	ldr	r3, [r0, #24]
 800c05e:	b90b      	cbnz	r3, 800c064 <_vfiprintf_r+0x18>
 800c060:	f000 fb02 	bl	800c668 <__sinit>
 800c064:	4b89      	ldr	r3, [pc, #548]	; (800c28c <_vfiprintf_r+0x240>)
 800c066:	429d      	cmp	r5, r3
 800c068:	d11b      	bne.n	800c0a2 <_vfiprintf_r+0x56>
 800c06a:	6875      	ldr	r5, [r6, #4]
 800c06c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c06e:	07d9      	lsls	r1, r3, #31
 800c070:	d405      	bmi.n	800c07e <_vfiprintf_r+0x32>
 800c072:	89ab      	ldrh	r3, [r5, #12]
 800c074:	059a      	lsls	r2, r3, #22
 800c076:	d402      	bmi.n	800c07e <_vfiprintf_r+0x32>
 800c078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c07a:	f000 fb93 	bl	800c7a4 <__retarget_lock_acquire_recursive>
 800c07e:	89ab      	ldrh	r3, [r5, #12]
 800c080:	071b      	lsls	r3, r3, #28
 800c082:	d501      	bpl.n	800c088 <_vfiprintf_r+0x3c>
 800c084:	692b      	ldr	r3, [r5, #16]
 800c086:	b9eb      	cbnz	r3, 800c0c4 <_vfiprintf_r+0x78>
 800c088:	4629      	mov	r1, r5
 800c08a:	4630      	mov	r0, r6
 800c08c:	f000 f960 	bl	800c350 <__swsetup_r>
 800c090:	b1c0      	cbz	r0, 800c0c4 <_vfiprintf_r+0x78>
 800c092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c094:	07dc      	lsls	r4, r3, #31
 800c096:	d50e      	bpl.n	800c0b6 <_vfiprintf_r+0x6a>
 800c098:	f04f 30ff 	mov.w	r0, #4294967295
 800c09c:	b01d      	add	sp, #116	; 0x74
 800c09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a2:	4b7b      	ldr	r3, [pc, #492]	; (800c290 <_vfiprintf_r+0x244>)
 800c0a4:	429d      	cmp	r5, r3
 800c0a6:	d101      	bne.n	800c0ac <_vfiprintf_r+0x60>
 800c0a8:	68b5      	ldr	r5, [r6, #8]
 800c0aa:	e7df      	b.n	800c06c <_vfiprintf_r+0x20>
 800c0ac:	4b79      	ldr	r3, [pc, #484]	; (800c294 <_vfiprintf_r+0x248>)
 800c0ae:	429d      	cmp	r5, r3
 800c0b0:	bf08      	it	eq
 800c0b2:	68f5      	ldreq	r5, [r6, #12]
 800c0b4:	e7da      	b.n	800c06c <_vfiprintf_r+0x20>
 800c0b6:	89ab      	ldrh	r3, [r5, #12]
 800c0b8:	0598      	lsls	r0, r3, #22
 800c0ba:	d4ed      	bmi.n	800c098 <_vfiprintf_r+0x4c>
 800c0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0be:	f000 fb72 	bl	800c7a6 <__retarget_lock_release_recursive>
 800c0c2:	e7e9      	b.n	800c098 <_vfiprintf_r+0x4c>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0c8:	2320      	movs	r3, #32
 800c0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0ce:	2330      	movs	r3, #48	; 0x30
 800c0d0:	f04f 0901 	mov.w	r9, #1
 800c0d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c298 <_vfiprintf_r+0x24c>
 800c0dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0e0:	4623      	mov	r3, r4
 800c0e2:	469a      	mov	sl, r3
 800c0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e8:	b10a      	cbz	r2, 800c0ee <_vfiprintf_r+0xa2>
 800c0ea:	2a25      	cmp	r2, #37	; 0x25
 800c0ec:	d1f9      	bne.n	800c0e2 <_vfiprintf_r+0x96>
 800c0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c0f2:	d00b      	beq.n	800c10c <_vfiprintf_r+0xc0>
 800c0f4:	465b      	mov	r3, fp
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7ff ff94 	bl	800c028 <__sfputs_r>
 800c100:	3001      	adds	r0, #1
 800c102:	f000 80aa 	beq.w	800c25a <_vfiprintf_r+0x20e>
 800c106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c108:	445a      	add	r2, fp
 800c10a:	9209      	str	r2, [sp, #36]	; 0x24
 800c10c:	f89a 3000 	ldrb.w	r3, [sl]
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 80a2 	beq.w	800c25a <_vfiprintf_r+0x20e>
 800c116:	2300      	movs	r3, #0
 800c118:	f04f 32ff 	mov.w	r2, #4294967295
 800c11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c120:	f10a 0a01 	add.w	sl, sl, #1
 800c124:	9304      	str	r3, [sp, #16]
 800c126:	9307      	str	r3, [sp, #28]
 800c128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c12c:	931a      	str	r3, [sp, #104]	; 0x68
 800c12e:	4654      	mov	r4, sl
 800c130:	2205      	movs	r2, #5
 800c132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c136:	4858      	ldr	r0, [pc, #352]	; (800c298 <_vfiprintf_r+0x24c>)
 800c138:	f7fe ff84 	bl	800b044 <memchr>
 800c13c:	9a04      	ldr	r2, [sp, #16]
 800c13e:	b9d8      	cbnz	r0, 800c178 <_vfiprintf_r+0x12c>
 800c140:	06d1      	lsls	r1, r2, #27
 800c142:	bf44      	itt	mi
 800c144:	2320      	movmi	r3, #32
 800c146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c14a:	0713      	lsls	r3, r2, #28
 800c14c:	bf44      	itt	mi
 800c14e:	232b      	movmi	r3, #43	; 0x2b
 800c150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c154:	f89a 3000 	ldrb.w	r3, [sl]
 800c158:	2b2a      	cmp	r3, #42	; 0x2a
 800c15a:	d015      	beq.n	800c188 <_vfiprintf_r+0x13c>
 800c15c:	4654      	mov	r4, sl
 800c15e:	2000      	movs	r0, #0
 800c160:	f04f 0c0a 	mov.w	ip, #10
 800c164:	9a07      	ldr	r2, [sp, #28]
 800c166:	4621      	mov	r1, r4
 800c168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c16c:	3b30      	subs	r3, #48	; 0x30
 800c16e:	2b09      	cmp	r3, #9
 800c170:	d94e      	bls.n	800c210 <_vfiprintf_r+0x1c4>
 800c172:	b1b0      	cbz	r0, 800c1a2 <_vfiprintf_r+0x156>
 800c174:	9207      	str	r2, [sp, #28]
 800c176:	e014      	b.n	800c1a2 <_vfiprintf_r+0x156>
 800c178:	eba0 0308 	sub.w	r3, r0, r8
 800c17c:	fa09 f303 	lsl.w	r3, r9, r3
 800c180:	4313      	orrs	r3, r2
 800c182:	46a2      	mov	sl, r4
 800c184:	9304      	str	r3, [sp, #16]
 800c186:	e7d2      	b.n	800c12e <_vfiprintf_r+0xe2>
 800c188:	9b03      	ldr	r3, [sp, #12]
 800c18a:	1d19      	adds	r1, r3, #4
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	9103      	str	r1, [sp, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	bfbb      	ittet	lt
 800c194:	425b      	neglt	r3, r3
 800c196:	f042 0202 	orrlt.w	r2, r2, #2
 800c19a:	9307      	strge	r3, [sp, #28]
 800c19c:	9307      	strlt	r3, [sp, #28]
 800c19e:	bfb8      	it	lt
 800c1a0:	9204      	strlt	r2, [sp, #16]
 800c1a2:	7823      	ldrb	r3, [r4, #0]
 800c1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c1a6:	d10c      	bne.n	800c1c2 <_vfiprintf_r+0x176>
 800c1a8:	7863      	ldrb	r3, [r4, #1]
 800c1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ac:	d135      	bne.n	800c21a <_vfiprintf_r+0x1ce>
 800c1ae:	9b03      	ldr	r3, [sp, #12]
 800c1b0:	3402      	adds	r4, #2
 800c1b2:	1d1a      	adds	r2, r3, #4
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	9203      	str	r2, [sp, #12]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	bfb8      	it	lt
 800c1bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1c0:	9305      	str	r3, [sp, #20]
 800c1c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c29c <_vfiprintf_r+0x250>
 800c1c6:	2203      	movs	r2, #3
 800c1c8:	4650      	mov	r0, sl
 800c1ca:	7821      	ldrb	r1, [r4, #0]
 800c1cc:	f7fe ff3a 	bl	800b044 <memchr>
 800c1d0:	b140      	cbz	r0, 800c1e4 <_vfiprintf_r+0x198>
 800c1d2:	2340      	movs	r3, #64	; 0x40
 800c1d4:	eba0 000a 	sub.w	r0, r0, sl
 800c1d8:	fa03 f000 	lsl.w	r0, r3, r0
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	3401      	adds	r4, #1
 800c1e0:	4303      	orrs	r3, r0
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e8:	2206      	movs	r2, #6
 800c1ea:	482d      	ldr	r0, [pc, #180]	; (800c2a0 <_vfiprintf_r+0x254>)
 800c1ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1f0:	f7fe ff28 	bl	800b044 <memchr>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d03f      	beq.n	800c278 <_vfiprintf_r+0x22c>
 800c1f8:	4b2a      	ldr	r3, [pc, #168]	; (800c2a4 <_vfiprintf_r+0x258>)
 800c1fa:	bb1b      	cbnz	r3, 800c244 <_vfiprintf_r+0x1f8>
 800c1fc:	9b03      	ldr	r3, [sp, #12]
 800c1fe:	3307      	adds	r3, #7
 800c200:	f023 0307 	bic.w	r3, r3, #7
 800c204:	3308      	adds	r3, #8
 800c206:	9303      	str	r3, [sp, #12]
 800c208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c20a:	443b      	add	r3, r7
 800c20c:	9309      	str	r3, [sp, #36]	; 0x24
 800c20e:	e767      	b.n	800c0e0 <_vfiprintf_r+0x94>
 800c210:	460c      	mov	r4, r1
 800c212:	2001      	movs	r0, #1
 800c214:	fb0c 3202 	mla	r2, ip, r2, r3
 800c218:	e7a5      	b.n	800c166 <_vfiprintf_r+0x11a>
 800c21a:	2300      	movs	r3, #0
 800c21c:	f04f 0c0a 	mov.w	ip, #10
 800c220:	4619      	mov	r1, r3
 800c222:	3401      	adds	r4, #1
 800c224:	9305      	str	r3, [sp, #20]
 800c226:	4620      	mov	r0, r4
 800c228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c22c:	3a30      	subs	r2, #48	; 0x30
 800c22e:	2a09      	cmp	r2, #9
 800c230:	d903      	bls.n	800c23a <_vfiprintf_r+0x1ee>
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0c5      	beq.n	800c1c2 <_vfiprintf_r+0x176>
 800c236:	9105      	str	r1, [sp, #20]
 800c238:	e7c3      	b.n	800c1c2 <_vfiprintf_r+0x176>
 800c23a:	4604      	mov	r4, r0
 800c23c:	2301      	movs	r3, #1
 800c23e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c242:	e7f0      	b.n	800c226 <_vfiprintf_r+0x1da>
 800c244:	ab03      	add	r3, sp, #12
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	462a      	mov	r2, r5
 800c24a:	4630      	mov	r0, r6
 800c24c:	4b16      	ldr	r3, [pc, #88]	; (800c2a8 <_vfiprintf_r+0x25c>)
 800c24e:	a904      	add	r1, sp, #16
 800c250:	f7fc f878 	bl	8008344 <_printf_float>
 800c254:	4607      	mov	r7, r0
 800c256:	1c78      	adds	r0, r7, #1
 800c258:	d1d6      	bne.n	800c208 <_vfiprintf_r+0x1bc>
 800c25a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c25c:	07d9      	lsls	r1, r3, #31
 800c25e:	d405      	bmi.n	800c26c <_vfiprintf_r+0x220>
 800c260:	89ab      	ldrh	r3, [r5, #12]
 800c262:	059a      	lsls	r2, r3, #22
 800c264:	d402      	bmi.n	800c26c <_vfiprintf_r+0x220>
 800c266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c268:	f000 fa9d 	bl	800c7a6 <__retarget_lock_release_recursive>
 800c26c:	89ab      	ldrh	r3, [r5, #12]
 800c26e:	065b      	lsls	r3, r3, #25
 800c270:	f53f af12 	bmi.w	800c098 <_vfiprintf_r+0x4c>
 800c274:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c276:	e711      	b.n	800c09c <_vfiprintf_r+0x50>
 800c278:	ab03      	add	r3, sp, #12
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	462a      	mov	r2, r5
 800c27e:	4630      	mov	r0, r6
 800c280:	4b09      	ldr	r3, [pc, #36]	; (800c2a8 <_vfiprintf_r+0x25c>)
 800c282:	a904      	add	r1, sp, #16
 800c284:	f7fc fafa 	bl	800887c <_printf_i>
 800c288:	e7e4      	b.n	800c254 <_vfiprintf_r+0x208>
 800c28a:	bf00      	nop
 800c28c:	0800cfac 	.word	0x0800cfac
 800c290:	0800cfcc 	.word	0x0800cfcc
 800c294:	0800cf8c 	.word	0x0800cf8c
 800c298:	0800cf3c 	.word	0x0800cf3c
 800c29c:	0800cf42 	.word	0x0800cf42
 800c2a0:	0800cf46 	.word	0x0800cf46
 800c2a4:	08008345 	.word	0x08008345
 800c2a8:	0800c029 	.word	0x0800c029

0800c2ac <__swbuf_r>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	460e      	mov	r6, r1
 800c2b0:	4614      	mov	r4, r2
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	b118      	cbz	r0, 800c2be <__swbuf_r+0x12>
 800c2b6:	6983      	ldr	r3, [r0, #24]
 800c2b8:	b90b      	cbnz	r3, 800c2be <__swbuf_r+0x12>
 800c2ba:	f000 f9d5 	bl	800c668 <__sinit>
 800c2be:	4b21      	ldr	r3, [pc, #132]	; (800c344 <__swbuf_r+0x98>)
 800c2c0:	429c      	cmp	r4, r3
 800c2c2:	d12b      	bne.n	800c31c <__swbuf_r+0x70>
 800c2c4:	686c      	ldr	r4, [r5, #4]
 800c2c6:	69a3      	ldr	r3, [r4, #24]
 800c2c8:	60a3      	str	r3, [r4, #8]
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	071a      	lsls	r2, r3, #28
 800c2ce:	d52f      	bpl.n	800c330 <__swbuf_r+0x84>
 800c2d0:	6923      	ldr	r3, [r4, #16]
 800c2d2:	b36b      	cbz	r3, 800c330 <__swbuf_r+0x84>
 800c2d4:	6923      	ldr	r3, [r4, #16]
 800c2d6:	6820      	ldr	r0, [r4, #0]
 800c2d8:	b2f6      	uxtb	r6, r6
 800c2da:	1ac0      	subs	r0, r0, r3
 800c2dc:	6963      	ldr	r3, [r4, #20]
 800c2de:	4637      	mov	r7, r6
 800c2e0:	4283      	cmp	r3, r0
 800c2e2:	dc04      	bgt.n	800c2ee <__swbuf_r+0x42>
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f000 f92a 	bl	800c540 <_fflush_r>
 800c2ec:	bb30      	cbnz	r0, 800c33c <__swbuf_r+0x90>
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	3001      	adds	r0, #1
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	60a3      	str	r3, [r4, #8]
 800c2f6:	6823      	ldr	r3, [r4, #0]
 800c2f8:	1c5a      	adds	r2, r3, #1
 800c2fa:	6022      	str	r2, [r4, #0]
 800c2fc:	701e      	strb	r6, [r3, #0]
 800c2fe:	6963      	ldr	r3, [r4, #20]
 800c300:	4283      	cmp	r3, r0
 800c302:	d004      	beq.n	800c30e <__swbuf_r+0x62>
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	07db      	lsls	r3, r3, #31
 800c308:	d506      	bpl.n	800c318 <__swbuf_r+0x6c>
 800c30a:	2e0a      	cmp	r6, #10
 800c30c:	d104      	bne.n	800c318 <__swbuf_r+0x6c>
 800c30e:	4621      	mov	r1, r4
 800c310:	4628      	mov	r0, r5
 800c312:	f000 f915 	bl	800c540 <_fflush_r>
 800c316:	b988      	cbnz	r0, 800c33c <__swbuf_r+0x90>
 800c318:	4638      	mov	r0, r7
 800c31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c31c:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <__swbuf_r+0x9c>)
 800c31e:	429c      	cmp	r4, r3
 800c320:	d101      	bne.n	800c326 <__swbuf_r+0x7a>
 800c322:	68ac      	ldr	r4, [r5, #8]
 800c324:	e7cf      	b.n	800c2c6 <__swbuf_r+0x1a>
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <__swbuf_r+0xa0>)
 800c328:	429c      	cmp	r4, r3
 800c32a:	bf08      	it	eq
 800c32c:	68ec      	ldreq	r4, [r5, #12]
 800c32e:	e7ca      	b.n	800c2c6 <__swbuf_r+0x1a>
 800c330:	4621      	mov	r1, r4
 800c332:	4628      	mov	r0, r5
 800c334:	f000 f80c 	bl	800c350 <__swsetup_r>
 800c338:	2800      	cmp	r0, #0
 800c33a:	d0cb      	beq.n	800c2d4 <__swbuf_r+0x28>
 800c33c:	f04f 37ff 	mov.w	r7, #4294967295
 800c340:	e7ea      	b.n	800c318 <__swbuf_r+0x6c>
 800c342:	bf00      	nop
 800c344:	0800cfac 	.word	0x0800cfac
 800c348:	0800cfcc 	.word	0x0800cfcc
 800c34c:	0800cf8c 	.word	0x0800cf8c

0800c350 <__swsetup_r>:
 800c350:	4b32      	ldr	r3, [pc, #200]	; (800c41c <__swsetup_r+0xcc>)
 800c352:	b570      	push	{r4, r5, r6, lr}
 800c354:	681d      	ldr	r5, [r3, #0]
 800c356:	4606      	mov	r6, r0
 800c358:	460c      	mov	r4, r1
 800c35a:	b125      	cbz	r5, 800c366 <__swsetup_r+0x16>
 800c35c:	69ab      	ldr	r3, [r5, #24]
 800c35e:	b913      	cbnz	r3, 800c366 <__swsetup_r+0x16>
 800c360:	4628      	mov	r0, r5
 800c362:	f000 f981 	bl	800c668 <__sinit>
 800c366:	4b2e      	ldr	r3, [pc, #184]	; (800c420 <__swsetup_r+0xd0>)
 800c368:	429c      	cmp	r4, r3
 800c36a:	d10f      	bne.n	800c38c <__swsetup_r+0x3c>
 800c36c:	686c      	ldr	r4, [r5, #4]
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c374:	0719      	lsls	r1, r3, #28
 800c376:	d42c      	bmi.n	800c3d2 <__swsetup_r+0x82>
 800c378:	06dd      	lsls	r5, r3, #27
 800c37a:	d411      	bmi.n	800c3a0 <__swsetup_r+0x50>
 800c37c:	2309      	movs	r3, #9
 800c37e:	6033      	str	r3, [r6, #0]
 800c380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c384:	f04f 30ff 	mov.w	r0, #4294967295
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	e03e      	b.n	800c40a <__swsetup_r+0xba>
 800c38c:	4b25      	ldr	r3, [pc, #148]	; (800c424 <__swsetup_r+0xd4>)
 800c38e:	429c      	cmp	r4, r3
 800c390:	d101      	bne.n	800c396 <__swsetup_r+0x46>
 800c392:	68ac      	ldr	r4, [r5, #8]
 800c394:	e7eb      	b.n	800c36e <__swsetup_r+0x1e>
 800c396:	4b24      	ldr	r3, [pc, #144]	; (800c428 <__swsetup_r+0xd8>)
 800c398:	429c      	cmp	r4, r3
 800c39a:	bf08      	it	eq
 800c39c:	68ec      	ldreq	r4, [r5, #12]
 800c39e:	e7e6      	b.n	800c36e <__swsetup_r+0x1e>
 800c3a0:	0758      	lsls	r0, r3, #29
 800c3a2:	d512      	bpl.n	800c3ca <__swsetup_r+0x7a>
 800c3a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3a6:	b141      	cbz	r1, 800c3ba <__swsetup_r+0x6a>
 800c3a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3ac:	4299      	cmp	r1, r3
 800c3ae:	d002      	beq.n	800c3b6 <__swsetup_r+0x66>
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	f7ff fb2f 	bl	800ba14 <_free_r>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	6363      	str	r3, [r4, #52]	; 0x34
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	6063      	str	r3, [r4, #4]
 800c3c6:	6923      	ldr	r3, [r4, #16]
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	89a3      	ldrh	r3, [r4, #12]
 800c3cc:	f043 0308 	orr.w	r3, r3, #8
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	6923      	ldr	r3, [r4, #16]
 800c3d4:	b94b      	cbnz	r3, 800c3ea <__swsetup_r+0x9a>
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3e0:	d003      	beq.n	800c3ea <__swsetup_r+0x9a>
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f000 fa05 	bl	800c7f4 <__smakebuf_r>
 800c3ea:	89a0      	ldrh	r0, [r4, #12]
 800c3ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3f0:	f010 0301 	ands.w	r3, r0, #1
 800c3f4:	d00a      	beq.n	800c40c <__swsetup_r+0xbc>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	60a3      	str	r3, [r4, #8]
 800c3fa:	6963      	ldr	r3, [r4, #20]
 800c3fc:	425b      	negs	r3, r3
 800c3fe:	61a3      	str	r3, [r4, #24]
 800c400:	6923      	ldr	r3, [r4, #16]
 800c402:	b943      	cbnz	r3, 800c416 <__swsetup_r+0xc6>
 800c404:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c408:	d1ba      	bne.n	800c380 <__swsetup_r+0x30>
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	0781      	lsls	r1, r0, #30
 800c40e:	bf58      	it	pl
 800c410:	6963      	ldrpl	r3, [r4, #20]
 800c412:	60a3      	str	r3, [r4, #8]
 800c414:	e7f4      	b.n	800c400 <__swsetup_r+0xb0>
 800c416:	2000      	movs	r0, #0
 800c418:	e7f7      	b.n	800c40a <__swsetup_r+0xba>
 800c41a:	bf00      	nop
 800c41c:	20000024 	.word	0x20000024
 800c420:	0800cfac 	.word	0x0800cfac
 800c424:	0800cfcc 	.word	0x0800cfcc
 800c428:	0800cf8c 	.word	0x0800cf8c

0800c42c <abort>:
 800c42c:	2006      	movs	r0, #6
 800c42e:	b508      	push	{r3, lr}
 800c430:	f000 fa50 	bl	800c8d4 <raise>
 800c434:	2001      	movs	r0, #1
 800c436:	f7f6 f9fe 	bl	8002836 <_exit>
	...

0800c43c <__sflush_r>:
 800c43c:	898a      	ldrh	r2, [r1, #12]
 800c43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c440:	4605      	mov	r5, r0
 800c442:	0710      	lsls	r0, r2, #28
 800c444:	460c      	mov	r4, r1
 800c446:	d457      	bmi.n	800c4f8 <__sflush_r+0xbc>
 800c448:	684b      	ldr	r3, [r1, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	dc04      	bgt.n	800c458 <__sflush_r+0x1c>
 800c44e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c450:	2b00      	cmp	r3, #0
 800c452:	dc01      	bgt.n	800c458 <__sflush_r+0x1c>
 800c454:	2000      	movs	r0, #0
 800c456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c45a:	2e00      	cmp	r6, #0
 800c45c:	d0fa      	beq.n	800c454 <__sflush_r+0x18>
 800c45e:	2300      	movs	r3, #0
 800c460:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c464:	682f      	ldr	r7, [r5, #0]
 800c466:	602b      	str	r3, [r5, #0]
 800c468:	d032      	beq.n	800c4d0 <__sflush_r+0x94>
 800c46a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	075a      	lsls	r2, r3, #29
 800c470:	d505      	bpl.n	800c47e <__sflush_r+0x42>
 800c472:	6863      	ldr	r3, [r4, #4]
 800c474:	1ac0      	subs	r0, r0, r3
 800c476:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c478:	b10b      	cbz	r3, 800c47e <__sflush_r+0x42>
 800c47a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c47c:	1ac0      	subs	r0, r0, r3
 800c47e:	2300      	movs	r3, #0
 800c480:	4602      	mov	r2, r0
 800c482:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c484:	4628      	mov	r0, r5
 800c486:	6a21      	ldr	r1, [r4, #32]
 800c488:	47b0      	blx	r6
 800c48a:	1c43      	adds	r3, r0, #1
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	d106      	bne.n	800c49e <__sflush_r+0x62>
 800c490:	6829      	ldr	r1, [r5, #0]
 800c492:	291d      	cmp	r1, #29
 800c494:	d82c      	bhi.n	800c4f0 <__sflush_r+0xb4>
 800c496:	4a29      	ldr	r2, [pc, #164]	; (800c53c <__sflush_r+0x100>)
 800c498:	40ca      	lsrs	r2, r1
 800c49a:	07d6      	lsls	r6, r2, #31
 800c49c:	d528      	bpl.n	800c4f0 <__sflush_r+0xb4>
 800c49e:	2200      	movs	r2, #0
 800c4a0:	6062      	str	r2, [r4, #4]
 800c4a2:	6922      	ldr	r2, [r4, #16]
 800c4a4:	04d9      	lsls	r1, r3, #19
 800c4a6:	6022      	str	r2, [r4, #0]
 800c4a8:	d504      	bpl.n	800c4b4 <__sflush_r+0x78>
 800c4aa:	1c42      	adds	r2, r0, #1
 800c4ac:	d101      	bne.n	800c4b2 <__sflush_r+0x76>
 800c4ae:	682b      	ldr	r3, [r5, #0]
 800c4b0:	b903      	cbnz	r3, 800c4b4 <__sflush_r+0x78>
 800c4b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c4b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4b6:	602f      	str	r7, [r5, #0]
 800c4b8:	2900      	cmp	r1, #0
 800c4ba:	d0cb      	beq.n	800c454 <__sflush_r+0x18>
 800c4bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4c0:	4299      	cmp	r1, r3
 800c4c2:	d002      	beq.n	800c4ca <__sflush_r+0x8e>
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f7ff faa5 	bl	800ba14 <_free_r>
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c4ce:	e7c2      	b.n	800c456 <__sflush_r+0x1a>
 800c4d0:	6a21      	ldr	r1, [r4, #32]
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	47b0      	blx	r6
 800c4d8:	1c41      	adds	r1, r0, #1
 800c4da:	d1c7      	bne.n	800c46c <__sflush_r+0x30>
 800c4dc:	682b      	ldr	r3, [r5, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d0c4      	beq.n	800c46c <__sflush_r+0x30>
 800c4e2:	2b1d      	cmp	r3, #29
 800c4e4:	d001      	beq.n	800c4ea <__sflush_r+0xae>
 800c4e6:	2b16      	cmp	r3, #22
 800c4e8:	d101      	bne.n	800c4ee <__sflush_r+0xb2>
 800c4ea:	602f      	str	r7, [r5, #0]
 800c4ec:	e7b2      	b.n	800c454 <__sflush_r+0x18>
 800c4ee:	89a3      	ldrh	r3, [r4, #12]
 800c4f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4f4:	81a3      	strh	r3, [r4, #12]
 800c4f6:	e7ae      	b.n	800c456 <__sflush_r+0x1a>
 800c4f8:	690f      	ldr	r7, [r1, #16]
 800c4fa:	2f00      	cmp	r7, #0
 800c4fc:	d0aa      	beq.n	800c454 <__sflush_r+0x18>
 800c4fe:	0793      	lsls	r3, r2, #30
 800c500:	bf18      	it	ne
 800c502:	2300      	movne	r3, #0
 800c504:	680e      	ldr	r6, [r1, #0]
 800c506:	bf08      	it	eq
 800c508:	694b      	ldreq	r3, [r1, #20]
 800c50a:	1bf6      	subs	r6, r6, r7
 800c50c:	600f      	str	r7, [r1, #0]
 800c50e:	608b      	str	r3, [r1, #8]
 800c510:	2e00      	cmp	r6, #0
 800c512:	dd9f      	ble.n	800c454 <__sflush_r+0x18>
 800c514:	4633      	mov	r3, r6
 800c516:	463a      	mov	r2, r7
 800c518:	4628      	mov	r0, r5
 800c51a:	6a21      	ldr	r1, [r4, #32]
 800c51c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c520:	47e0      	blx	ip
 800c522:	2800      	cmp	r0, #0
 800c524:	dc06      	bgt.n	800c534 <__sflush_r+0xf8>
 800c526:	89a3      	ldrh	r3, [r4, #12]
 800c528:	f04f 30ff 	mov.w	r0, #4294967295
 800c52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c530:	81a3      	strh	r3, [r4, #12]
 800c532:	e790      	b.n	800c456 <__sflush_r+0x1a>
 800c534:	4407      	add	r7, r0
 800c536:	1a36      	subs	r6, r6, r0
 800c538:	e7ea      	b.n	800c510 <__sflush_r+0xd4>
 800c53a:	bf00      	nop
 800c53c:	20400001 	.word	0x20400001

0800c540 <_fflush_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	690b      	ldr	r3, [r1, #16]
 800c544:	4605      	mov	r5, r0
 800c546:	460c      	mov	r4, r1
 800c548:	b913      	cbnz	r3, 800c550 <_fflush_r+0x10>
 800c54a:	2500      	movs	r5, #0
 800c54c:	4628      	mov	r0, r5
 800c54e:	bd38      	pop	{r3, r4, r5, pc}
 800c550:	b118      	cbz	r0, 800c55a <_fflush_r+0x1a>
 800c552:	6983      	ldr	r3, [r0, #24]
 800c554:	b90b      	cbnz	r3, 800c55a <_fflush_r+0x1a>
 800c556:	f000 f887 	bl	800c668 <__sinit>
 800c55a:	4b14      	ldr	r3, [pc, #80]	; (800c5ac <_fflush_r+0x6c>)
 800c55c:	429c      	cmp	r4, r3
 800c55e:	d11b      	bne.n	800c598 <_fflush_r+0x58>
 800c560:	686c      	ldr	r4, [r5, #4]
 800c562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d0ef      	beq.n	800c54a <_fflush_r+0xa>
 800c56a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c56c:	07d0      	lsls	r0, r2, #31
 800c56e:	d404      	bmi.n	800c57a <_fflush_r+0x3a>
 800c570:	0599      	lsls	r1, r3, #22
 800c572:	d402      	bmi.n	800c57a <_fflush_r+0x3a>
 800c574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c576:	f000 f915 	bl	800c7a4 <__retarget_lock_acquire_recursive>
 800c57a:	4628      	mov	r0, r5
 800c57c:	4621      	mov	r1, r4
 800c57e:	f7ff ff5d 	bl	800c43c <__sflush_r>
 800c582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c584:	4605      	mov	r5, r0
 800c586:	07da      	lsls	r2, r3, #31
 800c588:	d4e0      	bmi.n	800c54c <_fflush_r+0xc>
 800c58a:	89a3      	ldrh	r3, [r4, #12]
 800c58c:	059b      	lsls	r3, r3, #22
 800c58e:	d4dd      	bmi.n	800c54c <_fflush_r+0xc>
 800c590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c592:	f000 f908 	bl	800c7a6 <__retarget_lock_release_recursive>
 800c596:	e7d9      	b.n	800c54c <_fflush_r+0xc>
 800c598:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <_fflush_r+0x70>)
 800c59a:	429c      	cmp	r4, r3
 800c59c:	d101      	bne.n	800c5a2 <_fflush_r+0x62>
 800c59e:	68ac      	ldr	r4, [r5, #8]
 800c5a0:	e7df      	b.n	800c562 <_fflush_r+0x22>
 800c5a2:	4b04      	ldr	r3, [pc, #16]	; (800c5b4 <_fflush_r+0x74>)
 800c5a4:	429c      	cmp	r4, r3
 800c5a6:	bf08      	it	eq
 800c5a8:	68ec      	ldreq	r4, [r5, #12]
 800c5aa:	e7da      	b.n	800c562 <_fflush_r+0x22>
 800c5ac:	0800cfac 	.word	0x0800cfac
 800c5b0:	0800cfcc 	.word	0x0800cfcc
 800c5b4:	0800cf8c 	.word	0x0800cf8c

0800c5b8 <std>:
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	b510      	push	{r4, lr}
 800c5bc:	4604      	mov	r4, r0
 800c5be:	e9c0 3300 	strd	r3, r3, [r0]
 800c5c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5c6:	6083      	str	r3, [r0, #8]
 800c5c8:	8181      	strh	r1, [r0, #12]
 800c5ca:	6643      	str	r3, [r0, #100]	; 0x64
 800c5cc:	81c2      	strh	r2, [r0, #14]
 800c5ce:	6183      	str	r3, [r0, #24]
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	2208      	movs	r2, #8
 800c5d4:	305c      	adds	r0, #92	; 0x5c
 800c5d6:	f7fb fe0f 	bl	80081f8 <memset>
 800c5da:	4b05      	ldr	r3, [pc, #20]	; (800c5f0 <std+0x38>)
 800c5dc:	6224      	str	r4, [r4, #32]
 800c5de:	6263      	str	r3, [r4, #36]	; 0x24
 800c5e0:	4b04      	ldr	r3, [pc, #16]	; (800c5f4 <std+0x3c>)
 800c5e2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5e4:	4b04      	ldr	r3, [pc, #16]	; (800c5f8 <std+0x40>)
 800c5e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5e8:	4b04      	ldr	r3, [pc, #16]	; (800c5fc <std+0x44>)
 800c5ea:	6323      	str	r3, [r4, #48]	; 0x30
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	bf00      	nop
 800c5f0:	0800c90d 	.word	0x0800c90d
 800c5f4:	0800c92f 	.word	0x0800c92f
 800c5f8:	0800c967 	.word	0x0800c967
 800c5fc:	0800c98b 	.word	0x0800c98b

0800c600 <_cleanup_r>:
 800c600:	4901      	ldr	r1, [pc, #4]	; (800c608 <_cleanup_r+0x8>)
 800c602:	f000 b8af 	b.w	800c764 <_fwalk_reent>
 800c606:	bf00      	nop
 800c608:	0800c541 	.word	0x0800c541

0800c60c <__sfmoreglue>:
 800c60c:	2268      	movs	r2, #104	; 0x68
 800c60e:	b570      	push	{r4, r5, r6, lr}
 800c610:	1e4d      	subs	r5, r1, #1
 800c612:	4355      	muls	r5, r2
 800c614:	460e      	mov	r6, r1
 800c616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c61a:	f7ff fa63 	bl	800bae4 <_malloc_r>
 800c61e:	4604      	mov	r4, r0
 800c620:	b140      	cbz	r0, 800c634 <__sfmoreglue+0x28>
 800c622:	2100      	movs	r1, #0
 800c624:	e9c0 1600 	strd	r1, r6, [r0]
 800c628:	300c      	adds	r0, #12
 800c62a:	60a0      	str	r0, [r4, #8]
 800c62c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c630:	f7fb fde2 	bl	80081f8 <memset>
 800c634:	4620      	mov	r0, r4
 800c636:	bd70      	pop	{r4, r5, r6, pc}

0800c638 <__sfp_lock_acquire>:
 800c638:	4801      	ldr	r0, [pc, #4]	; (800c640 <__sfp_lock_acquire+0x8>)
 800c63a:	f000 b8b3 	b.w	800c7a4 <__retarget_lock_acquire_recursive>
 800c63e:	bf00      	nop
 800c640:	20000801 	.word	0x20000801

0800c644 <__sfp_lock_release>:
 800c644:	4801      	ldr	r0, [pc, #4]	; (800c64c <__sfp_lock_release+0x8>)
 800c646:	f000 b8ae 	b.w	800c7a6 <__retarget_lock_release_recursive>
 800c64a:	bf00      	nop
 800c64c:	20000801 	.word	0x20000801

0800c650 <__sinit_lock_acquire>:
 800c650:	4801      	ldr	r0, [pc, #4]	; (800c658 <__sinit_lock_acquire+0x8>)
 800c652:	f000 b8a7 	b.w	800c7a4 <__retarget_lock_acquire_recursive>
 800c656:	bf00      	nop
 800c658:	20000802 	.word	0x20000802

0800c65c <__sinit_lock_release>:
 800c65c:	4801      	ldr	r0, [pc, #4]	; (800c664 <__sinit_lock_release+0x8>)
 800c65e:	f000 b8a2 	b.w	800c7a6 <__retarget_lock_release_recursive>
 800c662:	bf00      	nop
 800c664:	20000802 	.word	0x20000802

0800c668 <__sinit>:
 800c668:	b510      	push	{r4, lr}
 800c66a:	4604      	mov	r4, r0
 800c66c:	f7ff fff0 	bl	800c650 <__sinit_lock_acquire>
 800c670:	69a3      	ldr	r3, [r4, #24]
 800c672:	b11b      	cbz	r3, 800c67c <__sinit+0x14>
 800c674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c678:	f7ff bff0 	b.w	800c65c <__sinit_lock_release>
 800c67c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c680:	6523      	str	r3, [r4, #80]	; 0x50
 800c682:	4b13      	ldr	r3, [pc, #76]	; (800c6d0 <__sinit+0x68>)
 800c684:	4a13      	ldr	r2, [pc, #76]	; (800c6d4 <__sinit+0x6c>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	62a2      	str	r2, [r4, #40]	; 0x28
 800c68a:	42a3      	cmp	r3, r4
 800c68c:	bf08      	it	eq
 800c68e:	2301      	moveq	r3, #1
 800c690:	4620      	mov	r0, r4
 800c692:	bf08      	it	eq
 800c694:	61a3      	streq	r3, [r4, #24]
 800c696:	f000 f81f 	bl	800c6d8 <__sfp>
 800c69a:	6060      	str	r0, [r4, #4]
 800c69c:	4620      	mov	r0, r4
 800c69e:	f000 f81b 	bl	800c6d8 <__sfp>
 800c6a2:	60a0      	str	r0, [r4, #8]
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 f817 	bl	800c6d8 <__sfp>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2104      	movs	r1, #4
 800c6ae:	60e0      	str	r0, [r4, #12]
 800c6b0:	6860      	ldr	r0, [r4, #4]
 800c6b2:	f7ff ff81 	bl	800c5b8 <std>
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	2109      	movs	r1, #9
 800c6ba:	68a0      	ldr	r0, [r4, #8]
 800c6bc:	f7ff ff7c 	bl	800c5b8 <std>
 800c6c0:	2202      	movs	r2, #2
 800c6c2:	2112      	movs	r1, #18
 800c6c4:	68e0      	ldr	r0, [r4, #12]
 800c6c6:	f7ff ff77 	bl	800c5b8 <std>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	61a3      	str	r3, [r4, #24]
 800c6ce:	e7d1      	b.n	800c674 <__sinit+0xc>
 800c6d0:	0800cb48 	.word	0x0800cb48
 800c6d4:	0800c601 	.word	0x0800c601

0800c6d8 <__sfp>:
 800c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6da:	4607      	mov	r7, r0
 800c6dc:	f7ff ffac 	bl	800c638 <__sfp_lock_acquire>
 800c6e0:	4b1e      	ldr	r3, [pc, #120]	; (800c75c <__sfp+0x84>)
 800c6e2:	681e      	ldr	r6, [r3, #0]
 800c6e4:	69b3      	ldr	r3, [r6, #24]
 800c6e6:	b913      	cbnz	r3, 800c6ee <__sfp+0x16>
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f7ff ffbd 	bl	800c668 <__sinit>
 800c6ee:	3648      	adds	r6, #72	; 0x48
 800c6f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	d503      	bpl.n	800c700 <__sfp+0x28>
 800c6f8:	6833      	ldr	r3, [r6, #0]
 800c6fa:	b30b      	cbz	r3, 800c740 <__sfp+0x68>
 800c6fc:	6836      	ldr	r6, [r6, #0]
 800c6fe:	e7f7      	b.n	800c6f0 <__sfp+0x18>
 800c700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c704:	b9d5      	cbnz	r5, 800c73c <__sfp+0x64>
 800c706:	4b16      	ldr	r3, [pc, #88]	; (800c760 <__sfp+0x88>)
 800c708:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c70c:	60e3      	str	r3, [r4, #12]
 800c70e:	6665      	str	r5, [r4, #100]	; 0x64
 800c710:	f000 f847 	bl	800c7a2 <__retarget_lock_init_recursive>
 800c714:	f7ff ff96 	bl	800c644 <__sfp_lock_release>
 800c718:	2208      	movs	r2, #8
 800c71a:	4629      	mov	r1, r5
 800c71c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c724:	6025      	str	r5, [r4, #0]
 800c726:	61a5      	str	r5, [r4, #24]
 800c728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c72c:	f7fb fd64 	bl	80081f8 <memset>
 800c730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c738:	4620      	mov	r0, r4
 800c73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c73c:	3468      	adds	r4, #104	; 0x68
 800c73e:	e7d9      	b.n	800c6f4 <__sfp+0x1c>
 800c740:	2104      	movs	r1, #4
 800c742:	4638      	mov	r0, r7
 800c744:	f7ff ff62 	bl	800c60c <__sfmoreglue>
 800c748:	4604      	mov	r4, r0
 800c74a:	6030      	str	r0, [r6, #0]
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1d5      	bne.n	800c6fc <__sfp+0x24>
 800c750:	f7ff ff78 	bl	800c644 <__sfp_lock_release>
 800c754:	230c      	movs	r3, #12
 800c756:	603b      	str	r3, [r7, #0]
 800c758:	e7ee      	b.n	800c738 <__sfp+0x60>
 800c75a:	bf00      	nop
 800c75c:	0800cb48 	.word	0x0800cb48
 800c760:	ffff0001 	.word	0xffff0001

0800c764 <_fwalk_reent>:
 800c764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c768:	4606      	mov	r6, r0
 800c76a:	4688      	mov	r8, r1
 800c76c:	2700      	movs	r7, #0
 800c76e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c772:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c776:	f1b9 0901 	subs.w	r9, r9, #1
 800c77a:	d505      	bpl.n	800c788 <_fwalk_reent+0x24>
 800c77c:	6824      	ldr	r4, [r4, #0]
 800c77e:	2c00      	cmp	r4, #0
 800c780:	d1f7      	bne.n	800c772 <_fwalk_reent+0xe>
 800c782:	4638      	mov	r0, r7
 800c784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c788:	89ab      	ldrh	r3, [r5, #12]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d907      	bls.n	800c79e <_fwalk_reent+0x3a>
 800c78e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c792:	3301      	adds	r3, #1
 800c794:	d003      	beq.n	800c79e <_fwalk_reent+0x3a>
 800c796:	4629      	mov	r1, r5
 800c798:	4630      	mov	r0, r6
 800c79a:	47c0      	blx	r8
 800c79c:	4307      	orrs	r7, r0
 800c79e:	3568      	adds	r5, #104	; 0x68
 800c7a0:	e7e9      	b.n	800c776 <_fwalk_reent+0x12>

0800c7a2 <__retarget_lock_init_recursive>:
 800c7a2:	4770      	bx	lr

0800c7a4 <__retarget_lock_acquire_recursive>:
 800c7a4:	4770      	bx	lr

0800c7a6 <__retarget_lock_release_recursive>:
 800c7a6:	4770      	bx	lr

0800c7a8 <__swhatbuf_r>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	460e      	mov	r6, r1
 800c7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b0:	4614      	mov	r4, r2
 800c7b2:	2900      	cmp	r1, #0
 800c7b4:	461d      	mov	r5, r3
 800c7b6:	b096      	sub	sp, #88	; 0x58
 800c7b8:	da08      	bge.n	800c7cc <__swhatbuf_r+0x24>
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c7c0:	602a      	str	r2, [r5, #0]
 800c7c2:	061a      	lsls	r2, r3, #24
 800c7c4:	d410      	bmi.n	800c7e8 <__swhatbuf_r+0x40>
 800c7c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ca:	e00e      	b.n	800c7ea <__swhatbuf_r+0x42>
 800c7cc:	466a      	mov	r2, sp
 800c7ce:	f000 f903 	bl	800c9d8 <_fstat_r>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	dbf1      	blt.n	800c7ba <__swhatbuf_r+0x12>
 800c7d6:	9a01      	ldr	r2, [sp, #4]
 800c7d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7e0:	425a      	negs	r2, r3
 800c7e2:	415a      	adcs	r2, r3
 800c7e4:	602a      	str	r2, [r5, #0]
 800c7e6:	e7ee      	b.n	800c7c6 <__swhatbuf_r+0x1e>
 800c7e8:	2340      	movs	r3, #64	; 0x40
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	b016      	add	sp, #88	; 0x58
 800c7f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c7f4 <__smakebuf_r>:
 800c7f4:	898b      	ldrh	r3, [r1, #12]
 800c7f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7f8:	079d      	lsls	r5, r3, #30
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	d507      	bpl.n	800c810 <__smakebuf_r+0x1c>
 800c800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	6123      	str	r3, [r4, #16]
 800c808:	2301      	movs	r3, #1
 800c80a:	6163      	str	r3, [r4, #20]
 800c80c:	b002      	add	sp, #8
 800c80e:	bd70      	pop	{r4, r5, r6, pc}
 800c810:	466a      	mov	r2, sp
 800c812:	ab01      	add	r3, sp, #4
 800c814:	f7ff ffc8 	bl	800c7a8 <__swhatbuf_r>
 800c818:	9900      	ldr	r1, [sp, #0]
 800c81a:	4605      	mov	r5, r0
 800c81c:	4630      	mov	r0, r6
 800c81e:	f7ff f961 	bl	800bae4 <_malloc_r>
 800c822:	b948      	cbnz	r0, 800c838 <__smakebuf_r+0x44>
 800c824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c828:	059a      	lsls	r2, r3, #22
 800c82a:	d4ef      	bmi.n	800c80c <__smakebuf_r+0x18>
 800c82c:	f023 0303 	bic.w	r3, r3, #3
 800c830:	f043 0302 	orr.w	r3, r3, #2
 800c834:	81a3      	strh	r3, [r4, #12]
 800c836:	e7e3      	b.n	800c800 <__smakebuf_r+0xc>
 800c838:	4b0d      	ldr	r3, [pc, #52]	; (800c870 <__smakebuf_r+0x7c>)
 800c83a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	6020      	str	r0, [r4, #0]
 800c840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	9b00      	ldr	r3, [sp, #0]
 800c848:	6120      	str	r0, [r4, #16]
 800c84a:	6163      	str	r3, [r4, #20]
 800c84c:	9b01      	ldr	r3, [sp, #4]
 800c84e:	b15b      	cbz	r3, 800c868 <__smakebuf_r+0x74>
 800c850:	4630      	mov	r0, r6
 800c852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c856:	f000 f8d1 	bl	800c9fc <_isatty_r>
 800c85a:	b128      	cbz	r0, 800c868 <__smakebuf_r+0x74>
 800c85c:	89a3      	ldrh	r3, [r4, #12]
 800c85e:	f023 0303 	bic.w	r3, r3, #3
 800c862:	f043 0301 	orr.w	r3, r3, #1
 800c866:	81a3      	strh	r3, [r4, #12]
 800c868:	89a0      	ldrh	r0, [r4, #12]
 800c86a:	4305      	orrs	r5, r0
 800c86c:	81a5      	strh	r5, [r4, #12]
 800c86e:	e7cd      	b.n	800c80c <__smakebuf_r+0x18>
 800c870:	0800c601 	.word	0x0800c601

0800c874 <_malloc_usable_size_r>:
 800c874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c878:	1f18      	subs	r0, r3, #4
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	bfbc      	itt	lt
 800c87e:	580b      	ldrlt	r3, [r1, r0]
 800c880:	18c0      	addlt	r0, r0, r3
 800c882:	4770      	bx	lr

0800c884 <_raise_r>:
 800c884:	291f      	cmp	r1, #31
 800c886:	b538      	push	{r3, r4, r5, lr}
 800c888:	4604      	mov	r4, r0
 800c88a:	460d      	mov	r5, r1
 800c88c:	d904      	bls.n	800c898 <_raise_r+0x14>
 800c88e:	2316      	movs	r3, #22
 800c890:	6003      	str	r3, [r0, #0]
 800c892:	f04f 30ff 	mov.w	r0, #4294967295
 800c896:	bd38      	pop	{r3, r4, r5, pc}
 800c898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c89a:	b112      	cbz	r2, 800c8a2 <_raise_r+0x1e>
 800c89c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8a0:	b94b      	cbnz	r3, 800c8b6 <_raise_r+0x32>
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f000 f830 	bl	800c908 <_getpid_r>
 800c8a8:	462a      	mov	r2, r5
 800c8aa:	4601      	mov	r1, r0
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8b2:	f000 b817 	b.w	800c8e4 <_kill_r>
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d00a      	beq.n	800c8d0 <_raise_r+0x4c>
 800c8ba:	1c59      	adds	r1, r3, #1
 800c8bc:	d103      	bne.n	800c8c6 <_raise_r+0x42>
 800c8be:	2316      	movs	r3, #22
 800c8c0:	6003      	str	r3, [r0, #0]
 800c8c2:	2001      	movs	r0, #1
 800c8c4:	e7e7      	b.n	800c896 <_raise_r+0x12>
 800c8c6:	2400      	movs	r4, #0
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8ce:	4798      	blx	r3
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	e7e0      	b.n	800c896 <_raise_r+0x12>

0800c8d4 <raise>:
 800c8d4:	4b02      	ldr	r3, [pc, #8]	; (800c8e0 <raise+0xc>)
 800c8d6:	4601      	mov	r1, r0
 800c8d8:	6818      	ldr	r0, [r3, #0]
 800c8da:	f7ff bfd3 	b.w	800c884 <_raise_r>
 800c8de:	bf00      	nop
 800c8e0:	20000024 	.word	0x20000024

0800c8e4 <_kill_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	4d06      	ldr	r5, [pc, #24]	; (800c904 <_kill_r+0x20>)
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	4611      	mov	r1, r2
 800c8f0:	602b      	str	r3, [r5, #0]
 800c8f2:	f7f5 ff90 	bl	8002816 <_kill>
 800c8f6:	1c43      	adds	r3, r0, #1
 800c8f8:	d102      	bne.n	800c900 <_kill_r+0x1c>
 800c8fa:	682b      	ldr	r3, [r5, #0]
 800c8fc:	b103      	cbz	r3, 800c900 <_kill_r+0x1c>
 800c8fe:	6023      	str	r3, [r4, #0]
 800c900:	bd38      	pop	{r3, r4, r5, pc}
 800c902:	bf00      	nop
 800c904:	200007fc 	.word	0x200007fc

0800c908 <_getpid_r>:
 800c908:	f7f5 bf7e 	b.w	8002808 <_getpid>

0800c90c <__sread>:
 800c90c:	b510      	push	{r4, lr}
 800c90e:	460c      	mov	r4, r1
 800c910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c914:	f000 f894 	bl	800ca40 <_read_r>
 800c918:	2800      	cmp	r0, #0
 800c91a:	bfab      	itete	ge
 800c91c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c91e:	89a3      	ldrhlt	r3, [r4, #12]
 800c920:	181b      	addge	r3, r3, r0
 800c922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c926:	bfac      	ite	ge
 800c928:	6563      	strge	r3, [r4, #84]	; 0x54
 800c92a:	81a3      	strhlt	r3, [r4, #12]
 800c92c:	bd10      	pop	{r4, pc}

0800c92e <__swrite>:
 800c92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c932:	461f      	mov	r7, r3
 800c934:	898b      	ldrh	r3, [r1, #12]
 800c936:	4605      	mov	r5, r0
 800c938:	05db      	lsls	r3, r3, #23
 800c93a:	460c      	mov	r4, r1
 800c93c:	4616      	mov	r6, r2
 800c93e:	d505      	bpl.n	800c94c <__swrite+0x1e>
 800c940:	2302      	movs	r3, #2
 800c942:	2200      	movs	r2, #0
 800c944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c948:	f000 f868 	bl	800ca1c <_lseek_r>
 800c94c:	89a3      	ldrh	r3, [r4, #12]
 800c94e:	4632      	mov	r2, r6
 800c950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c954:	81a3      	strh	r3, [r4, #12]
 800c956:	4628      	mov	r0, r5
 800c958:	463b      	mov	r3, r7
 800c95a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c962:	f000 b817 	b.w	800c994 <_write_r>

0800c966 <__sseek>:
 800c966:	b510      	push	{r4, lr}
 800c968:	460c      	mov	r4, r1
 800c96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c96e:	f000 f855 	bl	800ca1c <_lseek_r>
 800c972:	1c43      	adds	r3, r0, #1
 800c974:	89a3      	ldrh	r3, [r4, #12]
 800c976:	bf15      	itete	ne
 800c978:	6560      	strne	r0, [r4, #84]	; 0x54
 800c97a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c97e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c982:	81a3      	strheq	r3, [r4, #12]
 800c984:	bf18      	it	ne
 800c986:	81a3      	strhne	r3, [r4, #12]
 800c988:	bd10      	pop	{r4, pc}

0800c98a <__sclose>:
 800c98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c98e:	f000 b813 	b.w	800c9b8 <_close_r>
	...

0800c994 <_write_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4604      	mov	r4, r0
 800c998:	4608      	mov	r0, r1
 800c99a:	4611      	mov	r1, r2
 800c99c:	2200      	movs	r2, #0
 800c99e:	4d05      	ldr	r5, [pc, #20]	; (800c9b4 <_write_r+0x20>)
 800c9a0:	602a      	str	r2, [r5, #0]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	f7f5 ff6e 	bl	8002884 <_write>
 800c9a8:	1c43      	adds	r3, r0, #1
 800c9aa:	d102      	bne.n	800c9b2 <_write_r+0x1e>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	b103      	cbz	r3, 800c9b2 <_write_r+0x1e>
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	200007fc 	.word	0x200007fc

0800c9b8 <_close_r>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4d05      	ldr	r5, [pc, #20]	; (800c9d4 <_close_r+0x1c>)
 800c9be:	4604      	mov	r4, r0
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	602b      	str	r3, [r5, #0]
 800c9c4:	f7f5 ff7a 	bl	80028bc <_close>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	d102      	bne.n	800c9d2 <_close_r+0x1a>
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	b103      	cbz	r3, 800c9d2 <_close_r+0x1a>
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	200007fc 	.word	0x200007fc

0800c9d8 <_fstat_r>:
 800c9d8:	b538      	push	{r3, r4, r5, lr}
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4d06      	ldr	r5, [pc, #24]	; (800c9f8 <_fstat_r+0x20>)
 800c9de:	4604      	mov	r4, r0
 800c9e0:	4608      	mov	r0, r1
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	602b      	str	r3, [r5, #0]
 800c9e6:	f7f5 ff74 	bl	80028d2 <_fstat>
 800c9ea:	1c43      	adds	r3, r0, #1
 800c9ec:	d102      	bne.n	800c9f4 <_fstat_r+0x1c>
 800c9ee:	682b      	ldr	r3, [r5, #0]
 800c9f0:	b103      	cbz	r3, 800c9f4 <_fstat_r+0x1c>
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	bd38      	pop	{r3, r4, r5, pc}
 800c9f6:	bf00      	nop
 800c9f8:	200007fc 	.word	0x200007fc

0800c9fc <_isatty_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	2300      	movs	r3, #0
 800ca00:	4d05      	ldr	r5, [pc, #20]	; (800ca18 <_isatty_r+0x1c>)
 800ca02:	4604      	mov	r4, r0
 800ca04:	4608      	mov	r0, r1
 800ca06:	602b      	str	r3, [r5, #0]
 800ca08:	f7f5 ff72 	bl	80028f0 <_isatty>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d102      	bne.n	800ca16 <_isatty_r+0x1a>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	b103      	cbz	r3, 800ca16 <_isatty_r+0x1a>
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	200007fc 	.word	0x200007fc

0800ca1c <_lseek_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4604      	mov	r4, r0
 800ca20:	4608      	mov	r0, r1
 800ca22:	4611      	mov	r1, r2
 800ca24:	2200      	movs	r2, #0
 800ca26:	4d05      	ldr	r5, [pc, #20]	; (800ca3c <_lseek_r+0x20>)
 800ca28:	602a      	str	r2, [r5, #0]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	f7f5 ff6a 	bl	8002904 <_lseek>
 800ca30:	1c43      	adds	r3, r0, #1
 800ca32:	d102      	bne.n	800ca3a <_lseek_r+0x1e>
 800ca34:	682b      	ldr	r3, [r5, #0]
 800ca36:	b103      	cbz	r3, 800ca3a <_lseek_r+0x1e>
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	bd38      	pop	{r3, r4, r5, pc}
 800ca3c:	200007fc 	.word	0x200007fc

0800ca40 <_read_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4604      	mov	r4, r0
 800ca44:	4608      	mov	r0, r1
 800ca46:	4611      	mov	r1, r2
 800ca48:	2200      	movs	r2, #0
 800ca4a:	4d05      	ldr	r5, [pc, #20]	; (800ca60 <_read_r+0x20>)
 800ca4c:	602a      	str	r2, [r5, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	f7f5 fefb 	bl	800284a <_read>
 800ca54:	1c43      	adds	r3, r0, #1
 800ca56:	d102      	bne.n	800ca5e <_read_r+0x1e>
 800ca58:	682b      	ldr	r3, [r5, #0]
 800ca5a:	b103      	cbz	r3, 800ca5e <_read_r+0x1e>
 800ca5c:	6023      	str	r3, [r4, #0]
 800ca5e:	bd38      	pop	{r3, r4, r5, pc}
 800ca60:	200007fc 	.word	0x200007fc

0800ca64 <_init>:
 800ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca66:	bf00      	nop
 800ca68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6a:	bc08      	pop	{r3}
 800ca6c:	469e      	mov	lr, r3
 800ca6e:	4770      	bx	lr

0800ca70 <_fini>:
 800ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca72:	bf00      	nop
 800ca74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca76:	bc08      	pop	{r3}
 800ca78:	469e      	mov	lr, r3
 800ca7a:	4770      	bx	lr
